<HTML
><HEAD
>
<TITLE>[Chapter 19] 19.3 Using Automation Objects</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl on Win32 Systems"><META
NAME="DC.creator"
CONTENT="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:37:16Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-324-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch19_01.htm"
TITLE="19. OLE Automation"><LINK
REL="prev"
HREF="ch19_02.htm"
TITLE="19.2 Creating Automation Objects"><LINK
REL="next"
HREF="ch19_04.htm"
TITLE="19.4 Variants"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl on Win32 Systems"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl on Win32 Systems"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/wsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_02.htm"
TITLE="19.2 Creating Automation Objects"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.2 Creating Automation Objects"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch19_01.htm"
TITLE="19. OLE Automation"
>Chapter 19<BR>OLE Automation</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_04.htm"
TITLE="19.4 Variants"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.4 Variants"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch19-35373"
>19.3 Using Automation Objects</A
></H2
><P
CLASS="para"
>In this section, we're going to explore automation objects by building a simple progam that sends a message using Microsoft's <EM
CLASS="emphasis"
>Active Messaging Library</EM
><A
CLASS="indexterm"
NAME="ch19-idx-87489-0"
></A
>. If you don't have Active Messaging (if you have <A
CLASS="indexterm"
NAME="ch19-idx-87490-0"
></A
>MAPI, you probably have it) on your system, you can still follow the concepts, which are generally applicable to using automation. Remember, though, that the specific methods, properties, and objects that a server exposes are specific to that server. To learn more about Active Messaging, try the Microsoft MSDN[<A
CLASS="footnote"
HREF="#ch19-pgfId-87508"
>2</A
>] web site at <A
CLASS="systemitem.url"
HREF="http://www.microsoft.com/msdn/sdk/"
>www.microsoft.com/msdn/sdk/</A
> and look for the for Active Messaging Library documentation. The Active Message Library is a complex API that provides complete services for messaging, message stores, providers, transports, and more; but we're just going to touch on the basics of sending a message here.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch19-pgfId-87508"
>[2]</A
> Microsort Developer Network&nbsp;- you might also have it on CD, if you're a Win32 programmer and subscribe to MSDN.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>The first thing we need to do is to create a Active Messaging session. This happens to be the top-level automation object for our purposes, so we'll start here with <CODE
CLASS="literal"
>CreateObject</CODE
><A
CLASS="indexterm"
NAME="ch19-idx-87492-0"
></A
>:</P
><PRE
CLASS="programlisting"
>use OLE;
$ActiveSession = CreateObject OLE &quot;MAPI.Session&quot; || 
        die &quot;CreateObject: $!&quot;;</PRE
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch19-idx-87491-0"
></A
>ProgID for the Active Messaging Session object is MAPI.Session, so that's the argument that we give to <CODE
CLASS="literal"
>CreateObject</CODE
>. After we have an Active Messaging session, we need to logon. Active Messaging provides a couple of options for doing this. If you don't supply a valid username/password combination, you'll get a logon dialog that lets you supply a user and password:</P
><PRE
CLASS="programlisting"
>$LogonName = &quot;Erik Olson&quot;;
$LogonPasswd = undef; # use stored one, or prompt
die &quot;Logon: $!&quot; if $ActiveSession-&gt;Logon($LogonName, 
        $LogonPasswd); # Logon returns 0 on success</PRE
><P
CLASS="para"
>Here, we're calling the <CODE
CLASS="literal"
>Logon</CODE
> method of the Active Messaging Session object. Because <CODE
CLASS="literal"
>Logon</CODE
> returns 0 on success, we are only dying if we get a return value (indicating an error code). If we successfully logon to the Active Messsaging session, we're ready to create a Message object. A message object is another automation object that (appropriately enough) encapsulates a message. For example:</P
><PRE
CLASS="programlisting"
>$Message = $ActiveSession-&gt;Outbox-&gt;Messages-&gt;Add();</PRE
><P
CLASS="para"
>Now, things are starting to get interesting. We're using the $ActiveSession object to call a method named <CODE
CLASS="literal"
>Outbox</CODE
> that returns an automation object (the Outbox object). We're then calling a method of the Outbox object called <CODE
CLASS="literal"
>Messages</CODE
> that returns another automation object (the Message object). We're then calling a method of the Message object named <CODE
CLASS="literal"
>Add</CODE
> that returns yet another automation object, which we're assiging to our <CODE
CLASS="literal"
>$Message</CODE
> variable. Perl lets you merrily create as many nested automation objects as you need.</P
><P
CLASS="para"
>Now that we have a Message object, we can start doing things with the message. First, we need to add a recipient. This involves another nested automation-object call:</P
><PRE
CLASS="programlisting"
>$Recipient = $Message-&gt;Recipients-&gt;Add();</PRE
><P
CLASS="para"
>Here we're calling the Recipients method of the message object that returns a recipients object. We then call the Add method of the recipients object to get a Recipient object that we can use. Let's set some properties of the recipient object:</P
><PRE
CLASS="programlisting"
>$Recipient-&gt;{Name} = &quot;Erik Olson&quot;; # to address
$Recipient-&gt;{Type} = 1; # ugly constant, means this is a To address</PRE
><P
CLASS="para"
>We've set the <CODE
CLASS="literal"
>Name</CODE
> property of the Recipient object by setting the property using the object's hash. As for that assignment to the <CODE
CLASS="literal"
>Type</CODE
> property, we've set it to 1, which is the Active Messaging value for a TO recipient (as opposed to a CC or BCC recipient). <A
CLASS="xref"
HREF="ch19_03.htm#ch19-14658"
TITLE="Recipient Type Values"
>Table 19.1</A
> displays the values for the recipient types.</P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch19-14658"
>Table 19.1: Recipient Type Values</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Recipient Type</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Value</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>MAPI_ORIG</CODE
> (recipient is message originator)</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>0</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>MAPI_TO</CODE
> (recipient is a primary recipient)</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>1</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>MAPI_CC</CODE
> (recipient is a copy recipient)</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>2</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>MAPI_BCC</CODE
> (recipient is a blind copy recipient)</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>3</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>After setting the recipient information, we need to resolve it to a name in the Active Messaging address book. We do this by calling the Resolve member of the Recipient object:</P
><PRE
CLASS="programlisting"
>$Recipient-&gt;Resolve();</PRE
><P
CLASS="para"
>Now that we know where our message is going, let's add some data to it. We need at least a subject and a body, both of which are properties of the Message object.</P
><PRE
CLASS="programlisting"
>$Message-&gt;{Subject} = &quot;A Message From Perl&quot;;
$Message-&gt;{text} = &quot;Perl does automation!&quot;;</PRE
><P
CLASS="para"
>All that remains is to save the message, send it, and terminate our session:</P
><PRE
CLASS="programlisting"
>$Message-&gt;Update();
$Message-&gt;Send(1, 0, 0);
$Message-&gt;Logoff();</PRE
><P
CLASS="para"
>We call the <CODE
CLASS="literal"
>Update</CODE
> method of the message object to save it, then the <CODE
CLASS="literal"
>Send</CODE
> method to actually send the message. The parameters to <CODE
CLASS="literal"
>Send</CODE
> are shown in <A
CLASS="xref"
HREF="ch19_03.htm#ch19-42139"
TITLE="Send Parameters"
>Table 19.2</A
>.</P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch19-42139"
>Table 19.2: Send Parameters</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parameter</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Meaning</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>saveCopy</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Save a copy of the message in the Sent-Items folder (one or zero)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>showDialog</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Display a send-message dialog where the user can change the message contents or recipients (1 or 0)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>parentWindow</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Parent-window handle for the dialog, if <CODE
CLASS="literal"
>showDialog</CODE
> is true;  in Perl, you'll normally be passing this as 0</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Let's put everything together:</P
><PRE
CLASS="programlisting"
>use OLE;
$LogonName = &quot;Erik Olson&quot;;         # send message to me
$LogonPasswd = undef;              # use stored passwd
$ActiveSession = CreateObject OLE &quot;MAPI.Session&quot; || 
        die &quot;CreateObject: $!&quot;;    # create session
die &quot;Logon: $!&quot; if $ActiveSession-&gt;Logon($LogonName, 
        $LogonPasswd);             # logon (returns 0 on success)
$Message = $ActiveSession-&gt;Outbox-&gt;Messages-&gt;Add();
$Recipient = $Message-&gt;Recipients-&gt;Add();
$Recipient-&gt;{Name} = &quot;Erik Olson&quot;; # to address
                            # ugly constant, means this is a To address
$Recipient-&gt;{Type} = 1; 
$Recipient-&gt;Resolve();             # resolve name - hope it's there
$Message-&gt;{Subject} = &quot;A Message From Perl&quot;;
$Message-&gt;{text} = &quot;Perl does automation!&quot;;
$Message-&gt;Update();                # save it
$Message-&gt;Send(1, 0, 0);           # send it - don't show UI
$ActiveSession-&gt;Logoff();          # end session</PRE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch19-pgfId-87761"
>19.3.1 Data-Access Objects</A
></H3
><P
CLASS="para"
>If you are a Perl programmer looking for a database solution, you owe it to yourself to check out Microsoft's <EM
CLASS="emphasis"
>ActiveX Data Objects</EM
><A
CLASS="indexterm"
NAME="ch19-idx-87763-0"
></A
> (ADO), which provide an automation interface to database access. ADO is a powerful data-access layer that you can use from Perl, PerlIS, or PerlScript. This layer is particularly interesting in conjunction with Active Server pages and PerlScript. See <A
CLASS="systemitem.url"
HREF="http://www.microsoft.com/ADO/"
>www.microsoft.com/ADO/</A
> for more information on ADO. The ActiveState site (<A
CLASS="systemitem.url"
HREF="http://www.activestate.com"
>www.activestate.com</A
>) has several samples using PerlScript and ADO for database access.</P
><P
CLASS="para"
>Just to tempt you, here's a quick example that uses the sample database shipped with the <A
CLASS="indexterm"
NAME="ch19-idx-87833-0"
></A
>OLEDB SDK (OLE Database Software Development Kit), with which ADO is included. For more information on the OLEDB SDK, see <A
CLASS="systemitem.url"
HREF="http://www.microsoft.com/oledb"
>www.microsoft.com/oledb</A
>. The sample database contains a table called <EM
CLASS="emphasis"
>Employees</EM
>, which includes the fields <EM
CLASS="emphasis"
>LastName</EM
>, <EM
CLASS="emphasis"
>FirstName</EM
>, and <EM
CLASS="emphasis"
>EmployeeID</EM
>. The following program just opens the data source (you have to have an ODBC driver installed for Microsoft Access database files) and lists all the rows in the <EM
CLASS="emphasis"
>Employees</EM
> table. Regardless of which data source you choose to use ADO with, you'll find the procedure to be similiar.</P
><PRE
CLASS="programlisting"
>use OLE;
$conn = CreateObject OLE &quot;ADODB.Connection&quot; || 
        die &quot;CreateObject: $!&quot;;    # create ADO auto object
$conn-&gt;Open('OLE_DB_NWind_Jet');   # connect to data source
$sql = &quot;SELECT * FROM Employees ORDER BY LastName, FirstName&quot;;
$rs = $conn-&gt;Execute($sql);        # grab all records in table
while(!$rs-&gt;EOF()) {
    $lastname = $rs-&gt;Fields('LastName')-&gt;Value;
    $firstname = $rs-&gt;Fields('FirstName')-&gt;Value;
    $empid = $rs-&gt;Fields('EmployeeId')-&gt;Value;
    write;                         # print them out
    $rs-&gt;MoveNext();
}

$rs-&gt;Close();                      # shut down the recordset
$conn-&gt;Close();                    # close the data source
# some formats for a quick printout
format STDOUT =
@&lt;&lt;&lt;&lt;&lt;      @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;   @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
$empid,     $firstname,            $lastname
.
format STDOUT_TOP =
Page @&lt;&lt;
$%
ID          First                  Last
=====       ====================   =========================
.</PRE
><P
CLASS="para"
>Our first task is to create the automation object using the now familiar <CODE
CLASS="literal"
>CreateObject</CODE
> function. We then use the ADO Connection object to execute a SQL statement. The Execute function returns a Recordset object, which we then use to iterate through all the rows, printing out the data.</P
><P
CLASS="para"
>Here's another quick program that inserts an employee into the <EM
CLASS="emphasis"
>Employees</EM
> table:</P
><PRE
CLASS="programlisting"
>use OLE;
$firstname = &quot;Homer&quot;;             # hardcode some values to insert
$lastname = &quot;Simpson&quot;;
$empid = &quot;3001&quot;;
$conn = CreateObject OLE &quot;ADODB.Connection&quot; || 
        die &quot;CreateObject: $!&quot;;   # create the ADO object
$conn-&gt;Open('OLE_DB_NWind_Jet');  # connect to the data source
# build a simple SQL INSERT
$sql = &quot;INSERT into Employees (LastName, FirstName, EmployeeID)&quot;;
$sql .= &quot;VALUES ('$lastname', '$firstname', '$empid')&quot;;
$conn-&gt;Execute($sql);             # run it
$conn-&gt;Close();</PRE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_02.htm"
TITLE="19.2 Creating Automation Objects"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.2 Creating Automation Objects"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl on Win32 Systems"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_04.htm"
TITLE="19.4 Variants"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.4 Variants"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>19.2 Creating Automation Objects</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>19.4 Variants</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
