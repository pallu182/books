<HTML
><HEAD
>
<TITLE>[Chapter 13] File and Directory Manipulation</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl on Win32 Systems"><META
NAME="DC.creator"
CONTENT="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:35:23Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-324-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"><LINK
REL="prev"
HREF="ch12_06.htm"
TITLE="12.6 Exercises"><LINK
REL="next"
HREF="ch13_02.htm"
TITLE="13.2 Renaming a File"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl on Win32 Systems"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl on Win32 Systems"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/wsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_06.htm"
TITLE="12.6 Exercises"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.6 Exercises"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 13</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_02.htm"
TITLE="13.2 Renaming a File"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.2 Renaming a File"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="ch13-34295"
>13. File and Directory Manipulation</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch13-26411"
TITLE="13.1 Removing a File"
>Removing a File</A
><BR><A
CLASS="sect1"
HREF="ch13_02.htm"
TITLE="13.2 Renaming a File"
>Renaming a File</A
><BR><A
CLASS="sect1"
HREF="ch13_03.htm"
TITLE="13.3 Making and Removing Directories"
>Making and Removing Directories</A
><BR><A
CLASS="sect1"
HREF="ch13_04.htm"
TITLE="13.4 Modifying Permissions"
>Modifying Permissions</A
><BR><A
CLASS="sect1"
HREF="ch13_05.htm"
TITLE="13.5 Modifying Timestamps"
>Modifying Timestamps</A
><BR><A
CLASS="sect1"
HREF="ch13_06.htm"
TITLE="13.6 Exercises"
>Exercises</A
></P
><P
></P
></DIV
><P
CLASS="para"
>This chapter shows you how to manipulate the files themselves, not merely the data contained within. Perl uses UNIX semantics for providing access to files and directories. Some of these names will be familiar to Win32 programmers who have used the C run-time library, while others may not. Perl provides a rich set of file and directory manipulation routines, and not all of these are implemented on Win32 platforms, but we'll cover the most useful ones here.[<A
CLASS="footnote"
HREF="#ch13-pgfId-871496"
>1</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch13-pgfId-871496"
>[1]</A
> In particular, we've omitted discussion of the <CODE
CLASS="literal"
>link()</CODE
><A
CLASS="indexterm"
NAME="ch13-idx-873000-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-873000-1"
></A
> and <CODE
CLASS="literal"
>symlink()</CODE
> functions, used to create hard and symbolic links under Unix, because these functions are unimplemented in the Windows NT filesystems and thus in Perl for Win32, as well.</P
></DIV
></BLOCKQUOTE
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch13-26411"
>13.1 Removing a File</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-350-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-350-1"
></A
>Earlier, you learned how to create a file from within Perl by opening it for output with a filehandle. Now, we'll get dangerous and learn how to remove a file (very appropriate for <A
CLASS="xref"
HREF="ch13_01.htm"
TITLE="File and Directory Manipulation"
>Chapter 13, <CITE
CLASS="chapter"
>File and Directory Manipulation</CITE
></A
>, don't you think?).</P
><P
CLASS="para"
>The Perl <A
CLASS="indexterm"
NAME="ch13-idx-352-0"
></A
><CODE
CLASS="literal"
>unlink</CODE
> function (named for the POSIX system call) deletes a file. This is exactly what the command prompt <EM
CLASS="emphasis"
>del</EM
><A
CLASS="indexterm"
NAME="ch13-idx-354-0"
></A
> command does. Here's how to remove a file called <EM
CLASS="emphasis"
>fred</EM
> and then remove a file specified during program execution:</P
><PRE
CLASS="programlisting"
>unlink (&quot;fred&quot;); # say goodbye to fred
print &quot;what file do you want to delete? &quot;;
chomp($name = &lt;STDIN&gt;);
unlink ($name);</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>unlink</CODE
> function can take a list of names to be unlinked as well:</P
><PRE
CLASS="programlisting"
>unlink (&quot;<A
CLASS="indexterm"
NAME="ch13-idx-360-0"
></A
>spottedowl&quot;,&quot;meadowlark&quot;); # kill two birds
unlink &lt;*.bak&gt;; # just like &quot;del *.bak&quot; in the command prompt</PRE
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch13-idx-363-0"
></A
>glob is evaluated in a list context, creating a list of filenames that match the pattern. This list is exactly what we need to feed <CODE
CLASS="literal"
>unlink</CODE
>.</P
><P
CLASS="para"
>The return value of <CODE
CLASS="literal"
>unlink</CODE
> is the number of files successfully deleted. If only one argument exists, and it is deleted, the result is one; otherwise, the result is zero. If there are three filenames but only two could be deleted, the result is two. You can't tell which two, so if you need to figure out which deletion failed, you must do them one at a time. Here's how to delete all of the backup files (ending in <EM
CLASS="emphasis"
>.bak</EM
>) while reporting an error for any file that cannot be deleted:</P
><PRE
CLASS="programlisting"
>foreach $file (&lt;*.bak&gt;) { # step through a list of .bak files
        unlink($file) || warn &quot;having trouble deleting $file: $!&quot;;
}</PRE
><P
CLASS="para"
>If <CODE
CLASS="literal"
>unlink</CODE
> returns one (meaning the one file specified was indeed deleted), the true result skips the <CODE
CLASS="literal"
>warn</CODE
> function. If the filename cannot be deleted, the zero result is false, so the <CODE
CLASS="literal"
>warn</CODE
> is executed. Once again, this can be read abstractly as "unlink this file or tell me about it."</P
><P
CLASS="para"
>If the <CODE
CLASS="literal"
>unlink</CODE
> function is given no arguments, the <A
CLASS="indexterm"
NAME="ch13-idx-370-0"
></A
><CODE
CLASS="literal"
>$_</CODE
> variable is once again used as a default. Thus, we could have written the preceding loop as:</P
><PRE
CLASS="programlisting"
>foreach (&lt;*.bak&gt;) { # step through a list of .bak files
        unlink || warn &quot;having trouble deleting $_\: $!&quot;;
}</PRE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_06.htm"
TITLE="12.6 Exercises"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.6 Exercises"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl on Win32 Systems"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_02.htm"
TITLE="13.2 Renaming a File"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.2 Renaming a File"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>12.6 Exercises</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>13.2 Renaming a File</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
