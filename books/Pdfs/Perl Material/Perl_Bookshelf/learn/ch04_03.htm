<HTML
><HEAD
>
<TITLE>[Chapter 4] 4.3 The while/until Statement</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:32:30Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. Control Structures"><LINK
REL="prev"
HREF="ch04_02.htm"
TITLE="4.2 The if/unless Statement"><LINK
REL="next"
HREF="ch04_04.htm"
TITLE="4.4 The for Statement"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm"
TITLE="4.2 The if/unless Statement"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.2 The if/unless Statement"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. Control Structures"
>Chapter 4<BR>Control Structures</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_04.htm"
TITLE="4.4 The for Statement"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.4 The for Statement"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch04-32411"
>4.3 The while/until Statement</A
></H2
><P
CLASS="para"
>No programming language would be complete without some form of iteration[<A
CLASS="footnote"
HREF="#ch04-pgfId-471"
>2</A
>] (repeated execution of a block of statements). Perl can iterate using the <A
CLASS="indexterm"
NAME="ch04-idx-437538-0"
></A
><CODE
CLASS="literal"
>while</CODE
> statement:<PRE
CLASS="programlisting"
>while (<CODE
CLASS="replaceable"
><I
>some_expression</I
></CODE
>) {
    <CODE
CLASS="replaceable"
><I
>statement_1</I
></CODE
>;
    <CODE
CLASS="replaceable"
><I
>statement_2</I
></CODE
>;
    <CODE
CLASS="replaceable"
><I
>statement_3</I
></CODE
>;
}</PRE
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch04-pgfId-471"
>[2]</A
> That's why HTML is not a programming language.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>To execute this <CODE
CLASS="literal"
>while</CODE
> statement, Perl evaluates the <A
CLASS="indexterm"
NAME="ch04-idx-437539-0"
></A
>control expression (<CODE
CLASS="replaceable"
><I
>some_expression</I
></CODE
> in the example). If its value is true (using Perl's notion of truth), the body of the <CODE
CLASS="literal"
>while</CODE
> statement is evaluated once. This is repeated until the control expression becomes false, at which point Perl goes on to the next statement after the <CODE
CLASS="literal"
>while</CODE
> <CODE
CLASS="literal"
>loop</CODE
>. For example:</P
><PRE
CLASS="programlisting"
>print &quot;how old are you? &quot;;
$a = &lt;STDIN&gt;;
chomp($a);
while ($a &gt; 0) {
    print &quot;At one time, you were $a years old.\n&quot;;
    $a--;
}</PRE
><P
CLASS="para"
>Sometimes it is easier to say "until something is true" rather than "while not this is true." Once again, Perl has the answer. Replacing the <CODE
CLASS="literal"
>while</CODE
> with <A
CLASS="indexterm"
NAME="ch04-idx-437540-0"
></A
><CODE
CLASS="literal"
>until</CODE
> yields the desired effect:</P
><PRE
CLASS="programlisting"
>until (<CODE
CLASS="replaceable"
><I
>some_expression</I
></CODE
>) {
    <CODE
CLASS="replaceable"
><I
>statement_1</I
></CODE
>;
    <CODE
CLASS="replaceable"
><I
>statement_2</I
></CODE
>;
    <CODE
CLASS="replaceable"
><I
>statement_3</I
></CODE
>;
}</PRE
><P
CLASS="para"
>Note that in both the <CODE
CLASS="literal"
>while</CODE
> and the <CODE
CLASS="literal"
>until</CODE
> form, the body statements will be skipped entirely if the control expression is the termination value to begin with. For example, if a user enters an age less than zero for the program fragment above, Perl skips over the body of the loop.</P
><P
CLASS="para"
>It's possible that the <A
CLASS="indexterm"
NAME="ch04-idx-437541-0"
></A
>control expression never lets the loop exit. This is perfectly legal, and sometimes desired, and thus not considered an error. For example, you might want a loop to repeat as long as you have no error, and then have some error-handling code following the loop. You might use this for a daemon that is meant to run until the system crashes.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch04-pgfId-487"
>4.3.1 The do {} while/until Statement</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>while/until</CODE
> statement you saw in the previous section tests its condition at the top of every loop, before the loop is entered. If the condition was already false to begin with, the loop won't be executed at all.</P
><P
CLASS="para"
>But sometimes you don't want to test the condition at the top of the loop. Instead, you want to test it at the bottom. To fill this need, Perl provides the <CODE
CLASS="literal"
>do</CODE
> <CODE
CLASS="literal"
>{}</CODE
> <CODE
CLASS="literal"
>while</CODE
> statement, which is just like[<A
CLASS="footnote"
HREF="#ch04-pgfId-437837"
>3</A
>] the regular <CODE
CLASS="literal"
>while</CODE
> statement except that it doesn't test the expression until after executing the loop once.<PRE
CLASS="programlisting"
>do {
    statement_1;
    statement_2;
    statement_3;
} while some_expression;</PRE
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch04-pgfId-437837"
>[3]</A
>  Well, not quite just like; the loop control directives explained in <A
CLASS="xref"
HREF="ch09_01.htm"
TITLE="Miscellaneous Control Structures"
>Chapter 9, <CITE
CLASS="chapter"
>Miscellaneous Control Structures</CITE
></A
>, don't work for the bottom-testing form.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Perl executes the statements in the <CODE
CLASS="literal"
>do</CODE
> block.When it reaches the end, it evaluates the expression for truth. If the expression is false, the loop is done. If it's true, then the whole block is executed one more time before the expression is once again checked.</P
><P
CLASS="para"
>As with a normal <CODE
CLASS="literal"
>while</CODE
> loop, you can invert the sense of the test by changing <CODE
CLASS="literal"
>do</CODE
> <CODE
CLASS="literal"
>{}</CODE
> <CODE
CLASS="literal"
>while</CODE
> to <CODE
CLASS="literal"
>do</CODE
> <CODE
CLASS="literal"
>{}</CODE
> <CODE
CLASS="literal"
>until</CODE
>. The expression is still tested at the bottom, but its sense is reversed. For some cases, especially compound ones, this is the more natural way to write the test.</P
><PRE
CLASS="programlisting"
>$stops = 0;
do {
    $stops++;
    print &quot;Next stop? &quot;;
    chomp($location = &lt;STDIN&gt;);
} until $stops &gt; 5 || $location eq 'home';</PRE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_02.htm"
TITLE="4.2 The if/unless Statement"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.2 The if/unless Statement"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_04.htm"
TITLE="4.4 The for Statement"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.4 The for Statement"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.2 The if/unless Statement</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.4 The for Statement</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
