<HTML
><HEAD
>
<TITLE>[Chapter 3] 3.2.188 vec</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:56:31Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_02.htm"
TITLE="3.2 Perl Functions in Alphabetical Order"><LINK
REL="prev"
HREF="ch03_187.htm"
TITLE="3.2.187 values"><LINK
REL="next"
HREF="ch03_189.htm"
TITLE="3.2.189 wait"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_187.htm"
TITLE="3.2.187 values"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.187 values"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. Functions"
>Chapter 3<BR>Functions</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_189.htm"
TITLE="3.2.189 wait"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.189 wait"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CMD-VEC"
>3.2.188 vec</A
></H3
><PRE
CLASS="programlisting"
>vec <CODE
CLASS="replaceable"
><I
>EXPR</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>OFFSET</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>BITS</I
></CODE
></PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14210"
></A
><A
CLASS="indexterm"
NAME="AUTOID-14212"
></A
><A
CLASS="indexterm"
NAME="AUTOID-14214"
></A
><A
CLASS="indexterm"
NAME="AUTOID-14217"
></A
>This function treats a string (the value of <CODE
CLASS="replaceable"
><I
>EXPR</I
></CODE
>) as a vector of
unsigned integers, and returns the value of the element specified by
<CODE
CLASS="replaceable"
><I
>OFFSET</I
></CODE
> and <CODE
CLASS="replaceable"
><I
>BITS</I
></CODE
>.
The function may also be assigned to, which causes the element to be
modified.
The purpose of the function is to provide very compact storage of lists of
small integers.  The integers may be very small&nbsp;- vectors can hold
numbers that are as small as one bit, resulting in a bitstring.</P
><P
CLASS="para"
>The <CODE
CLASS="replaceable"
><I
>OFFSET</I
></CODE
> specifies how many elements to skip over to find the one you
want.  <CODE
CLASS="replaceable"
><I
>BITS</I
></CODE
> is the number of bits per element in the vector, so each
element can contain an unsigned integer in the range
<CODE
CLASS="literal"
>0..(2**</CODE
><CODE
CLASS="replaceable"
><I
>BITS</I
></CODE
>)<CODE
CLASS="literal"
>-1</CODE
>.
<CODE
CLASS="replaceable"
><I
>BITS</I
></CODE
> must be one of <CODE
CLASS="literal"
>1</CODE
>, <CODE
CLASS="literal"
>2</CODE
>, <CODE
CLASS="literal"
>4</CODE
>, <CODE
CLASS="literal"
>8</CODE
>,
<CODE
CLASS="literal"
>16</CODE
>, or
<CODE
CLASS="literal"
>32</CODE
>.  As many elements as possible are packed into each byte, and
the ordering is such that <CODE
CLASS="literal"
>vec($vectorstring,0,1)</CODE
> is guaranteed
to go into the lowest bit of the first byte of the string.  To find
out the position of the byte in which an element is going to be put,
you have to multiply the <CODE
CLASS="replaceable"
><I
>OFFSET</I
></CODE
> by the number of elements per
byte.  When <CODE
CLASS="replaceable"
><I
>BITS</I
></CODE
> is 1, there are eight elements per byte.  When
<CODE
CLASS="replaceable"
><I
>BITS</I
></CODE
> is 2,
there are four elements per byte.  When <CODE
CLASS="replaceable"
><I
>BITS</I
></CODE
>
is 4, there are two elements (called nybbles)
per byte.  And so on.</P
><P
CLASS="para"
>Regardless of whether your machine is big-endian or little-endian,
<CODE
CLASS="literal"
>vec($foo, 0, 8)</CODE
> always refers to the first byte of string
<CODE
CLASS="literal"
>$foo</CODE
>.  See <B
CLASS="emphasis.bold"
>select</B
> for
examples of bitmaps generated with <A
CLASS="xref"
HREF="ch03_188.htm"
TITLE="vec"
><B
CLASS="xref.cmd"
>vec</B
></A
>.</P
><P
CLASS="para"
>Vectors created with <A
CLASS="xref"
HREF="ch03_188.htm"
TITLE="vec"
><B
CLASS="xref.cmd"
>vec</B
></A
> can also be
manipulated with the logical operators <CODE
CLASS="literal"
>|</CODE
>,
<CODE
CLASS="literal"
>&amp;</CODE
>, <CODE
CLASS="literal"
>^</CODE
>, and <CODE
CLASS="literal"
>~</CODE
>, which
will assume a bit vector operation is desired when the operands are strings.</P
><P
CLASS="para"
>A bit vector (<CODE
CLASS="replaceable"
><I
>BITS == 1</I
></CODE
>) can be translated to or from
a string of 1s and 0s by supplying a <CODE
CLASS="literal"
>b*</CODE
> template to <A
CLASS="xref"
HREF="ch03_182.htm"
TITLE="unpack"
><B
CLASS="xref.cmd"
>unpack</B
></A
> or <A
CLASS="xref"
HREF="ch03_105.htm"
TITLE="pack"
><B
CLASS="xref.cmd"
>pack</B
></A
>.  Similarly, a vector of nybbles (<CODE
CLASS="replaceable"
><I
>BITS ==
4</I
></CODE
>) can be translated with an <CODE
CLASS="literal"
>h*</CODE
> template.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_187.htm"
TITLE="3.2.187 values"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.187 values"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_189.htm"
TITLE="3.2.189 wait"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.189 wait"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.2.187 values</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.2.189 wait</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
