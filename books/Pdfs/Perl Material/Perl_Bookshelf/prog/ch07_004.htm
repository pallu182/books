<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.2.4 Benchmark&nbsp;- Check and Compare Running Times of Code</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T02:01:14Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_02.htm"
TITLE="7.2 Library Modules"><LINK
REL="prev"
HREF="ch07_003.htm"
TITLE="7.2.3 AutoSplit&nbsp;- Split a Module for Autoloading"><LINK
REL="next"
HREF="ch07_005.htm"
TITLE="7.2.5 Carp&nbsp;- Generate Error Messages"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_003.htm"
TITLE="7.2.3 AutoSplit&nbsp;- Split a Module for Autoloading"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.3 AutoSplit&nbsp;- Split a Module for Autoloading"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. The Standard Perl Library"
>Chapter 7<BR>The Standard Perl Library</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_005.htm"
TITLE="7.2.5 Carp&nbsp;- Generate Error Messages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.5 Carp&nbsp;- Generate Error Messages"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="AUTOID-19128"
>7.2.4 Benchmark&nbsp;- Check and Compare Running Times of Code</A
></H3
><A
CLASS="indexterm"
NAME="CH07.BMM1"
></A
><A
CLASS="indexterm"
NAME="CH07.BMM2"
></A
><A
CLASS="indexterm"
NAME="CH07.BMM3"
></A
><PRE
CLASS="programlisting"
>use Benchmark;

# timeit():  run $count iterations of the given Perl code, and time it
$t = timeit($count, '<CODE
CLASS="replaceable"
><I
>CODE</I
></CODE
>');  # $t is now a Benchmark object

# timestr():  convert Benchmark times to printable strings
print &quot;$count loops of '<CODE
CLASS="replaceable"
><I
>CODE</I
></CODE
>' took:&quot;, timestr($t), &quot;\n&quot;;

# timediff():  calculate the difference between two times
$t = timediff($t1 - $t2);

# timethis():  run &quot;code&quot; $count times with timeit(); also, print out a
#     header saying &quot;timethis $count: &quot;
$t = timethis($count, &quot;<CODE
CLASS="replaceable"
><I
>CODE</I
></CODE
>&quot;);

# timethese():  run timethis() on multiple chunks of code
@t = timethese($count, {
    'Name1' =&gt; '...<CODE
CLASS="replaceable"
><I
>CODE1</I
></CODE
>...',
    'Name2' =&gt; '...<CODE
CLASS="replaceable"
><I
>CODE2</I
></CODE
>...',
});

# new method:  return the current time
$t0 = new Benchmark;
# ... your <CODE
CLASS="replaceable"
><I
>CODE</I
></CODE
> here ...
$t1 = new Benchmark;
$td = timediff($t1, $t0);
print &quot;the code took: &quot;, timestr($td), &quot;\n&quot;;

# debug method:  enable or disable debugging
Benchmark-&gt;debug(1);
$t = timeit(10, ' 5 ** $Global ');
Benchmark-&gt;debug(0);</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-19146"
></A
>The Benchmark module encapsulates a number of routines to help you
figure out how long it takes to execute some code a given number of times
within a loop.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-19150"
></A
>For the <CODE
CLASS="literal"
>timeit()</CODE
> routine, <CODE
CLASS="literal"
>$count</CODE
> is the
number of times to run the loop.  <CODE
CLASS="replaceable"
><I
>CODE</I
></CODE
> is a string
containing the code to run.  <CODE
CLASS="literal"
>timeit()</CODE
> runs a null loop with
<CODE
CLASS="literal"
>$count</CODE
> iterations, and then runs the same loop with your code
inserted.  It reports the difference between the times of execution.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-19158"
></A
>For <CODE
CLASS="literal"
>timethese()</CODE
>, a loop of <CODE
CLASS="literal"
>$count</CODE
> iterations is run on
each code chunk separately, and the results are reported separately.
The code to run is given as a hash with keys that are names and values
that are code.  <CODE
CLASS="literal"
>timethese()</CODE
> is handy for quick tests to determine
which way of doing something is faster.  For example:</P
><PRE
CLASS="programlisting"
>$ perl -MBenchmark -Minteger
timethese(100000, { add =&gt; '$i += 2', inc =&gt; '$i++; $i++' });
__END__
Benchmark: timing 1000000 iterations of add, inc...
       add:  4 secs ( 4.52 usr  0.00 sys =  4.52 cpu)
       inc:  6 secs ( 5.32 usr  0.00 sys =  5.32 cpu)</PRE
><P
CLASS="para"
>The following routines are exported into your namespace
if you use the Benchmark module:</P
><PRE
CLASS="programlisting"
>timeit()
timethis()
timethese()
timediff()
timestr()</PRE
><P
CLASS="para"
>The following routines will be exported into your namespace
if you specifically ask that they be imported:<A
CLASS="indexterm"
NAME="AUTOID-19167"
></A
><A
CLASS="indexterm"
NAME="AUTOID-19169"
></A
><A
CLASS="indexterm"
NAME="AUTOID-19171"
></A
><A
CLASS="indexterm"
NAME="AUTOID-19173"
></A
></P
><PRE
CLASS="programlisting"
>clearcache()     # clear just the cache element indexed by $key
clearallcache()  # clear the entire cache
disablecache()   # do not use the cache
enablecache()    # resume caching</PRE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.3"
>7.2.4.1 Notes</A
></H4
><P
CLASS="para"
>Code is executed in the caller's package.</P
><P
CLASS="para"
>The null loop times are cached, the key being the
number of iterations.  You can control caching with calls like these:</P
><PRE
CLASS="programlisting"
>clearcache($key);
clearallcache();
disablecache();
enablecache();</PRE
><P
CLASS="para"
>Benchmark inherits only from the Exporter class.</P
><P
CLASS="para"
>The elapsed time is measured using <EM
CLASS="emphasis"
>time</EM
>(2) and the
granularity is therefore only one second.  Times are given in seconds for the
whole loop (not divided by the number of iterations).  Short tests may produce
negative figures because Perl can appear to take longer to execute the empty
loop than a short test.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-19185"
></A
><A
CLASS="indexterm"
NAME="AUTOID-19188"
></A
><A
CLASS="indexterm"
NAME="AUTOID-19190"
></A
>The user and system CPU time is measured to millisecond accuracy using
<EM
CLASS="emphasis"
>times</EM
>(3).  In general, you should pay more
attention to the CPU time than to elapsed time, especially if other processes
are running on the system.  Also, elapsed times of five seconds or more are
needed for reasonable accuracy.</P
><P
CLASS="para"
>Because you pass in a string to be <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
>ed
instead of a closure to be executed, lexical variables declared with <A
CLASS="xref"
HREF="ch03_097.htm"
TITLE="my"
><B
CLASS="xref.cmd"
>my</B
></A
> outside of the <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
> are not visible.<A
CLASS="indexterm"
NAME="AUTOID-19197"
></A
><A
CLASS="indexterm"
NAME="AUTOID-19198"
></A
><A
CLASS="indexterm"
NAME="AUTOID-19199"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_003.htm"
TITLE="7.2.3 AutoSplit&nbsp;- Split a Module for Autoloading"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.3 AutoSplit&nbsp;- Split a Module for Autoloading"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_005.htm"
TITLE="7.2.5 Carp&nbsp;- Generate Error Messages"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.5 Carp&nbsp;- Generate Error Messages"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.2.3 AutoSplit&nbsp;- Split a Module for Autoloading</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.2.5 Carp&nbsp;- Generate Error Messages</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
