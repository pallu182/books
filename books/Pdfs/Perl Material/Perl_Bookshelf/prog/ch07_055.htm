<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.2.55 SelfLoader&nbsp;- Load Functions Only on Demand</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T02:03:41Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_02.htm"
TITLE="7.2 Library Modules"><LINK
REL="prev"
HREF="ch07_054.htm"
TITLE="7.2.54 SelectSaver&nbsp;- Save and Restore Selected Filehandle"><LINK
REL="next"
HREF="ch07_056.htm"
TITLE="7.2.56 Shell&nbsp;- Run Shell Commands Transparently Within Perl"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_054.htm"
TITLE="7.2.54 SelectSaver&nbsp;- Save and Restore Selected Filehandle"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.54 SelectSaver&nbsp;- Save and Restore Selected Filehandle"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. The Standard Perl Library"
>Chapter 7<BR>The Standard Perl Library</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_056.htm"
TITLE="7.2.56 Shell&nbsp;- Run Shell Commands Transparently Within Perl"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.56 Shell&nbsp;- Run Shell Commands Transparently Within Perl"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="AUTOID-26483"
>7.2.55 SelfLoader&nbsp;- Load Functions Only on Demand</A
></H3
><PRE
CLASS="programlisting"
>package GoodStuff;
use SelfLoader;

<EM
CLASS="emphasis"
>[initializing code]</EM
>
__DATA__
sub {...};</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH07.SELF"
></A
><A
CLASS="indexterm"
NAME="AUTOID-26490"
></A
><A
CLASS="indexterm"
NAME="AUTOID-26493"
></A
>This module is used for delayed loading of Perl functions
that (unlike AutoLoader functions) are packaged within your script file.
This gives the <EM
CLASS="emphasis"
>appearance</EM
>
of faster loading.</P
><P
CLASS="para"
>In the example above, SelfLoader tells its user (GoodStuff) that
functions in the GoodStuff package are to
be autoloaded from after the <CODE
CLASS="literal"
>__DATA__</CODE
> token.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>__DATA__</CODE
> token tells Perl that the code
for compilation is finished.  Everything after the
<CODE
CLASS="literal"
>__DATA__</CODE
> token is available for reading via
the filehandle <CODE
CLASS="literal"
>GoodStuff::DATA</CODE
>, where


GoodStuff is the name of the current package when the
<CODE
CLASS="literal"
>__DATA__</CODE
> token is reached. This token works
just the same as <CODE
CLASS="literal"
>__END__</CODE
> does in package
main, except that data after <CODE
CLASS="literal"
>__END__</CODE
> is
retrievable only in package main, whereas data after
<CODE
CLASS="literal"
>__DATA__</CODE
> is retrievable in whatever the
current package is.</P
><P
CLASS="para"
>Note that it is possible to have <CODE
CLASS="literal"
>__DATA__</CODE
>
tokens in the same package in multiple files, and that the last
<CODE
CLASS="literal"
>__DATA__</CODE
> token in a given package that is
encountered by the compiler is the one accessible by the filehandle.  That is,
whenever the <CODE
CLASS="literal"
>__DATA__</CODE
> token is parsed, any
<CODE
CLASS="literal"
>DATA</CODE
> filehandle previously open in the current package
(opened in a different file, presumably) is closed so that the new one can be
opened. (This also applies to <CODE
CLASS="literal"
>__END__</CODE
>
and the <CODE
CLASS="literal"
>main::DATA</CODE
> filehandle:
<CODE
CLASS="literal"
>main::DATA</CODE
> is reopened whenever
<CODE
CLASS="literal"
>__END__</CODE
> is encountered, so
any former association is lost.)</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.88"
>7.2.55.1 SelfLoader autoloading</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-26520"
></A
>The SelfLoader will read from the <CODE
CLASS="literal"
>GoodStuff::DATA</CODE
> filehandle
to get definitions for functions placed after
<CODE
CLASS="literal"
>__DATA__</CODE
>, and then
<A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
> the requested
subroutine the first time
it's called. The costs
are the one-time parsing of the data after
<CODE
CLASS="literal"
>__DATA__</CODE
>, and a load
delay for the first call
of any autoloaded function. The benefits are a speeded up
compilation phase, with no need to load functions that are never used.</P
><P
CLASS="para"
>You can use <CODE
CLASS="literal"
>__END__</CODE
> after
<CODE
CLASS="literal"
>__DATA__</CODE
>.  The SelfLoader will stop reading
from <CODE
CLASS="literal"
>DATA</CODE
> if it encounters the
<CODE
CLASS="literal"
>__END__</CODE
> token, just as you might expect.  If
the <CODE
CLASS="literal"
>__END__</CODE
> token is present, and is followed
by the token <CODE
CLASS="literal"
>DATA</CODE
>, then the SelfLoader leaves the
<CODE
CLASS="literal"
>GoodStuff::DATA</CODE
> filehandle open on the line after that token.</P
><P
CLASS="para"
>The SelfLoader exports the <CODE
CLASS="literal"
>AUTOLOAD</CODE
> subroutine to the package using the
SelfLoader, and this triggers the automatic loading of an undefined
subroutine out of its <CODE
CLASS="literal"
>DATA</CODE
> portion the first time that subroutine is
called.</P
><P
CLASS="para"
>There is no advantage to putting subroutines that will always
be called after the <CODE
CLASS="literal"
>__DATA__</CODE
> token.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.89"
>7.2.55.2 Autoloading and file-scoped lexicals</A
></H4
><P
CLASS="para"
>A <CODE
CLASS="literal"
>my $pack_lexical</CODE
> statement makes the variable
<CODE
CLASS="literal"
>$pack_lexical</CODE
> visible <EM
CLASS="emphasis"
>only</EM
> up to the
<CODE
CLASS="literal"
>__DATA__</CODE
> token.  That means that subroutines
declared elsewhere cannot see lexical variables.  Specifically, autoloaded
functions cannot see such lexicals (this applies to both the SelfLoader and
the Autoloader).  The <CODE
CLASS="literal"
>use vars</CODE
> pragma (see later in this
chapter) provides a way to declare package-level globals that will be visible to
autoloaded routines.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.90"
>7.2.55.3 SelfLoader and AutoLoader</A
></H4
><P
CLASS="para"
>The SelfLoader can replace the AutoLoader&nbsp;- just change <CODE
CLASS="literal"
>use AutoLoader</CODE
>
to <CODE
CLASS="literal"
>use SelfLoader</CODE
>[<A
CLASS="footnote"
HREF="#AUTOID-26553"
>13</A
>]
and the <CODE
CLASS="literal"
>__END__</CODE
> token to <CODE
CLASS="literal"
>__DATA__</CODE
>.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-26553"
>[13]</A
> Be aware, however, that the SelfLoader exports
an <CODE
CLASS="literal"
>AUTOLOAD</CODE
> function into your package.  But if you have your own <CODE
CLASS="literal"
>AUTOLOAD</CODE
> and
are using the AutoLoader too, you probably know what you're doing.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>There is no need to inherit from the SelfLoader.</P
><P
CLASS="para"
>The SelfLoader works similarly to the AutoLoader, but picks up the subroutine
definitions from after the <CODE
CLASS="literal"
>__DATA__</CODE
> instead
of in the <EM
CLASS="emphasis"
>lib/auto/</EM
> directory.  SelfLoader needs less
maintenance at the time the module is installed, since there's no need to run
AutoSplit.  And it can run faster at load time because it doesn't need to keep
opening and closing files to load subroutines.  On the other hand, it can run
slower because it needs to parse the code after the
<CODE
CLASS="literal"
>__DATA__</CODE
>. Details of the AutoLoader and
another view of these distinctions can be found in that module's documentation.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.91"
>7.2.55.4 How to read DATA from your Perl program</A
></H4
><P
CLASS="para"
>(This section is only relevant if you want to use
the <CODE
CLASS="literal"
>GoodStuff::DATA</CODE
> together with the SelfLoader.)</P
><P
CLASS="para"
>The SelfLoader reads from wherever the current position of the
<CODE
CLASS="literal"
>GoodStuff::DATA</CODE
> filehandle is, until EOF or the
<CODE
CLASS="literal"
>__END__</CODE
> token.  This means that if you want
to use that filehandle (and <EM
CLASS="emphasis"
>only</EM
> if you want to), you
should either</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Put all your subroutine declarations immediately
after the <CODE
CLASS="literal"
>__DATA__</CODE
> token and put your own data after those
declarations, using the <CODE
CLASS="literal"
>__END__</CODE
> token to mark
the end of subroutine
declarations.  You must also ensure that the SelfLoader first reads its
stubs by calling <CODE
CLASS="literal"
>SelfLoader-&gt;load_stubs();</CODE
>, or by using a function
which is selfloaded; or</P
></LI
></UL
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>You should read the <CODE
CLASS="literal"
>GoodStuff::DATA</CODE
>
filehandle first, leaving the handle open and positioned at the first line
of subroutine declarations.</P
></LI
></UL
><P
CLASS="para"
>You could even conceivably do both.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.92"
>7.2.55.5 Classes and inherited methods</A
></H4
><P
CLASS="para"
>This section is only relevant if your module is a class, and has methods
that could be inherited.</P
><P
CLASS="para"
>A subroutine stub (or forward declaration) looks like:</P
><PRE
CLASS="programlisting"
>sub <CODE
CLASS="replaceable"
><I
>stub</I
></CODE
>;</PRE
><P
CLASS="para"
>That is, it is a subroutine declaration without the body of the subroutine.  For
modules that aren't classes, there is no real need for stubs as far as
autoloading is concerned.</P
><P
CLASS="para"
>For modules that <EM
CLASS="emphasis"
>are</EM
> classes, and need to handle inherited
methods, stubs are needed to ensure that the method inheritance mechanism works
properly. You can load the stubs into the module at <A
CLASS="xref"
HREF="ch03_123.htm"
TITLE="require"
><B
CLASS="xref.cmd"
>require</B
></A
> time, by adding the statement
<CODE
CLASS="literal"
>SelfLoader-&gt;load_stubs();</CODE
> to the module to do this.</P
><P
CLASS="para"
>The alternative is to put the stubs in before the
<CODE
CLASS="literal"
>__DATA__</CODE
> token before releasing the module,
and for this purpose the Devel::SelfStubber module is available.  However this
does require the extra step of ensuring that the stubs are in the module.  If
you do this, we strongly recommended that you do it before releasing the module
and <EM
CLASS="emphasis"
>not</EM
> at install time.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.93"
>7.2.55.6 Multiple packages and fully qualified subroutine names</A
></H4
><P
CLASS="para"
>Subroutines in multiple packages within the same file are supported&nbsp;- but
you should note that this requires exporting
<CODE
CLASS="literal"
>SelfLoader::AUTOLOAD</CODE
> to every package which requires it. This
is done automatically by the SelfLoader when it first loads the subs into the
cache, but you should really specify it in the initialization before the
<CODE
CLASS="literal"
>__DATA__</CODE
> by putting a <CODE
CLASS="literal"
>use
SelfLoader</CODE
> statement in each package.</P
><P
CLASS="para"
>Fully qualified subroutine names are also supported. For example:</P
><PRE
CLASS="programlisting"
><CODE
CLASS="literal"
>__DATA__</CODE
>
sub foo::bar {23}
package baz;
sub dob {32}</PRE
><P
CLASS="para"
>will all be loaded correctly by the SelfLoader, and the SelfLoader will ensure
that the packages &quot;foo&quot; and &quot;baz&quot; correctly have the
<CODE
CLASS="literal"
>SelfLoader::AUTOLOAD</CODE
> method when the data after
<CODE
CLASS="literal"
>__DATA__</CODE
> is first parsed.</P
><P
CLASS="para"
>See the discussion of autoloading in <A
CLASS="xref"
HREF="ch05_01.htm"
TITLE="Packages, Modules, and Object Classes"
>Chapter 5</A
>.
Also see the AutoLoader module, a
utility that handles modules that have been into a collection of files for
autoloading.</P
><A
CLASS="indexterm"
NAME="AUTOID-26611"
></A
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_054.htm"
TITLE="7.2.54 SelectSaver&nbsp;- Save and Restore Selected Filehandle"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.54 SelectSaver&nbsp;- Save and Restore Selected Filehandle"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_056.htm"
TITLE="7.2.56 Shell&nbsp;- Run Shell Commands Transparently Within Perl"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.56 Shell&nbsp;- Run Shell Commands Transparently Within Perl"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.2.54 SelectSaver&nbsp;- Save and Restore Selected Filehandle</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.2.56 Shell&nbsp;- Run Shell Commands Transparently Within Perl</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
