<HTML
><HEAD
>
<TITLE>[Appendix A] A.5 Chapter 6, Basic I/O</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:36:50Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="appa_01.htm"
TITLE="A. Exercise Answers"><LINK
REL="prev"
HREF="appa_04.htm"
TITLE="A.4 Chapter 5, Hashes"><LINK
REL="next"
HREF="appa_06.htm"
TITLE="A.6 Chapter 7, Regular Expressions"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_04.htm"
TITLE="A.4 Chapter 5, Hashes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: A.4 Chapter 5, Hashes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="appendix"
REL="up"
HREF="appa_01.htm"
TITLE="A. Exercise Answers"
>Appendix A<BR>Exercise Answers</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_06.htm"
TITLE="A.6 Chapter 7, Regular Expressions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: A.6 Chapter 7, Regular Expressions"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="appa-19281"
>A.5 Chapter 6, Basic I/O</A
></H2
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-178868"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>print <A
CLASS="indexterm"
NAME="appa-idx-178717-0"
></A
>reverse &lt;&gt;;</PRE
><P
CLASS="para"
>You may be surprised at the brevity of this answer, but it will get the job done. Here's what is happening, from the inside out:</P
><OL
CLASS="orderedlist"
TYPE="a"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-178921"
></A
>First, the <CODE
CLASS="literal"
>reverse</CODE
> function is looking for a list for its arguments. This means that the diamond operator (<CODE
CLASS="literal"
>&lt;&gt;</CODE
>) is being evaluated in a list context. Thus, all of the lines of the files named by command-line arguments (or standard input, if none are named) are read in and massaged into a list with one line per element.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-178922"
></A
>Next, the <CODE
CLASS="literal"
>reverse</CODE
> function reverses the list end for end.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-178923"
></A
>Finally, the <CODE
CLASS="literal"
>print</CODE
> function takes the resulting list, and displays it.</P
></LI
></OL
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-178924"
></A
>Here's one way to do it:<PRE
CLASS="programlisting"
>@ARGV = reverse @ARGV;
print reverse &lt;&gt;;</PRE
>The first line just takes any filename arguments and reverses them. That way if the user called this script with command line arguments "camel llama alpaca", <CODE
CLASS="literal"
>@ARGV</CODE
> would then contain "alpaca llama camel" instead. The second line reads in all the lines in all the files in <CODE
CLASS="literal"
>@ARGV</CODE
>, flips them end on end, and prints them. If no arguments were passed to the program, then as before, <CODE
CLASS="literal"
>&lt;&gt;</CODE
> works on STDIN instead.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-181059"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>print &quot;List of strings:\n&quot;;
chomp(@strings = <A
CLASS="indexterm"
NAME="appa-idx-178719-0"
></A
>&lt;STDIN&gt;);
<A
CLASS="indexterm"
NAME="appa-idx-178718-0"
></A
>foreach (@strings) {
    printf &quot;%20s\n&quot;, $_;
}</PRE
><P
CLASS="para"
>The first line prompts for a list of strings.</P
><P
CLASS="para"
>The next line reads all of the strings into one array and gets rid of the newlines at the end of each line.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>foreach</CODE
> loop steps through this array, giving <CODE
CLASS="literal"
>$_</CODE
> the value of each line.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>printf</CODE
> function gets two arguments: the first argument defines the format: <CODE
CLASS="literal"
>&quot;%20s\n&quot;</CODE
> means a 20-character right-justified column, followed by a newline.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-179380"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>print &quot;Field width: &quot;;
chomp($width = &lt;STDIN&gt;);
print &quot;List of strings:\n&quot;;
chomp(@strings = &lt;STDIN&gt;);
foreach (@strings) {
    <A
CLASS="indexterm"
NAME="appa-idx-178720-0"
></A
>printf &quot;%${width}s\n&quot;, $_;
}</PRE
><P
CLASS="para"
>To the previous exercise answer, we've added a prompt and response for the field width.</P
><P
CLASS="para"
>The other change is that the <CODE
CLASS="literal"
>printf</CODE
> format string now contains a variable reference. The value of <CODE
CLASS="literal"
>$width</CODE
> is included into the string before <CODE
CLASS="literal"
>printf</CODE
> considers the format. Note that we cannot write this string as</P
><PRE
CLASS="programlisting"
>printf &quot;%$widths\n&quot;, $_; # WRONG</PRE
><P
CLASS="para"
>because then Perl would be looking for a variable named <CODE
CLASS="literal"
>$widths</CODE
>, not a variable named <CODE
CLASS="literal"
>$width</CODE
> to which we attach an <CODE
CLASS="literal"
>s</CODE
>. Another way to write this is</P
><PRE
CLASS="programlisting"
>printf &quot;%$width&quot;.&quot;s\n&quot;, $_; # RIGHT</PRE
><P
CLASS="para"
>because the termination of the string also terminates the variable name, protecting the following character from being sucked up into the name.</P
></LI
></OL
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_04.htm"
TITLE="A.4 Chapter 5, Hashes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: A.4 Chapter 5, Hashes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_06.htm"
TITLE="A.6 Chapter 7, Regular Expressions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: A.6 Chapter 7, Regular Expressions"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>A.4 Chapter 5, Hashes</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>A.6 Chapter 7, Regular Expressions</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
