<HTML
><HEAD
>
<TITLE>[Chapter 1] 1.3 A Grade Example</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:29:12Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. An Overview of Perl"><LINK
REL="prev"
HREF="ch01_02.htm"
TITLE="1.2 Natural and Artificial Languages"><LINK
REL="next"
HREF="ch01_04.htm"
TITLE="1.4 Filehandles"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch01_02.htm"
TITLE="1.2 Natural and Artificial Languages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.2 Natural and Artificial Languages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. An Overview of Perl"
>Chapter 1<BR>An Overview of Perl</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch01_04.htm"
TITLE="1.4 Filehandles"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.4 Filehandles"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="PERL2-CH-1-SECT-3"
>1.3 A Grade Example</A
></H2
><P
CLASS="para"
>Suppose you had a set of scores for each member of a class you are
teaching.  You'd like a combined list of all the grades for each
student, plus their average score.  You have a text file (imaginatively
named <EM
CLASS="emphasis"
>grades</EM
>) that looks like this:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>No&euml;l 25
Ben 76
Clementine 49
Norm 66
Chris 92
Doug 42
Carol 25
Ben 12
Clementine 0
Norm 66
...</PRE
></P
><P
CLASS="para"
>You can use the following script to gather all their scores together,
determine each student's average, and print them all out in alphabetical
order.  This program assumes, rather naively, that you don't have two
Carols in your class.  That is, if there is a second entry for Carol, the
program will assume it's just another score for the first Carol (not
to be confused with the first No&euml;l).</P
><P
CLASS="para"
>By the way, the line numbers are not part of the program, any other
resemblances to BASIC notwithstanding.</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
> 1  #!/usr/bin/perl
 2  
 3  open(GRADES, &quot;grades&quot;) or die &quot;Can't open grades: $!\n&quot;;
 4  while ($line = &lt;GRADES&gt;) {
 5      ($student, $grade) = split(&quot; &quot;, $line);
 6      $grades{$student} .= $grade . &quot; &quot;;
 7  }
 8 
 9  foreach $student (sort keys %grades) {
10      $scores = 0;
11      $total = 0;    
12      @grades = split(&quot; &quot;, $grades{$student});
13      foreach $grade (@grades) {
14          $total += $grade;
15          $scores++;
16      }
17      $average = $total / $scores;
18      print &quot;$student: $grades{$student}\tAverage: $average\n&quot;;
19  }</PRE
></P
><P
CLASS="para"
>Now before your eyes cross permanently, we'd better point out that this
example demonstrates a lot of what we've covered so far, plus quite a
bit more that we'll explain presently.  But if you let your eyes go just a
little out of focus, you may start to see some interesting patterns.
Take some wild guesses now as to what's going on, and then later on we'll
tell you if you're right.</P
><P
CLASS="para"
>We'd tell you to try running it, but you may not know how yet.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-1-SECT-3.1"
>1.3.1 How to Do It</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH01.HOW"
></A
><A
CLASS="indexterm"
NAME="AUTOID-672"
></A
>Gee, right about now you're probably wondering how to run a Perl
program.  The short answer is that you feed it to the Perl language
interpreter program, which coincidentally happens to be named <EM
CLASS="emphasis"
>perl</EM
>
(note the case distinction).  The longer answer starts out like this:
There's More Than One Way To Do It.[<A
CLASS="footnote"
HREF="#AUTOID-675"
>13</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-675"
>[13]</A
> That's the Perl Slogan, and you'll get tired of hearing it, unless
you're the Local Expert, in which case you'll get tired of saying it.
Sometimes it's shortened to TMTOWTDI, pronounced &quot;tim-toady&quot;.  But
you can pronounce it however you like.  After all, TMTOWTDI.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-678"
></A
>The first way to invoke <EM
CLASS="emphasis"
>perl</EM
> (and the way most likely to work on any
operating system) is to simply call <EM
CLASS="emphasis"
>perl</EM
> explicitly from the command
line.  If you are on a version of UNIX and you are doing something
fairly simple, you can use the <B
CLASS="emphasis.bold"
>-e</B
> switch (<CODE
CLASS="literal"
>%</CODE
> in the
following example represents a standard
shell prompt, so don't type it):</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>% perl -e 'print &quot;Hello, world!\n&quot;;'</PRE
></P
><P
CLASS="para"
>On other operating systems, you may have to fiddle with the quotes some.
But the basic principle is the same: you're trying to cram everything
Perl needs to know into 80 columns or so.[<A
CLASS="footnote"
HREF="#AUTOID-688"
>14</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-688"
>[14]</A
> <A
CLASS="indexterm"
NAME="AUTOID-690"
></A
>These types of scripts are often referred to as &quot;one-liners&quot;.  If you
ever end up hanging out with other Perl programmers, you'll find that
some of us are quite fond of creating intricate one-liners.  Perl
has occasionally been maligned as a write-only language because of
these shenanigans.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>For longer scripts, you can use your favorite text editor (or any other
text editor) to put all your commands into a file and then, presuming
you named the script <EM
CLASS="emphasis"
>gradation</EM
> (not to be confused with graduation),
you'd say:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>% perl gradation</PRE
></P
><P
CLASS="para"
>You're still invoking the Perl interpreter explicitly, but at least you
don't have to put everything on the command line every time.  And you
don't have to fiddle with quotes to keep the shell happy.</P
><P
CLASS="para"
>The most convenient way to invoke a script is just to name it
directly (or click on it), and let the operating system find the
interpreter for you.  On some systems, there may be ways of associating
various file extensions or directories with a particular application.
On those systems, you should do whatever it is you do to associate the
Perl script with the Perl interpreter.  On UNIX systems that support the<A
CLASS="indexterm"
NAME="AUTOID-698"
></A
>
<CODE
CLASS="literal"
>#!</CODE
> &quot;shebang&quot; notation (and most UNIX systems do, nowadays), you can
make the first line of your script be magical, so the operating system
will know which program to run.  Put a line resembling[<A
CLASS="footnote"
HREF="#AUTOID-702"
>15</A
>]
line 1 of our example into your program:</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-702"
>[15]</A
> If <EM
CLASS="emphasis"
>perl</EM
> isn't in <EM
CLASS="emphasis"
>/usr/bin</EM
>, you'll have to change the
<CODE
CLASS="literal"
>#!</CODE
> line accordingly.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
><PRE
CLASS="programlisting"
>#!/usr/bin/perl</PRE
></P
><P
CLASS="para"
>Then all you have to say is</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>% gradation</PRE
></P
><P
CLASS="para"
>Of course, this didn't work because you forgot to make sure the script
was executable (see the manpage for <EM
CLASS="emphasis"
>chmod</EM
>(1))[<A
CLASS="footnote"
HREF="#AUTOID-714"
>16</A
>]
and in your PATH.  If it isn't in your PATH, 
you'll have to provide a
complete filename so that the operating system knows how to find your script.
Something like</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-714"
>[16]</A
> Although Perl has its share of funny notations, this one must be blamed
on UNIX.  <EM
CLASS="emphasis"
>chmod</EM
>(1) means you should refer to the manpage for the
<EM
CLASS="emphasis"
>chmod</EM
> command in section one of your UNIX manual.  If you type either
<CODE
CLASS="literal"
>man 1 chmod</CODE
> or <CODE
CLASS="literal"
>man -s 1 chmod</CODE
> (depending on your flavor of UNIX),
you should be able to find out all the interesting information your
system knows about the command <EM
CLASS="emphasis"
>chmod</EM
>.  (Of course, if your flavor of
UNIX happens to be &quot;Not UNIX!&quot; then you'll need to refer to your system's
documentation for the equivalent command, presuming you are so blessed.
Your chief consolation is that, if an equivalent command does exist, it
will have a much better name than <EM
CLASS="emphasis"
>chmod</EM
>.)</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
><PRE
CLASS="programlisting"
>% ../bin/gradation</PRE
></P
><P
CLASS="para"
>Finally, if you are unfortunate enough to be on an ancient UNIX system
that doesn't support the magic <CODE
CLASS="literal"
>#!</CODE
> line, or if the path to your interpreter
is longer than 32 characters (a built-in limit on many systems), you may be
able to work around it like this:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>#!/bin/sh -- # perl, to stop looping
eval 'exec /usr/bin/perl -S $0 ${1+&quot;$@&quot;}'
    if 0;</PRE
></P
><P
CLASS="para"
>Some operating systems may require variants on this to deal with
<EM
CLASS="emphasis"
>/bin/csh</EM
>, <EM
CLASS="emphasis"
>DCL</EM
>, <EM
CLASS="emphasis"
>COMMAND.COM</EM
>, or whatever happens to be your
default command interpreter.  Ask your Local Expert.</P
><P
CLASS="para"
>Throughout this book, we'll just use <CODE
CLASS="literal"
>#!/usr/bin/perl</CODE
> to represent all
these notions and notations, but you'll know what we really mean by it.</P
><P
CLASS="para"
>A random clue: when you write a test script, don't call your script
<EM
CLASS="emphasis"
>test</EM
>.  UNIX systems have a built-in test command, which will likely be
executed instead of your script.  Try <EM
CLASS="emphasis"
>try</EM
> instead.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-738"
></A
>A not-so-random clue: while learning Perl, and even after you
think you know what you're doing, we suggest using the <B
CLASS="emphasis.bold"
>-w</B
> option,
especially during development.  This option will turn on all sorts of
useful and interesting warning messages, not necessarily in that order.
You can put the <B
CLASS="emphasis.bold"
>-w</B
> switch on the shebang line, like this:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w</PRE
></P
><P
CLASS="para"
>Now that you know how to run your own Perl program (not to be confused with
the <EM
CLASS="emphasis"
>perl</EM
> program), let's get back to our example.</P
><A
CLASS="indexterm"
NAME="AUTOID-747"
></A
><A
CLASS="indexterm"
NAME="AUTOID-748"
></A
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch01_02.htm"
TITLE="1.2 Natural and Artificial Languages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.2 Natural and Artificial Languages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch01_04.htm"
TITLE="1.4 Filehandles"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.4 Filehandles"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.2 Natural and Artificial Languages</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.4 Filehandles</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
