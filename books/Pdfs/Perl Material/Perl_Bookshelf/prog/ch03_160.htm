<HTML
><HEAD
>
<TITLE>[Chapter 3] 3.2.160 study</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:54:39Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_02.htm"
TITLE="3.2 Perl Functions in Alphabetical Order"><LINK
REL="prev"
HREF="ch03_159.htm"
TITLE="3.2.159 stat"><LINK
REL="next"
HREF="ch03_161.htm"
TITLE="3.2.161 sub"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_159.htm"
TITLE="3.2.159 stat"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.159 stat"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. Functions"
>Chapter 3<BR>Functions</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_161.htm"
TITLE="3.2.161 sub"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.161 sub"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CMD-STUDY"
>3.2.160 study</A
></H3
><PRE
CLASS="programlisting"
>study <CODE
CLASS="replaceable"
><I
>SCALAR</I
></CODE
>
study</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-13477"
></A
><A
CLASS="indexterm"
NAME="AUTOID-13479"
></A
><A
CLASS="indexterm"
NAME="AUTOID-13482"
></A
>This function takes extra time to study <CODE
CLASS="replaceable"
><I
>SCALAR</I
></CODE
>
(<B
CLASS="emphasis.bold"
>$_</B
> if
unspecified) in anticipation of doing many pattern matches on the
string before it is next modified.  This may or may not save time,
depending on the nature and number of patterns you are searching on,
and on the distribution of character frequencies in the string to be
searched&nbsp;- you probably want to compare run-times with and without it to
see which runs faster.  Those loops that scan for many short constant
strings (including the constant parts of more complex patterns) will
benefit most.  If all your pattern matches are constant strings,
anchored at the front, <A
CLASS="xref"
HREF="ch03_160.htm"
TITLE="study"
><B
CLASS="xref.cmd"
>study</B
></A
> won't help at all, because no
scanning is done.  You may have only one <A
CLASS="xref"
HREF="ch03_160.htm"
TITLE="study"
><B
CLASS="xref.cmd"
>study</B
></A
> active at a time&nbsp;- if
you study a different scalar the first is &quot;unstudied&quot;.</P
><P
CLASS="para"
>The way <A
CLASS="xref"
HREF="ch03_160.htm"
TITLE="study"
><B
CLASS="xref.cmd"
>study</B
></A
>
works is this: a linked list of every character in the string to be
searched is made, so we know, for example, where all the &quot;<CODE
CLASS="literal"
>k</CODE
>&quot;
characters are.  From each search string, the rarest character is
selected, based on some static frequency tables constructed from some
C programs and English text.  Only those places that contain this rarest character are examined.</P
><P
CLASS="para"
>For example, here is a loop that inserts index-producing entries
before any line containing a certain pattern:</P
><PRE
CLASS="programlisting"
>while (&lt;&gt;) {
    study;
    print &quot;.IX foo\n&quot; if /\bfoo\b/;
    print &quot;.IX bar\n&quot; if /\bbar\b/;
    print &quot;.IX blurfl\n&quot; if /\bblurfl\b/;
    ...
    print;
}</PRE
><P
CLASS="para"
>In searching for <CODE
CLASS="literal"
>/\bfoo\b/</CODE
>, only those locations in <B
CLASS="emphasis.bold"
>$_</B
> that contain &quot;<CODE
CLASS="literal"
>f</CODE
>&quot; will be looked at,
because &quot;<CODE
CLASS="literal"
>f</CODE
>&quot; is rarer than &quot;<CODE
CLASS="literal"
>o</CODE
>&quot;.  In
general, this is a big win except in pathological cases.  The only question is
whether it saves you more time than it took to build the linked list in the
first place.</P
><P
CLASS="para"
>If you have to look for strings that you don't know until run-time, you can
build an entire loop as a string and <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
>
that to avoid recompiling all your patterns all the time.  Together with setting
<B
CLASS="emphasis.bold"
>$/</B
> to input entire files as one record, this can
be very fast, often faster than specialized programs like
<EM
CLASS="emphasis"
>fgrep</EM
>.  The following scans a list of files
(<CODE
CLASS="literal"
>@files</CODE
>) for a list of words (<CODE
CLASS="literal"
>@words</CODE
>), and
prints out the names of those files that contain a match:</P
><PRE
CLASS="programlisting"
>$search = 'while (&lt;&gt;) { study;';
foreach $word (@words) {
    $search .= &quot;++\$seen{\$ARGV} if /\\b$word\\b/;\n&quot;;
}
$search .= &quot;}&quot;;
@ARGV = @files;
undef $/;               # slurp each entire file
eval $search;           # this screams
die $@ if $@;           # in case eval failed
$/ = &quot;\n&quot;;              # put back to normal input delim
foreach $file (sort keys(%seen)) {
    print $file, &quot;\n&quot;;
}</PRE
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_159.htm"
TITLE="3.2.159 stat"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.159 stat"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_161.htm"
TITLE="3.2.161 sub"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.161 sub"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.2.159 stat</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.2.161 sub</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
