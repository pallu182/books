<HTML
><HEAD
>
<TITLE>[Chapter 16] 16.2 Packing and Unpacking Binary Data</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:35:37Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch16_01.htm"
TITLE="16. System Database Access"><LINK
REL="prev"
HREF="ch16_01.htm"
TITLE="16.1 Getting Password and Group Information"><LINK
REL="next"
HREF="ch16_03.htm"
TITLE="16.3 Getting Network Information"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_01.htm"
TITLE="16.1 Getting Password and Group Information"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.1 Getting Password and Group Information"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch16_01.htm"
TITLE="16. System Database Access"
>Chapter 16<BR>System Database Access</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_03.htm"
TITLE="16.3 Getting Network Information"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.3 Getting Network Information"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch16-18091"
>16.2 Packing and Unpacking Binary Data</A
></H2
><P
CLASS="para"
>The password and group information is nicely represented in textual form. Other system databases are more naturally represented in other forms. For example, the IP address of an interface is internally managed as a four-byte number. While it is frequently decoded into a textual representation consisting of four small integers separated by periods, this encoding and decoding is wasted effort if a human is not interpreting the data in the meantime.</P
><P
CLASS="para"
>Because of this, the network routines in Perl that expect or return an IP address use a four-byte string that contains one character for each sequential byte in memory. While constructing and interpreting such a byte string is fairly straightforward using <A
CLASS="indexterm"
NAME="ch16-idx-376-0"
></A
><CODE
CLASS="literal"
>chr</CODE
> and <A
CLASS="indexterm"
NAME="ch16-idx-647672-0"
></A
><CODE
CLASS="literal"
>ord</CODE
> (not presented here), Perl provides a short cut that is equally applicable to more difficult structures.</P
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch16-idx-647674-0"
></A
><CODE
CLASS="literal"
>pack</CODE
> function works a bit like <A
CLASS="indexterm"
NAME="ch16-idx-647675-0"
></A
><CODE
CLASS="literal"
>sprintf</CODE
>, taking a format control string and a list of values, and creating a single string from those values. The <CODE
CLASS="literal"
>pack</CODE
> format string is geared towards creating a binary data structure, however. For example, here's how to take four small integers and pack them as successive unsigned bytes in a composite string:</P
><PRE
CLASS="programlisting"
>$buf = pack(&quot;CCCC&quot;, 140, 186, 65, 25);</PRE
><P
CLASS="para"
>Here, the <A
CLASS="indexterm"
NAME="ch16-idx-647677-0"
></A
><CODE
CLASS="literal"
>pack</CODE
> format string is four <CODE
CLASS="literal"
>C</CODE
>'s. Each <CODE
CLASS="literal"
>C</CODE
> represents a separate value taken from the following list (similar to what a <CODE
CLASS="literal"
>%</CODE
> field does in <CODE
CLASS="literal"
>sprintf</CODE
>). The <CODE
CLASS="literal"
>C</CODE
> format (according to the Perl manpages, the reference card, <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>, the HTML files, or even <A
CLASS="indexterm"
NAME="ch16-idx-647676-0"
></A
><EM
CLASS="emphasis"
>Perl: The Motion Picture</EM
>) refers to a single byte computed from an unsigned character value (a small integer). The resulting string in <CODE
CLASS="literal"
>$buf</CODE
> is a four-character string&nbsp;- each character being one byte from the four values <CODE
CLASS="literal"
>140</CODE
>, <CODE
CLASS="literal"
>186</CODE
>, <CODE
CLASS="literal"
>65</CODE
>, and <CODE
CLASS="literal"
>25</CODE
>.</P
><P
CLASS="para"
>Similarly, the format <CODE
CLASS="literal"
>l</CODE
> generates a signed long value. On many machines, this is a four-byte number, although this format is machine-dependent. On a four-byte "long" machine, the statement</P
><PRE
CLASS="programlisting"
>$buf = pack(&quot;l&quot;,0x41424344);</PRE
><P
CLASS="para"
>generates a four-character string that looks like either <CODE
CLASS="literal"
>ABCD</CODE
> or <CODE
CLASS="literal"
>DCBA</CODE
>, depending on whether the machine is <A
CLASS="indexterm"
NAME="ch16-idx-647678-0"
></A
>little-endian or <A
CLASS="indexterm"
NAME="ch16-idx-647679-0"
></A
>big-endian (or something entirely different if the machine doesn't speak ASCII). This happens because we are packing one value into four characters (the length of a long integer), and the one value just happens to be composed of the bytes representing the ASCII values for the first four letters of the alphabet. Similarly,</P
><PRE
CLASS="programlisting"
>$buf = pack(&quot;ll&quot;, 0x41424344, 0x45464748);</PRE
><P
CLASS="para"
>creates an eight-byte string consisting of <CODE
CLASS="literal"
>ABCDEFGH</CODE
> or <CODE
CLASS="literal"
>DCBAHGFE</CODE
>, once again depending on whether the machine is little- or big-endian.</P
><P
CLASS="para"
>The exact list of the various <CODE
CLASS="literal"
>pack</CODE
> formats is given in the reference documentation (<EM
CLASS="emphasis"
>perlfunc </EM
>(1), or <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>). You'll see a few here as examples, but we're not going to list them all.</P
><P
CLASS="para"
>What if you were given the eight-byte string <CODE
CLASS="literal"
>ABCDEFGH</CODE
> and were told that it was really the memory image (one character is one byte) of two long (four-byte) signed values? How would you interpret it? Well, you'd need to do the inverse of <CODE
CLASS="literal"
>pack</CODE
>, called <A
CLASS="indexterm"
NAME="ch16-idx-649367-0"
></A
><CODE
CLASS="literal"
>unpack</CODE
>. This function takes a format control string (usually identical to the one you'd give <CODE
CLASS="literal"
>pack</CODE
>) and a data string, and returns a list of values that make up the memory image defined in the data string. For example, let's take that string apart:</P
><PRE
CLASS="programlisting"
>($val1,$val2) = unpack(&quot;ll&quot;,&quot;ABCDEFGH&quot;);</PRE
><P
CLASS="para"
>This gives us back something like <CODE
CLASS="literal"
>0x41424344</CODE
> for <CODE
CLASS="literal"
>$val1</CODE
>, or possibly <CODE
CLASS="literal"
>0x44434241</CODE
> instead (depending on big-endian-ness). In fact, by the values that come back, we can determine if we are on a little- or big-endian machine.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch16-idx-647682-0"
></A
>Whitespace in the format control string is ignored, and can be used for readability. A number in the format control string generally repeats the previous specification that many times. For example, <CODE
CLASS="literal"
>CCCC</CODE
> can also be written <CODE
CLASS="literal"
>C4</CODE
> or <CODE
CLASS="literal"
>C2C2</CODE
> with no change in meaning. (A few of the specifications use a trailing number as a part of the specification, and thus cannot be multiplied like that.)</P
><P
CLASS="para"
>A format character can also be followed by a <A
CLASS="indexterm"
NAME="ch16-idx-647683-0"
></A
><CODE
CLASS="literal"
>*</CODE
>, which repeats the format character enough times to swallow up the rest of the list or the rest of the binary image string (depending on whether you are packing or unpacking). So, here's another way to pack four unsigned characters into a string:</P
><PRE
CLASS="programlisting"
>$buf = pack(&quot;C*&quot;, 140, 186, 65, 25);</PRE
><P
CLASS="para"
>The four values here are swallowed up by the one format specification. If you had wanted two short integers followed by "as many unsigned chars as possible," you can say something like this:</P
><PRE
CLASS="programlisting"
>$buf = pack(&quot;s2 C*&quot;, 3141, 5926, 5, 3, 5, 8, 9, 7, 9, 3, 2)<A
CLASS="indexterm"
NAME="ch16-idx-647695-0"
></A
>;</PRE
><P
CLASS="para"
>Here, we take the first two values as shorts (generating four or eight characters, probably) and the remaining nine values as unsigned characters (generating nine characters, almost certainly).</P
><P
CLASS="para"
>Going in the other direction, <CODE
CLASS="literal"
>unpack</CODE
> with an asterisk specification can generate a list of elements of unpredetermined length. For example, unpacking with <CODE
CLASS="literal"
>C*</CODE
> creates one list element (a number) for each string character. So, the statement</P
><PRE
CLASS="programlisting"
>@values = unpack(&quot;C*&quot;, &quot;hello, world!\n&quot;);</PRE
><P
CLASS="para"
>yields a list of 14 elements, one for each of the characters of the string.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_01.htm"
TITLE="16.1 Getting Password and Group Information"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 16.1 Getting Password and Group Information"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_03.htm"
TITLE="16.3 Getting Network Information"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.3 Getting Network Information"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>16.1 Getting Password and Group Information</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>16.3 Getting Network Information</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
