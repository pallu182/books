<HTML
><HEAD
>
<TITLE>[Chapter 18] 18.5 Creating a Guestbook Program</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl on Win32 Systems"><META
NAME="DC.creator"
CONTENT="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:36:54Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-324-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch18_01.htm"
TITLE="18. CGI Programming"><LINK
REL="prev"
HREF="ch18_04.htm"
TITLE="18.4 Passing Parameters via CGI"><LINK
REL="next"
HREF="ch18_06.htm"
TITLE="18.6 Troubleshooting CGI Programs"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl on Win32 Systems"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl on Win32 Systems"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/wsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_04.htm"
TITLE="18.4 Passing Parameters via CGI"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.4 Passing Parameters via CGI"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch18_01.htm"
TITLE="18. CGI Programming"
>Chapter 18<BR><A
CLASS="indexterm"
NAME="ch18-idx-87413-0"
></A
>CGI Programming</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_06.htm"
TITLE="18.6 Troubleshooting CGI Programs"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.6 Troubleshooting CGI Programs"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch18-21995"
>18.5 Creating a Guestbook Program</A
></H2
><P
CLASS="para"
>If you have followed the examples above, you can now get some simple CGI programs going. But what about harder ones? A common request is to create a CGI program to manage a guestbook, so that visitors to your web site can record their own messages.[<A
CLASS="footnote"
HREF="#ch18-pgfId-87605"
>9</A
>] </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch18-pgfId-87605"
>[9]</A
> As we will note later on, this application might also be called a <EM
CLASS="emphasis"
>webchat</EM
> program. </P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Actually, the form for this kind of thing is quite easy&nbsp;- easier in fact than some of our ice cream forms. Other matters get trickier. But don't worry, we'll explain everything as we go. </P
><P
CLASS="para"
>You probably want guestbook messages to survive a user's visit to your site, so you need a file to store them in. The CGI program (probably) runs under a different user, not as you; therefore, it won't normally have permission to update a file of yours. So, first, create a file (make sure it has read-write permissions for whatever user your program runs as). You can either use a text editor to create an empty file, or do something like: </P
><PRE
CLASS="programlisting"
><B
CLASS="emphasis.bold"
>&gt; echo. &gt; c:\temp\chatfile</B
></PRE
><P
CLASS="para"
>Okay, but how will you accommodate several folks using the guestbook program simultaneously? The operating system doesn't block simultaneous access to files, so if you're not careful, you could get a jumbled file as everyone writes to it at the same time. To avoid this, we'll use Perl's <CODE
CLASS="literal"
>flock</CODE
> function to request exclusive access to the file we're going to update. It will look something like this: </P
><PRE
CLASS="programlisting"
># Perl 5.004
use Fcntl qw(:flock); # imports LOCK_EX, LOCK_SH, LOCK_NB
....
flock(CHANDLE, LOCK_EX) || bail(&quot;cannot flock $CHATNAME: $!&quot;);

# ActiveState distribution
$LOCK_EX = 2; # hard coded value of standard LOCK_EX
....
<CODE
CLASS="literal"
>flock(CHANDLE, $LOCK_EX) || bail(&quot;cannot flock $CHATNAME: $!&quot;);</CODE
></PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>LOCK_EX</CODE
> argument to <CODE
CLASS="literal"
>flock</CODE
> is what buys us exclusive file access.[<A
CLASS="footnote"
HREF="#ch18-pgfId-86864"
>10</A
>] <KBD
CLASS="command"
>bail</KBD
> is a subroutine that prints an error message back to the browser and then calls die.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch18-pgfId-86864"
>[10]</A
> With Perl versions prior to the 5.004 release, you must comment out the <CODE
CLASS="literal"
>use Fcntl</CODE
> and just use <CODE
CLASS="literal"
>2</CODE
> as the argument to <EM
CLASS="emphasis"
>flock</EM
>. </P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
><CODE
CLASS="literal"
>flock</CODE
> presents a simple but uniform locking mechanism even though its underlying implementation varies wildly between systems. It reliably blocks, not returning until it gets the lock. Note that file locks are purely advisory; they only work when all processes accessing a file honor the locks in the same way. If three processes honor them, but another doesn't, all bets are off. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-86867"
>18.5.1 Object-Oriented Programming in Perl</A
></H3
><P
CLASS="para"
>Finally, and most importantly, you must learn how to use objects and classes. Although building your own object module is beyond the scope of this book, you don't have to know about that in order to use existing, object-oriented library modules. For in-depth information about using and creating object modules, see <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>Chapter 5</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and the <EM
CLASS="emphasis"
>perltoot</EM
> documentation (Perl 5.004 distribution and beyond). </P
><P
CLASS="para"
>We won't go into the theory behind objects here, but you can just treat them as packages (which they are!) of wonderful and marvelous things that you invoke indirectly. Objects provide subroutines that do anything you need to do with the object. </P
><P
CLASS="para"
>For instance, suppose the <EM
CLASS="emphasis"
>CGI.pm</EM
> module returns an object called <CODE
CLASS="literal"
>$query</CODE
> that represents the user's input. If you want to get a parameter from the query, invoke the <CODE
CLASS="literal"
>param()</CODE
> subroutine like this: </P
><PRE
CLASS="programlisting"
>$query-&gt;param(&quot;answer&quot;);</PRE
><P
CLASS="para"
>This says, "Run the <CODE
CLASS="literal"
>param()</CODE
> subroutine on the <CODE
CLASS="literal"
>$query</CODE
> object, with <CODE
CLASS="literal"
>answer</CODE
> as an argument." It's just like invoking any other subroutine, except that you employ the name of the object followed by the <CODE
CLASS="literal"
>-&gt;</CODE
> syntax. Subroutines associated with objects, by the way, are called <EM
CLASS="emphasis"
>methods</EM
>. </P
><P
CLASS="para"
>If you want to retrieve the return value of the <CODE
CLASS="literal"
>param()</CODE
> subroutine, just use the usual assignment statement and store the value in a regular old variable named <CODE
CLASS="literal"
>$he_said</CODE
>: </P
><PRE
CLASS="programlisting"
>$he_said = $query-&gt;param(&quot;answer&quot;);</PRE
><P
CLASS="para"
>Objects look like scalars; you store them in scalar variables (like <CODE
CLASS="literal"
>$query</CODE
> in our example), and you can make arrays or hashes of objects. But you don't treat them as you would strings or numbers. They're actually a particular kind of reference,[<A
CLASS="footnote"
HREF="#ch18-pgfId-87654"
>11</A
>] but you don't even treat them as you would ordinary references. Instead, you treat them like a special, user-defined type of data. </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch18-pgfId-87654"
>[11]</A
> A blessed reference, to be precise. </P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>The type of a particular object is known as its <EM
CLASS="emphasis"
>class</EM
>. The class name is normally just the module name&nbsp;- without the <EM
CLASS="emphasis"
>.pm</EM
> suffix&nbsp;- and often the words <EM
CLASS="emphasis"
>class</EM
> and <EM
CLASS="emphasis"
>module</EM
> are used interchangeably. So we can speak of the CGI module and also the CGI class. Objects of a particular class are created and managed by the module implementing that class. </P
><P
CLASS="para"
>You access classes by loading in a module, which looks just like any other module except that object-oriented ones don't usually export anything. You can think of the class as a factory that cranks out brand-new objects. To get the class to produce one of these new objects, you invoke special methods called <EM
CLASS="emphasis"
>constructors</EM
>. Here's an example: </P
><PRE
CLASS="programlisting"
>$query = CGI-&gt;new(); # call method new() in class &quot;CGI&quot;</PRE
><P
CLASS="para"
>What you have there is the invocation of a <EM
CLASS="emphasis"
>class method</EM
>. A class method looks just like an <CODE
CLASS="literal"
>object</CODE
> <CODE
CLASS="literal"
>method</CODE
> (which is what we were talking about a moment ago), except that instead of using an object to call the method, you use the name of the class as though it were itself an object. An object method is saying "call the function by this name that is related to this object"; a class method is saying "call the function by this name that is related to this class." </P
><P
CLASS="para"
>Sometimes you'll see that same thing written this way: </P
><PRE
CLASS="programlisting"
>$query = new CGI; # same thing</PRE
><P
CLASS="para"
>The second form is identical in behavior to the first. It's got less punctuation, so is sometimes preferred. But it's less convenient to use as part of a larger expression, so we'll use the first form exclusively in this book. </P
><P
CLASS="para"
>From the standpoint of the designer of object modules, an object is a reference to a user-defined data structure, often an anonymous hash. Inside this structure is stored all manner of interesting information. But the well-behaved user of an object is expected to get at this information (to inspect or change it), not by treating the object as a reference and going straight for the data it points to, but by employing only the available object and class methods. Changing the object's data by other means amounts to hanky-panky that is bound to get you talked about. To learn what those methods are and how they work, just read the object module's documentation, usually included as embedded pods. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-86888"
>18.5.2 Objects in CGI.pm</A
></H3
><P
CLASS="para"
>The CGI module is unusual in that it can be treated either as a traditional module with exported functions or as an object module. Some kinds of programs are more easily written using the object interface to <EM
CLASS="emphasis"
>CGI.pm</EM
> rather than the procedural one. A guestbook program is one of these. We access the input that the user supplied to the form via a CGI object, and we can, if we want, use this same object to generate new HTML code for sending back to the user. </P
><P
CLASS="para"
>First, however, we need to create the object explicitly. <EM
CLASS="emphasis"
>For CGI.pm</EM
>, as for so many other classes, the method that generates objects is the class method named <CODE
CLASS="literal"
>new()</CODE
>.[<A
CLASS="footnote"
HREF="#ch18-pgfId-87676"
>12</A
>] </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch18-pgfId-87676"
>[12]</A
> Unlike C++, Perl doesn't consider <CODE
CLASS="literal"
>new</CODE
> a keyword; you're perfectly free to have constructor methods called <CODE
CLASS="literal"
>gimme_another()</CODE
> or <CODE
CLASS="literal"
>fred()</CODE
>. But most classes end up naming their constructors <CODE
CLASS="literal"
>new()</CODE
> anyway.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>This method constructs and returns a new CGI object corresponding to a filled-out form. The object contains all the user's form input. Without arguments, <CODE
CLASS="literal"
>new()</CODE
> builds the object by reading the data passed by the remote browser. With a filehandle as an argument, it reads the handle instead, expecting to find form input saved from previous communication with a browser. </P
><P
CLASS="para"
>We'll show you the program and explain its details in a moment. Let's assume that the program is named <EM
CLASS="emphasis"
>guestbook.plx</EM
> and is in the <EM
CLASS="emphasis"
>cgi-bin</EM
> directory. While this program does not look like one of the two-part scripts shown earlier (where one part outputs an HTML form, and the other part reads and responds to form input from a user), you will see that it nevertheless does handle both functions. So you do not need a separate HTML document containing a guestbook form. The user might first trigger our program simply by clicking on a link like this: </P
><PRE
CLASS="programlisting"
>Please sign our
<CODE
CLASS="literal"
>&lt;A HREF=&quot;http://www.SOMEWHERE.com/cgi-bin/guestbook.plx&quot;&gt;guestbook&lt;/A&gt;.</CODE
></PRE
><P
CLASS="para"
>The program then downloads an HTML form to the browser, and for good measure also downloads any previous guest messages (up to a stated limit) for the user to review. The user then fills out the form, submits it, and the program reads what is submitted. This information is added to the list of previous messages (saved in a file), which is then output to the browser again, along with a fresh form. The user can continue reading the current set of messages and submitting new messages via the supplied forms as long as he wishes. </P
><P
CLASS="para"
>Here's the program. You might want to scan it quickly before we step you through it. </P
><PRE
CLASS="programlisting"
>use strict; # enforce declarations and quoting
use CGI qw(:standard); # import shortcuts

sub bail { # function to handle errors gracefully
    my $error = &quot;@_&quot;;
    print h1(&quot;Unexpected Error&quot;), p($error), end_html;
    die $error;
}

my(
   $CHATNAME,   # name of guestbook file
    $MAXSAVE,   # how many to keep
    $TITLE,     # page title and header
    $cur,       # new entry in the guestbook
    @entries,   # all cur entries
    $entry,     # one particular entry
    $LOCK_EX,   # hardcoded value for flock
);

$LOCK_EX = 2;   # hardcoded value for flock

$TITLE = &quot;Simple Guestbook&quot;;
$CHATNAME = &quot;c:/temp/chatfile&quot;; # wherever makes sense on your system
$MAXSAVE = 10;
print header, start_html($TITLE), h1($TITLE);
$cur = CGI-&gt;new(); # current request
if ($cur-&gt;param(&quot;message&quot;)) { # good, we got a message
    $cur-&gt;param(&quot;date&quot;, scalar localtime); # current time
    @entries = ($cur); # save message to array
}

# open the file for read-write (preserving old contents)
open(CHANDLE, &quot;+&lt; $CHATNAME&quot;) || 
    bail(&quot;cannot open $CHATNAME: $!&quot;);
# get exclusive lock on the guestbook 
# ($LOCK_EX == exclusive lock)
flock(CHANDLE, $LOCK_EX) || bail(&quot;cannot flock $CHATNAME: $!&quot;);

# grab up to $MAXSAVE old entries, newest first
while (!eof(CHANDLE) &amp;&amp; @entries &lt; $MAXSAVE) {
    # pass the filehandle by reference
    $entry = CGI-&gt;new(\*CHANDLE);
    push @entries, $entry;
}
seek(CHANDLE, 0, 0) || bail(&quot;cannot rewind $CHATNAME: $!&quot;);
foreach $entry (@entries) {
    $entry-&gt;save(\*CHANDLE); # pass the filehandle by reference
}
truncate(CHANDLE, tell(CHANDLE)) || 
    bail(&quot;cannot truncate $CHATNAME: $!&quot;);
close(CHANDLE) || bail(&quot;cannot close $CHATNAME: $!&quot;);

print hr, start_form; # hr() emits html horizontal rule: &lt;HR&gt;
print p(&quot;Name:&quot;, $cur-&gt;textfield(
    -NAME =&gt; &quot;name&quot;));
print p(&quot;Message:&quot;, $cur-&gt;textfield(
    -NAME =&gt; &quot;message&quot;,
    -OVERRIDE =&gt; 1, # clears previous message
    -SIZE =&gt; 50));
print p(submit(&quot;send&quot;), reset(&quot;clear&quot;));
print end_form, hr;
print h2(&quot;Prior Messages&quot;);
foreach $entry (@entries) {
    printf(&quot;%s [%s]: %s&quot;,
    $entry-&gt;param(&quot;date&quot;),
    $entry-&gt;param(&quot;name&quot;),
    $entry-&gt;param(&quot;message&quot;));
    print br();
}
<CODE
CLASS="literal"
>print end_html;</CODE
></PRE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch18_05.htm#ch18-38949"
TITLE="Sample screen dump"
>Figure 18.5</A
> shows a sample screen dump after running the program a few times. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch18-38949"
>Figure 18.5: Sample screen dump</A
></H4
><IMG
CLASS="graphic"
SRC="figs/lp_1805.gif"
ALT="Figure 18.5"><P
CLASS="para"
>Because every execution of the program results in the return of an HTML form to the particular browser that sought us out, the program begins by getting a start on the HTML code: </P
><PRE
CLASS="programlisting"
><CODE
CLASS="literal"
>print header, start_html($TITLE), h1($TITLE);</CODE
></PRE
><P
CLASS="para"
>The program then creates a new CGI object: </P
><PRE
CLASS="programlisting"
>$cur = CGI-&gt;new(); # current request
if ($cur-&gt;param(&quot;message&quot;)) { # good, we got a message
    # set to the current time
    $cur-&gt;param(&quot;date&quot;, scalar localtime);
    @entries = ($cur); # save message to array
<CODE
CLASS="literal"
>}</CODE
></PRE
><P
CLASS="para"
>If we are being called via submission of a form, then the <CODE
CLASS="literal"
>$cur</CODE
> object now contains information about the input text given to the form. The form we supply (as shown later) has two input fields: a <EM
CLASS="emphasis"
>name field</EM
> for the name of the user, and a <EM
CLASS="emphasis"
>message field</EM
> for the message. In addition, the code shown above puts a date stamp on the form data after it is received. Feeding the <CODE
CLASS="literal"
>param()</CODE
> method two arguments is a way to set the parameter named in the first argument to the value given in the second argument. </P
><P
CLASS="para"
>If we are not being called via submission of a form, but rather because the user has clicked on "Please sign our guestbook," then the query object we create here will be empty. The <CODE
CLASS="literal"
>if</CODE
> test will yield a false value, and no entry will be added to the <CODE
CLASS="literal"
>@entries</CODE
> array.</P
><P
CLASS="para"
>In either case, we proceed to check for any entries previously saved in our savefile. We will read those into the <CODE
CLASS="literal"
>@entries</CODE
> array. (Recall that we have just now made the current form input, if any, the first member of this array.) But, first, we have to open the savefile: </P
><PRE
CLASS="programlisting"
><CODE
CLASS="literal"
>open(CHANDLE, &quot;+&lt; $CHATNAME&quot;) || bail(&quot;cannot open $CHATNAME: $!&quot;);</CODE
></PRE
><P
CLASS="para"
>This opens the file in nondestructive read-write mode. Alternatively, we could have used <CODE
CLASS="literal"
>sysopen()</CODE
>.[<A
CLASS="footnote"
HREF="#ch18-pgfId-86980"
>13</A
>] This way a single call opens an old file (if it exists) without clobbering it, or else creates a new one (note the use of the permission bits again): </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch18-pgfId-86980"
>[13]</A
> For you C programmers, <CODE
CLASS="literal"
>sysopen()</CODE
> is implemented in terms of <CODE
CLASS="literal"
>open()</CODE
> rather than <CODE
CLASS="literal"
>fopen()</CODE
>.</P
></DIV
></BLOCKQUOTE
><PRE
CLASS="programlisting"
># need to import two &quot;constants&quot; from Fcntl module for sysopen
use Fcntl qw( O_RDWR O_CREAT );
sysopen(CHANDLE, $CHATNAME, O_RDWR|O_CREAT, 0666)
<CODE
CLASS="literal"
>     || bail &quot;can't open $CHATNAME: $!&quot;;</CODE
></PRE
><P
CLASS="para"
>Then we lock the file, as described earlier, and proceed to read up to a total of <CODE
CLASS="literal"
>$MAXSAVE</CODE
> entries into <CODE
CLASS="literal"
>@entries</CODE
>:</P
><PRE
CLASS="programlisting"
>flock(CHANDLE, $LOCK_EX) || bail(&quot;cannot flock $CHATNAME: $!&quot;);
while (!eof(CHANDLE) &amp;&amp; @entries &lt; $MAXSAVE) {
    # pass the filehandle by reference
    $entry = CGI-&gt;new(\*CHANDLE);
    push @entries, $entry;
<CODE
CLASS="literal"
>}</CODE
></PRE
><P
CLASS="para"
><CODE
CLASS="literal"
>eof</CODE
> is a Perl built-in function that tells whether we have hit the end-of-file. By repeatedly passing the <CODE
CLASS="literal"
>new()</CODE
> method a reference to the savefile's filehandle,[<A
CLASS="footnote"
HREF="#ch18-pgfId-86994"
>14</A
>] we retrieve the old entries&nbsp;- one entry per call. Then, we update the file so that it now includes the new entry we (may) have just received: </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch18-pgfId-86994"
>[14]</A
> Actually, this reference is a glob reference, not a filehandle reference, but it's close enough. </P
></DIV
></BLOCKQUOTE
><PRE
CLASS="programlisting"
>seek(CHANDLE, 0, 0) || bail(&quot;cannot rewind $CHATNAME: $!&quot;);
foreach $entry (@entries) {
    $entry-&gt;save(\*CHANDLE); # pass the filehandle by reference
}
truncate(CHANDLE, tell(CHANDLE)) || 
    bail(&quot;cannot truncate $CHATNAME: $!&quot;);
<CODE
CLASS="literal"
>close(CHANDLE) || bail(&quot;cannot close $CHATNAME: $!&quot;);</CODE
></PRE
><P
CLASS="para"
><CODE
CLASS="literal"
>seek</CODE
>, <CODE
CLASS="literal"
>truncate</CODE
>, and <CODE
CLASS="literal"
>tell</CODE
> are all built-in Perl functions whose descriptions you will find in any Perl reference work. Here <CODE
CLASS="literal"
>seek</CODE
> repositions the file pointer to the beginning of the file, <CODE
CLASS="literal"
>truncate</CODE
> truncates the indicated file to the specified length, and <CODE
CLASS="literal"
>tell</CODE
> returns the current offset of the file pointer from the beginning of the file. The effect of these lines is to save only the most recent <CODE
CLASS="literal"
>$MAXSAVE</CODE
> entries, beginning with the one just now received, in the savefile. </P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>save()</CODE
> method handles the actual writing of the entries. The method can be invoked here as <CODE
CLASS="literal"
>$entry-&gt;save</CODE
> because <CODE
CLASS="literal"
>$entry</CODE
> is a CGI object, created with <CODE
CLASS="literal"
>CGI-&gt;new()</CODE
> as discussed above. </P
><P
CLASS="para"
>The format of a savefile entry looks like this, where the entry is terminated by <CODE
CLASS="literal"
>=</CODE
> standing alone on a line: </P
><PRE
CLASS="programlisting"
>NAME1=VALUE1
NAME2=VALUE2
NAME3=VALUE3
<CODE
CLASS="literal"
>=</CODE
></PRE
><P
CLASS="para"
>Now it's time to return a fresh form to the browser and its user. (This form will be, of course, the first form he is seeing if he has just clicked on "Please sign our guestbook.") First, consider some preliminaries: </P
><PRE
CLASS="programlisting"
><CODE
CLASS="literal"
>print hr, start_form; # hr() emits html horizontal rule: &lt;HR&gt;</CODE
></PRE
><P
CLASS="para"
>As already mentioned, <EM
CLASS="emphasis"
>CGI.pm</EM
> allows us to use either straight function calls or method calls via a CGI object. Here, for basic HTML code, we've reverted to the simple function calls. But for generation of form input fields, we continue to employ object methods: </P
><PRE
CLASS="programlisting"
>print p(&quot;Name:&quot;, $cur-&gt;textfield(
    -NAME =&gt; &quot;name&quot;));
print p(&quot;Message:&quot;, $cur-&gt;textfield(
     -NAME =&gt; &quot;message&quot;,
     -OVERRIDE =&gt; 1, # clears previous message
     -SIZE =&gt; 50));
print p(submit(&quot;send&quot;), reset(&quot;clear&quot;));
<CODE
CLASS="literal"
>print end_form, hr;</CODE
></PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>textfield()</CODE
> method returns a text input field for a form. The first of the two invocations here generates HTML code for a text input field with the HTML attribute <CODE
CLASS="literal"
>NAME=&quot;name"</CODE
>, while the second one creates a field with the attribute <CODE
CLASS="literal"
>NAME=&quot;message"</CODE
>. </P
><P
CLASS="para"
>Widgets created by <EM
CLASS="emphasis"
>CGI.pm</EM
> are by default sticky&nbsp;- they retain their values between calls. (This statement is true only during a single session with a form, beginning when the user clicks on "Please sign our guestbook.") Consequently, the <CODE
CLASS="literal"
>NAME=&quot;name"</CODE
> field generated by the first <CODE
CLASS="literal"
>textfield()</CODE
> above will have the value of the user's name if he already filled out and submitted the form at least once during this session. So the input field we are now creating will actually have these HTML attributes: </P
><PRE
CLASS="programlisting"
><CODE
CLASS="literal"
>NAME=&quot;name&quot; VALUE=&quot;Sam Smith&quot;</CODE
></PRE
><P
CLASS="para"
>The second invocation of <CODE
CLASS="literal"
>textfield()</CODE
> is a different matter. We don't want the message field to contain the value of the old message. So the <CODE
CLASS="literal"
>-OVERRIDE =&gt; 1</CODE
> argument pair says, in effect, "throw out the previous value of this text field and restore the default value." The <CODE
CLASS="literal"
>-SIZE =&gt;</CODE
> <CODE
CLASS="literal"
>50</CODE
> argument pair of <CODE
CLASS="literal"
>textfield()</CODE
> gives the size of the displayed input field in characters. Other optional argument pairs besides those shown include: <CODE
CLASS="literal"
>-DEFAULT</CODE
> <CODE
CLASS="literal"
>=&gt;</CODE
> <CODE
CLASS="literal"
>'</CODE
><CODE
CLASS="replaceable"
><I
>initial</I
></CODE
> <CODE
CLASS="replaceable"
><I
>value</I
></CODE
><CODE
CLASS="literal"
>'</CODE
> and <CODE
CLASS="literal"
>-MAXLENGTH =&gt;</CODE
> <CODE
CLASS="replaceable"
><I
>n</I
></CODE
>, where <CODE
CLASS="literal"
>n</CODE
> is the maximum number of input characters the field will accept.</P
><P
CLASS="para"
>Finally, we output for the user's delectation the current set of saved messages, including, of course, any he has just submitted: </P
><PRE
CLASS="programlisting"
>print h2(&quot;Prior Messages&quot;);
foreach $entry (@entries) {
    printf(&quot;%s [%s]: %s&quot;,
    $entry-&gt;param(&quot;date&quot;),
    $entry-&gt;param(&quot;name&quot;),
    $entry-&gt;param(&quot;message&quot;));
    print br();
}
<CODE
CLASS="literal"
>print end_html;</CODE
></PRE
><P
CLASS="para"
>As you will doubtless realize, the <CODE
CLASS="literal"
>h2</CODE
> function outputs a second-level HTML heading. For the rest, we simply iterate through the current list of saved entries (the same list we earlier wrote to the savefile), printing out date, name, and message from each one. </P
><P
CLASS="para"
>Users can sit with the guestbook form, continually typing messages and pressing the submit button. This method simulates an electronic bulletin-board system, letting users see each other's new messages each time they send off their own. When they do this, they call the same CGI program repeatedly, which means that the previous widget values are automatically retained between invocations. This result is particularly convenient when creating multistage forms, such as those used in so-called "shopping cart" applications. </P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_04.htm"
TITLE="18.4 Passing Parameters via CGI"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.4 Passing Parameters via CGI"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl on Win32 Systems"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_06.htm"
TITLE="18.6 Troubleshooting CGI Programs"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.6 Troubleshooting CGI Programs"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>18.4 Passing Parameters via CGI</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>18.6 Troubleshooting CGI Programs</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
