<HTML
><HEAD
>
<TITLE>[Chapter 5] 5.5 Some Hints About Object Design</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:59:16Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch05_01.htm"
TITLE="5. Packages, Modules, and Object Classes"><LINK
REL="prev"
HREF="ch05_04.htm"
TITLE="5.4 Using Tied Variables"><LINK
REL="next"
HREF="ch06_01.htm"
TITLE="6. Social Engineering"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch05_04.htm"
TITLE="5.4 Using Tied Variables"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.4 Using Tied Variables"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch05_01.htm"
TITLE="5. Packages, Modules, and Object Classes"
>Chapter 5<BR>Packages, Modules, and Object Classes</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="CHAPTER"
HREF="ch06_01.htm"
TITLE="6. Social Engineering"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6. Social Engineering"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="PERL2-CH-5-SECT-5"
>5.5 Some Hints About Object Design</A
></H2
><P
CLASS="para"
>In this section we present a collection of tricks, hints, and code
examples derived from various sources.  We hope to whet your curiosity
about such things as the use of instance variables and the mechanics of
object and class relationships.  You can ignore these things when you're
merely using a class, but when you're implementing a class, you have to
pay more attention to what you're doing, and why.</P
><P
CLASS="para"
>You needn't feel bound by the particular styles and idioms you see here,
but you should be thinking about the underlying principles.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-5-SECT-5.1"
>5.5.1 Object-Oriented Scaling Tips</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16402"
></A
><A
CLASS="indexterm"
NAME="AUTOID-16404"
></A
><A
CLASS="indexterm"
NAME="AUTOID-16406"
></A
><A
CLASS="indexterm"
NAME="AUTOID-16409"
></A
>The following guidelines will help you design a class that can be
transparently used as a base class by another class.</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Do not attempt to verify that the type of <CODE
CLASS="literal"
>$self</CODE
> is the class
you're in.  That'll break if the class is inherited, when the type of
<CODE
CLASS="literal"
>$self</CODE
> is valid but its package isn't what you expect.  See rule 5.</P
><PRE
CLASS="programlisting"
>package Some_Class;
sub some_method {
    my $self = shift;
    unless (ref($self) eq &quot;Some_Class&quot;) {          # WRONG
        croak &quot;I'm not a Some_Class anymore!&quot;;
    }
    unless (ref $self) {                           # better
        croak &quot;bad method call&quot;;
    }
}</PRE
><P
CLASS="para"
></P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16420"
></A
><A
CLASS="indexterm"
NAME="AUTOID-16422"
></A
><A
CLASS="indexterm"
NAME="AUTOID-16425"
></A
>If an object-oriented (<CODE
CLASS="literal"
>-&gt;</CODE
>) or indirect-object syntax was used, then the
object is probably the correct type and there's no need to become paranoid
about it.  Perl isn't a paranoid language anyway.  If people subvert the
object-oriented or indirect-object syntax by calling a method directly as
an ordinary function, or vice versa, then they probably know what
they're doing and you should let them do it.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Use the two-argument form of <A
CLASS="xref"
HREF="ch03_009.htm"
TITLE="bless"
><B
CLASS="xref.cmd"
>bless</B
></A
>.  Let a derived class (subclass)
use your constructor.  See the section on &quot;Inheriting a Constructor&quot;.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16433"
></A
>The derived class is allowed to know things about its immediate base
class (superclass); the base class is allowed to know nothing about a
derived class.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16437"
></A
><A
CLASS="indexterm"
NAME="AUTOID-16439"
></A
>Don't be trigger-happy with inheritance, which should generally be used
to represent only the &quot;is-a&quot; relationship.  One of the &quot;has-a&quot;
relationships (implying some sort of aggregation) is often more
appropriate.  See the later sections on &quot;Containment&quot;, &quot;Implementation&quot;, and
&quot;Delegation&quot;.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>The object is the namespace.  Make package globals accessible via the
object.  That means you should include a reference to any package data
inside the object somewhere, instead of having the method
guess where to look for it.
See the section on &quot;Class Context and the Object&quot;.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Indirect-object syntax is certainly less noisy, but it is also prone to
ambiguities which can cause difficult-to-find bugs.  Allow people to use
the sure-thing object-oriented syntax, even if you don't like it.  On the
other hand, allow people to use the indirect-object syntax when it
increases clarity.  Don't impose artificial house rules in either direction.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Do not use the ordinary subroutine call syntax on a method.  You're
going to be bitten someday.  Someone might move that method into a base
class and your code will be broken.  On top of that, you're feeding the
paranoia mentioned in rule 2.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Don't assume you know the home package of a method.  You're making it
difficult for someone to override that method.  See the later section &quot;Thinking
of Code Reuse&quot;.</P
></LI
></OL
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-5-SECT-5.2"
>5.5.2 Instance Variables</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16453"
></A
><A
CLASS="indexterm"
NAME="CH05.INST"
></A
>An anonymous array or anonymous hash can be used to hold instance
variables.  (The hashes fare better in the face of inheritance.)
We'll also show you some nice interactions with named parameters.</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>package HashInstance;

sub new {
    my $type   = shift;
    my %params = @_;
    my $self   = {};
    $self-&gt;{High} = $params{High};
    $self-&gt;{Low}  = $params{Low};
    return bless $self, $type;
}

package ArrayInstance;

sub new {
    my $type   = shift;
    my %params = @_;
    my $self   = [];
    $self-&gt;[0] = $params{Left};
    $self-&gt;[1] = $params{Right};
    return bless $self, $type;
}

package main;

$a = HashInstance-&gt;new( High =&gt; 42, Low =&gt; 11 );
print &quot;High=$a-&gt;{High}\n&quot;;
print &quot;Low=$a-&gt;{Low}\n&quot;;

$b = ArrayInstance-&gt;new( Left =&gt; 78, Right =&gt; 40 );
print &quot;Left=$b-&gt;[0]\n&quot;;
print &quot;Right=$b-&gt;[1]\n&quot;;</PRE
></P
><P
CLASS="para"
>This demonstrates how object references act like ordinary references if
you use them like ordinary references, as you often do within the class
definitions.  Strictly speaking, we're cheating here on the principle of
<EM
CLASS="emphasis"
>encapsulation</EM
> when we dereference <CODE
CLASS="literal"
>$a</CODE
> and <CODE
CLASS="literal"
>$b</CODE
>
outside of their class definitions.  But hey, the classes didn't provide
access methods, so there's a bit of blame on both sides.</P
><P
CLASS="para"
>Besides, most of the rest of these examples cheat too.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-5-SECT-5.3"
>5.5.3 Scalar Instance Variables</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16469"
></A
>An anonymous scalar can be used when only one instance variable is needed.</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>package ScalarInstance;

sub new {
    my $type = shift;
    my $self;
    $self = shift;
    return bless \$self, $type;
}

package main;

$a = ScalarInstance-&gt;new( 42 );
print &quot;a=$$a\n&quot;;</PRE
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-5-SECT-5.4"
>5.5.4 Instance Variable Inheritance</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16477"
></A
>This example demonstrates how one might inherit instance variables from
a base class for inclusion in the new class.  This requires calling the
base class's constructor and adding one's own instance variables to the
new object.  Note that you're pretty much forced to use a hash if you
want to do inheritance, since you can't have a reference to multiple
types at the same time.  A hash allows you to extend your object's little
namespace in arbitrary directions, unlike an array, which can only be
extended at the end.  So, for example, your base class
might use the first five elements of your array, but the various derived classes
might start fighting over who owns the sixth element.  So use a hash
instead, like this:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>package Base;

sub new {
    my $type = shift;
    my $self = {};
    $self-&gt;{buz} = 42;
    return bless $self, $type;
}

package Derived;
@ISA = qw( Base );

sub new {
    my $type = shift;
    my $self = Base-&gt;new;
    $self-&gt;{biz} = 11;
    return bless $self, $type;
}

package main;

$a = Derived-&gt;new;
print &quot;buz = &quot;, $a-&gt;{buz}, &quot;\n&quot;;
print &quot;biz = &quot;, $a-&gt;{biz}, &quot;\n&quot;;</PRE
></P
><P
CLASS="para"
>You still have to be careful that two derived classes don't pick the same
name in the object's namespace, but that's an easier problem than trying
to make the same array element hold different values simultaneously.</P
><A
CLASS="indexterm"
NAME="AUTOID-16483"
></A
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-5-SECT-5.5"
>5.5.5 Containment (the &quot;Has-a&quot; Relationship)</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16487"
></A
><A
CLASS="indexterm"
NAME="AUTOID-16489"
></A
>The following demonstrates how one might implement the &quot;contains&quot;
relationship between objects.  This is closely related to the &quot;uses&quot;
relationship we show later.</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>package Inner;

sub new {
    my $type = shift;
    my $self = {};
    $self-&gt;{buz} = 42;
    return bless $self, $type;
}

package Outer;

sub new {
    my $type = shift;
    my $self = {};
    $self-&gt;{Inner} = Inner-&gt;new;
    $self-&gt;{biz} = 11;
    return bless $self, $type;
}

package main;

$a = Outer-&gt;new;
print &quot;buz = &quot;, $a-&gt;{Inner}-&gt;{buz}, &quot;\n&quot;;
print &quot;biz = &quot;, $a-&gt;{biz}, &quot;\n&quot;;</PRE
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-5-SECT-5.6"
>5.5.6 Overriding Base Class Methods</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16496"
></A
><A
CLASS="indexterm"
NAME="AUTOID-16500"
></A
><A
CLASS="indexterm"
NAME="AUTOID-16503"
></A
><A
CLASS="indexterm"
NAME="AUTOID-16506"
></A
>The following example demonstrates how to override a base class method
within a derived class, and then call the overridden method anyway.  The
<CODE
CLASS="literal"
>SUPER</CODE
> pseudoclass allows the programmer to call an overridden base
class (superclass) method without actually knowing where that method is
defined.[<A
CLASS="footnote"
HREF="#AUTOID-16510"
>18</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-16510"
>[18]</A
> This is not to be confused with the mechanism mentioned earlier for
overriding Perl's built-in functions, which aren't object methods, and so
aren't overridden by inheritance.  You call overridden built-ins via the
pseudopackage <CODE
CLASS="literal"
>CORE</CODE
> rather than the pseudopackage <CODE
CLASS="literal"
>SUPER</CODE
>.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
><PRE
CLASS="programlisting"
>package Buz;
sub goo { print &quot;here's the goo\n&quot; }

package Bar;
@ISA = qw( Buz );
sub google { print &quot;google here\n&quot; }

package Baz;
sub mumble { print &quot;mumbling\n&quot; }

package Foo;
@ISA = qw( Bar Baz );

sub new {
    my $type = shift;
    return bless [], $type;
}
sub grr { print &quot;grumble\n&quot; }
sub goo {
    my $self = shift;
    $self-&gt;SUPER::goo();
}
sub mumble {
    my $self = shift;
    $self-&gt;SUPER::mumble();
}
sub google {
    my $self = shift;
    $self-&gt;SUPER::google();
}

package main;

$foo = Foo-&gt;new;
$foo-&gt;mumble;
$foo-&gt;grr;
$foo-&gt;goo;
$foo-&gt;google;</PRE
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-5-SECT-5.7"
>5.5.7 Implementation (the &quot;Uses&quot; Relationship)</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16519"
></A
><A
CLASS="indexterm"
NAME="AUTOID-16521"
></A
>This example demonstrates an interface for the SDBM_File class.  This creates a
&quot;uses&quot; relationship between our class and the SDBM_File class.</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>package MyDBM;

require SDBM_File;
require Tie::Hash;
@ISA = qw( Tie::Hash );

sub TIEHASH {
    my $type = shift;
    my $ref  = SDBM_File-&gt;new(@_);
    return bless {dbm =&gt; $ref}, $type;
}
sub FETCH {
    my $self = shift;
    my $ref  = $self-&gt;{dbm};
    $ref-&gt;FETCH(@_);
}
sub STORE {
    my $self = shift;
    if (defined $_[0]){
        my $ref = $self-&gt;{dbm};
        $ref-&gt;STORE(@_);
    } else {
        die &quot;Cannot STORE an undefined key in MyDBM\n&quot;;
    }
}

package main;
use Fcntl qw( O_RDWR O_CREAT );

tie %foo, &quot;MyDBM&quot;, &quot;sdbmfile1&quot;, O_RDWR|O_CREAT, 0640;
$foo{Fred} = 123;
print &quot;foo-Fred = $foo{Fred}\n&quot;;

tie %bar, &quot;MyDBM&quot;, &quot;sdbmfile2&quot;, O_RDWR|O_CREAT, 0640;
$bar{Barney} = 456;
print &quot;bar-Barney = $bar{Barney}\n&quot;;</PRE
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-5-SECT-5.8"
>5.5.8 Thinking of Code Reuse</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH05.CODE1"
></A
><A
CLASS="indexterm"
NAME="CH05.CODE2"
></A
>When we think of code reuse, we often fall into the habit of thinking
that new code will always reuse old code.  But one strength of
object-oriented languages is the ease with which old code can use new
code, as long as you don't introduce spurious relationships that mess
things up.  The following examples will demonstrate first how one can
hinder code reuse and then how one can promote code reuse.</P
><P
CLASS="para"
>This first example illustrates a class that uses a fully qualified
method call to access the &quot;private&quot; method <CODE
CLASS="literal"
>BAZ()</CODE
>.  We'll show that it
is impossible to override the <CODE
CLASS="literal"
>BAZ()</CODE
> method.</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>package FOO;

sub new {
    my $type = shift;
    return bless {}, $type;
}
sub bar {
    my $self = shift;
    $self-&gt;FOO::private::BAZ;
}

package FOO::private;

sub BAZ {
    print &quot;in BAZ\n&quot;;
}

package main;

$a = FOO-&gt;new;
$a-&gt;bar;</PRE
></P
><P
CLASS="para"
>Now we try to override the <CODE
CLASS="literal"
>BAZ()</CODE
> method.  We would like
<CODE
CLASS="literal"
>FOO::bar()</CODE
> to call <CODE
CLASS="literal"
>GOOP::BAZ()</CODE
>, but this cannot happen
because <CODE
CLASS="literal"
>FOO::bar()</CODE
> explicitly calls <CODE
CLASS="literal"
>FOO::private::BAZ()</CODE
>.</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>package FOO;

sub new {
    my $type = shift;
    return bless {}, $type;
}
sub bar {
    my $self = shift;
    $self-&gt;FOO::private::BAZ;
}

package FOO::private;

sub BAZ {
    print &quot;in BAZ\n&quot;;
}

package GOOP;
@ISA = qw( FOO );
sub new {
    my $type = shift;
    return bless {}, $type;
}

sub BAZ {
    print &quot;in GOOP::BAZ\n&quot;;
}

package main;

$a = GOOP-&gt;new;
$a-&gt;bar;</PRE
></P
><P
CLASS="para"
>To create reusable code we must modify class <CODE
CLASS="literal"
>FOO</CODE
>, flattening class
<CODE
CLASS="literal"
>FOO::private</CODE
>.  The next example shows a reusable class <CODE
CLASS="literal"
>FOO</CODE
>
which allows the method <CODE
CLASS="literal"
>GOOP::BAZ()</CODE
> to be used in place of
<CODE
CLASS="literal"
>FOO::BAZ()</CODE
>.</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>package FOO;

sub new {
    my $type = shift;
    return bless {}, $type;
}
sub bar {
    my $self = shift;
    $self-&gt;BAZ;
}

sub BAZ {
    print &quot;in BAZ\n&quot;;
}

package GOOP;
@ISA = qw( FOO );

sub new {
    my $type = shift;
    return bless {}, $type;
}
sub BAZ {
    print &quot;in GOOP::BAZ\n&quot;;
}

package main;

$a = GOOP-&gt;new;
$a-&gt;bar;</PRE
></P
><P
CLASS="para"
>The moral of the story is that generic interfaces are by nature not
very private.  Some languages go to great lengths to define various
levels of privacy.  Perl goes to great lengths not to.</P
><A
CLASS="indexterm"
NAME="AUTOID-16555"
></A
><A
CLASS="indexterm"
NAME="AUTOID-16556"
></A
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-5-SECT-5.9"
>5.5.9 Class Context and the Object</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16560"
></A
><A
CLASS="indexterm"
NAME="AUTOID-16562"
></A
><A
CLASS="indexterm"
NAME="AUTOID-16564"
></A
>Use the object to solve package and class context problems.  Everything a
method needs should be available via the object or should be passed as a
parameter to the method.</P
><P
CLASS="para"
>A class will sometimes have static or global data to be used by the
methods.  A derived class may want to override that data and replace it with new
data.  When this happens, the base class may not know how to find the new
copy of the data.</P
><P
CLASS="para"
>This problem can be solved by using the object to define the context of
the method.  Let the method look in the object for a reference to the
data.  The alternative is to force the method to go hunting for the data
(&quot;Is it in my class, or in a derived class?  Which derived class?&quot;), and
this can be inconvenient and will lead to hackery.  It is better to just
let the object tell the method where the data is located.</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>package Bar;

%fizzle = ( Password =&gt; 'XYZZY' );

sub new {
    my $type = shift;
    my $self = {};
    $self-&gt;{fizzle} = \%fizzle;
    return bless $self, $type;
}</PRE
></P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>sub enter {
    my $self = shift;

    # Don't try to guess if we should use %Bar::fizzle
    # or %Foo::fizzle.  The object already knows which
    # we should use, so just ask it.
    #
    my $fizzle = $self-&gt;{fizzle};

    print &quot;The word is &quot;, $fizzle-&gt;{Password}, &quot;\n&quot;;
}

package Foo;
@ISA = qw( Bar );

%fizzle = ( Password =&gt; 'Rumple' );

sub new {
    my $type = shift;
    my $self = Bar-&gt;new;
    $self-&gt;{fizzle} = \%fizzle;
    return bless $self, $type;
}

package main;

$a = Bar-&gt;new;
$b = Foo-&gt;new;
$a-&gt;enter;
$b-&gt;enter;</PRE
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-5-SECT-5.10"
>5.5.10 Inheriting a Constructor</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16575"
></A
><A
CLASS="indexterm"
NAME="AUTOID-16578"
></A
>An inheritable constructor should use the two-argument form of <A
CLASS="xref"
HREF="ch03_009.htm"
TITLE="bless"
><B
CLASS="xref.cmd"
>bless</B
></A
>,
which allows blessing directly into a specified class.  Notice in this
example that the object will be a <CODE
CLASS="literal"
>BAR</CODE
> not a <CODE
CLASS="literal"
>FOO</CODE
>, even
though the constructor is in class <CODE
CLASS="literal"
>FOO</CODE
>.</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>package FOO;

sub new {
    my $type = shift;
    my $self = {};
    return bless $self, $type;
}

sub baz {
    print &quot;in FOO::baz()\n&quot;;
}

package BAR;
@ISA = qw(FOO);

sub baz {
    print &quot;in BAR::baz()\n&quot;;
}

package main;

$a = BAR-&gt;new;
$a-&gt;baz;</PRE
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-5-SECT-5.11"
>5.5.11 Delegation (the &quot;Passes-the-Buck-to&quot; Relationship)</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-16589"
></A
><A
CLASS="indexterm"
NAME="AUTOID-16591"
></A
>Some classes, such as SDBM_File, cannot be effectively subclassed because
they create foreign objects.  Such a class can be extended with some sort of
aggregation technique such as the &quot;uses&quot; relationship mentioned
earlier in this chapter.  Or
you can use delegation.</P
><P
CLASS="para"
>The following example demonstrates delegation using an <CODE
CLASS="literal"
>AUTOLOAD</CODE
>
function to perform message-forwarding.  This allows the MyDBM
object to behave exactly like an SDBM_File object without having to
predefine all the possible methods that might be invoked.  As usual, the
MyDBM class can still modify the behavior by adding custom <CODE
CLASS="literal"
>FETCH</CODE
>
and <CODE
CLASS="literal"
>STORE</CODE
> methods, since the <CODE
CLASS="literal"
>AUTOLOAD</CODE
> is only invoked on missing
methods.</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>package MyDBM;

require SDBM_File;
require Tie::Hash;
@ISA = qw(Tie::Hash);

sub TIEHASH {
    my $type = shift;
    my $ref = SDBM_File-&gt;new(@_);
    return bless {delegate =&gt; $ref}, $type;
}

sub AUTOLOAD {
    my $self = shift;

    # The Perl interpreter places the name of the
    # message in a variable called $AUTOLOAD.

    # DESTROY messages should never be propagated.
    return if $AUTOLOAD =~ /::DESTROY$/;

    # Remove the package name.
    $AUTOLOAD =~ s/^MyDBM:://;

    # Pass the message to the delegate.
    $self-&gt;{delegate}-&gt;$AUTOLOAD(@_);
}

package main;
use Fcntl qw( O_RDWR O_CREAT );

tie %number, &quot;MyDBM&quot;, &quot;oddnumbers&quot;, O_RDWR|O_CREAT, 0666;
$number{beast} = 666;</PRE
></P
><P
CLASS="para"
>As we say on the Net, &quot;Hope this helps.&quot;</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch05_04.htm"
TITLE="5.4 Using Tied Variables"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.4 Using Tied Variables"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="CHAPTER"
HREF="ch06_01.htm"
TITLE="6. Social Engineering"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6. Social Engineering"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>5.4 Using Tied Variables</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>6. Social Engineering</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
