<HTML
><HEAD
>
<TITLE>[Chapter 14] 14.6 Sending and Receiving Signals</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:35:09Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch14_01.htm"
TITLE="14. Process Management"><LINK
REL="prev"
HREF="ch14_05.htm"
TITLE="14.5 Summary of Process Operations"><LINK
REL="next"
HREF="ch14_07.htm"
TITLE="14.7 Exercises"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_05.htm"
TITLE="14.5 Summary of Process Operations"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.5 Summary of Process Operations"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch14_01.htm"
TITLE="14. Process Management"
>Chapter 14<BR>Process Management</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_07.htm"
TITLE="14.7 Exercises"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.7 Exercises"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch14-25513"
>14.6 Sending and Receiving Signals</A
></H2
><P
CLASS="para"
>One method of <A
CLASS="indexterm"
NAME="ch14-idx-744359-0"
></A
>interprocess communication is to send and receive <A
CLASS="indexterm"
NAME="ch14-idx-744358-0"
></A
>signals. A signal is a one-bit message (meaning "this signal happened") sent to a process from another process or from the kernel. Signals are numbered, usually from one to some small number like 15 or 31. Some signals have predefined meanings and are sent automatically to a process under certain conditions (such as <A
CLASS="indexterm"
NAME="ch14-idx-744360-0"
></A
>memory faults or <A
CLASS="indexterm"
NAME="ch14-idx-744361-0"
></A
>floating-point exceptions); others are strictly user-generated from other processes. Those processes must have permission to send such a signal. Only if you are the superuser or if the sending process has the same user ID as the receiving process is the signal permitted.</P
><P
CLASS="para"
>The response to a signal is called the signal's <A
CLASS="indexterm"
NAME="ch14-idx-744362-0"
></A
><EM
CLASS="emphasis"
>action</EM
>. Predefined signals have certain useful default actions, such as aborting the process or suspending it. Other signals are completely ignored by default. Nearly all signals can have their default action overridden, to either be ignored or else <EM
CLASS="emphasis"
>caught</EM
> (invoking a user-specified section of code automatically).</P
><P
CLASS="para"
>So far, this is all standard stuff; here's where it gets Perl-specific. When a Perl process <A
CLASS="indexterm"
NAME="ch14-idx-744363-0"
></A
>catches a signal, a subroutine of your choosing gets invoked asynchronously and automatically, momentarily interrupting whatever was executing. When the subroutine exits, whatever was executing resumes as if nothing had happened (except for the actions performed by the subroutine, if any).</P
><P
CLASS="para"
>Typically, the signal-catching subroutine will do one of two things: abort the program after executing some cleanup code, or set some flag (such as a global variable) that the program routinely checks.[<A
CLASS="footnote"
HREF="#ch14-pgfId-611"
>6</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch14-pgfId-611"
>[6]</A
> In fact, doing anything more complicated than this is likely to mess things up; most of Perl's inner workings do not like to be executed in the main program and from the subroutine at the same time. Neither do your system libraries.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>You need to know the signal names to register a signal handler with Perl. By registering a signal handler, Perl will call the selected subroutine when the signal is received.</P
><P
CLASS="para"
>Signal names are defined in the <EM
CLASS="emphasis"
>signal </EM
>(2) manpage, and usually also in the C include file <EM
CLASS="emphasis"
>/usr/include/sys/signal.h</EM
>. Names generally start with <CODE
CLASS="literal"
>SIG</CODE
>, such as <A
CLASS="indexterm"
NAME="ch14-idx-744364-0"
></A
><CODE
CLASS="literal"
>SIGINT</CODE
>, <CODE
CLASS="literal"
>SIGQUIT</CODE
>, and <CODE
CLASS="literal"
>SIGKILL</CODE
>. To declare the subroutine <CODE
CLASS="literal"
>my_sigint_catcher()</CODE
> as the signal handler to deal with the <CODE
CLASS="literal"
>SIGINT</CODE
>, we set a value into the magic <A
CLASS="indexterm"
NAME="ch14-idx-744365-0"
></A
><CODE
CLASS="literal"
>%SIG</CODE
> hash. In this hash, we set the value of the key <CODE
CLASS="literal"
>INT</CODE
> (that's <CODE
CLASS="literal"
>SIGINT</CODE
> without the <CODE
CLASS="literal"
>SIG</CODE
>) to the name of the subroutine that will catch the <CODE
CLASS="literal"
>SIGINT</CODE
> signal, like so:</P
><PRE
CLASS="programlisting"
>$SIG{'INT'} = 'my_sigint_catcher';</PRE
><P
CLASS="para"
>But we also need a definition for that subroutine. Here's a simple one:</P
><PRE
CLASS="programlisting"
>sub my_sigint_catcher {
    $saw_sigint = 1; # set a flag
}</PRE
><P
CLASS="para"
>This signal catcher sets a global variable and then returns immediately. Returning from this subroutine causes execution to resume wherever it was interrupted. Typically, you'd first zero the <CODE
CLASS="literal"
>$saw_sigint</CODE
> flag, set this subroutine up as a <CODE
CLASS="literal"
>SIGINT</CODE
> catcher, and then do your long-running routine, like so:</P
><PRE
CLASS="programlisting"
>$saw_sigint = 0;                   # clear the flag
$SIG{'INT'} = 'my_sigint_catcher'; # register the catcher
foreach (@huge_array) {
                                   # do something
                                   # do more things
                                   # do still more things
    if ($saw_sigint) {             # interrupt wanted?
                                   # some sort of cleanup here
        last;
    }
}
$SIG{'INT'} = 'DEFAULT'; # restore the default action</PRE
><P
CLASS="para"
>The trick here is that the value of the flag is checked at useful points during the evaluation and is used to exit the loop prematurely, here also handling some cleanup actions. Note the last statement in the preceding code: setting the action to <A
CLASS="indexterm"
NAME="ch14-idx-744366-0"
></A
><CODE
CLASS="literal"
>DEFAULT</CODE
> restores the <A
CLASS="indexterm"
NAME="ch14-idx-744368-0"
></A
>default action on a particular signal (another <CODE
CLASS="literal"
>SIGINT</CODE
> will abort the program immediately). Another useful special value like this is <A
CLASS="indexterm"
NAME="ch14-idx-744367-0"
></A
><CODE
CLASS="literal"
>IGNORE</CODE
>, meaning to <A
CLASS="indexterm"
NAME="ch14-idx-744369-0"
></A
>ignore the signal (if the default action is not to ignore the signal, like <CODE
CLASS="literal"
>SIGINT</CODE
>). You can make a signal action <CODE
CLASS="literal"
>IGNORE</CODE
> if no cleanup actions are required, and you don't want to terminate operations early.</P
><P
CLASS="para"
>One of the ways that the <CODE
CLASS="literal"
>SIGINT</CODE
> signal is generated is by having the user press the selected interrupt character (like <A
CLASS="indexterm"
NAME="ch14-idx-744371-0"
></A
>CTRL-C) on the terminal. But a process can also generate the <CODE
CLASS="literal"
>SIGINT</CODE
> signal directly using the <A
CLASS="indexterm"
NAME="ch14-idx-744372-0"
></A
><CODE
CLASS="literal"
>kill</CODE
> function. This function takes a signal number or name, and <A
CLASS="indexterm"
NAME="ch14-idx-744373-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-744373-1"
></A
>sends that signal to the list of processes (identified by process ID) following the signal. So sending a signal from a program requires determining the process IDs of the recipient processes. (Process IDs are returned from some of the functions, such as <CODE
CLASS="literal"
>fork</CODE
> and&nbsp;- when opening a program as a filehandle&nbsp;- <CODE
CLASS="literal"
>open</CODE
>). Suppose you want to send a signal 2 (also known as <CODE
CLASS="literal"
>SIGINT</CODE
>) to the processes 234 and 237. It's as simple as this:</P
><PRE
CLASS="programlisting"
>kill(2,234,237); # send SIGINT to 234 and 237
kill ('INT', 234, 237); #same</PRE
><P
CLASS="para"
>For more about signal handling, see <A
CLASS="olink"
HREF="../prog/ch06_01.htm"
>Chapter 6</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> or the <EM
CLASS="emphasis"
>perlipc </EM
>(1) manpage.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_05.htm"
TITLE="14.5 Summary of Process Operations"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.5 Summary of Process Operations"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_07.htm"
TITLE="14.7 Exercises"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.7 Exercises"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>14.5 Summary of Process Operations</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>14.7 Exercises</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
