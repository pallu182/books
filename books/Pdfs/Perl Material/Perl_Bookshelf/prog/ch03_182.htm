<HTML
><HEAD
>
<TITLE>[Chapter 3] 3.2.182 unpack</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:56:03Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_02.htm"
TITLE="3.2 Perl Functions in Alphabetical Order"><LINK
REL="prev"
HREF="ch03_181.htm"
TITLE="3.2.181 unlink"><LINK
REL="next"
HREF="ch03_183.htm"
TITLE="3.2.183 unshift"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_181.htm"
TITLE="3.2.181 unlink"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.181 unlink"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. Functions"
>Chapter 3<BR>Functions</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_183.htm"
TITLE="3.2.183 unshift"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.183 unshift"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CMD-UNPACK"
>3.2.182 unpack</A
></H3
><PRE
CLASS="programlisting"
>unpack <CODE
CLASS="replaceable"
><I
>TEMPLATE</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>EXPR</I
></CODE
></PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14037"
></A
><A
CLASS="indexterm"
NAME="AUTOID-14039"
></A
><A
CLASS="indexterm"
NAME="AUTOID-14042"
></A
>This function does the reverse of <A
CLASS="xref"
HREF="ch03_105.htm"
TITLE="pack"
><B
CLASS="xref.cmd"
>pack</B
></A
>: it
takes a string (<CODE
CLASS="replaceable"
><I
>EXPR</I
></CODE
>) representing a data structure
and expands it out into a list value, returning the list value.  (In a scalar
context, it can be used to unpack a single value.)  The
<CODE
CLASS="replaceable"
><I
>TEMPLATE</I
></CODE
> has much the same format as in the <A
CLASS="xref"
HREF="ch03_105.htm"
TITLE="pack"
><B
CLASS="xref.cmd"
>pack</B
></A
> function&nbsp;- it specifies the order and
type of the values to be unpacked.  (See <A
CLASS="xref"
HREF="ch03_105.htm"
TITLE="pack"
><B
CLASS="xref.cmd"
>pack</B
></A
> for a more detailed description of
<CODE
CLASS="replaceable"
><I
>TEMPLATE</I
></CODE
>.)</P
><P
CLASS="para"
>Here's a subroutine that does (some of) <A
CLASS="xref"
HREF="ch03_162.htm"
TITLE="substr"
><B
CLASS="xref.cmd"
>substr</B
></A
>, only slower:</P
><PRE
CLASS="programlisting"
>sub substr {
    my($what, $where, $howmuch) = @_;
    if ($where &lt; 0) {
        $where = -$where;
        return unpack &quot;\@* X$where a$howmuch&quot;, $what;
    }
    else {
        return unpack &quot;x$where a$howmuch&quot;, $what;
    }
}</PRE
><P
CLASS="para"
>and then there's:</P
><PRE
CLASS="programlisting"
>sub signed_ord { unpack &quot;c&quot;, shift }</PRE
><P
CLASS="para"
>Here's a complete
<EM
CLASS="emphasis"
>uudecode</EM
>
program:</P
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
$_ = &lt;&gt; until ($mode,$file) = /^begin\s*(\d*)\s*(\S*)/;
open(OUT,&quot;&gt; $file&quot;) if $file ne &quot;&quot;;
while (&lt;&gt;) {
    last if /^end/;
    next if /[a-z]/;
    next unless int((((ord() - 32) &amp; 077) + 2) / 3) ==
                int(length() / 4);
    print OUT unpack &quot;u&quot;, $_;
}
chmod oct $mode, $file;</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14060"
></A
><A
CLASS="indexterm"
NAME="AUTOID-14062"
></A
><A
CLASS="indexterm"
NAME="AUTOID-14065"
></A
>In addition, you may prefix a field with 
<CODE
CLASS="literal"
>%</CODE
><CODE
CLASS="replaceable"
><I
>number</I
></CODE
> to
indicate that you want it to return a
<CODE
CLASS="replaceable"
><I
>number</I
></CODE
>-bit 
checksum of the items
instead of the items themselves.
Default is a 16-bit checksum.  For example, the following computes the
same number as the System V <EM
CLASS="emphasis"
>sum</EM
> program:</P
><PRE
CLASS="programlisting"
>undef $/;
$checksum = unpack (&quot;%32C*&quot;, &lt;&gt;) % 32767;</PRE
><P
CLASS="para"
>The following efficiently counts the number of set bits in a bit vector:</P
><PRE
CLASS="programlisting"
>$setbits = unpack &quot;%32b*&quot;, $selectmask;</PRE
><P
CLASS="para"
>Here's a simple MIME decoder:</P
><PRE
CLASS="programlisting"
>while (&lt;&gt;) {
  tr#A-Za-z0-9+/##cd;                   # remove non-base64 chars
  tr#A-Za-z0-9+/# -_#;                  # convert to uuencoded format
  $len = pack(&quot;c&quot;, 32 + 0.75*length);   # compute length byte
  print unpack(&quot;u&quot;, $len . $_);         # uudecode and print
}</PRE
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_181.htm"
TITLE="3.2.181 unlink"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.181 unlink"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_183.htm"
TITLE="3.2.183 unshift"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.183 unshift"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.2.181 unlink</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.2.183 unshift</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
