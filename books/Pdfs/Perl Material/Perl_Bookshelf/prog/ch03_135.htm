<HTML
><HEAD
>
<TITLE>[Chapter 3] 3.2.135 select (ready file descriptors)</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:53:45Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_02.htm"
TITLE="3.2 Perl Functions in Alphabetical Order"><LINK
REL="prev"
HREF="ch03_134.htm"
TITLE="3.2.134 select (output filehandle)"><LINK
REL="next"
HREF="ch03_136.htm"
TITLE="3.2.136 semctl"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_134.htm"
TITLE="3.2.134 select (output filehandle)"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.134 select (output filehandle)"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. Functions"
>Chapter 3<BR>Functions</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_136.htm"
TITLE="3.2.136 semctl"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.136 semctl"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CMD-SELECT"
>3.2.135 select (ready file descriptors)</A
></H3
><PRE
CLASS="programlisting"
>select <CODE
CLASS="replaceable"
><I
>RBITS</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>WBITS</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>EBITS</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>TIMEOUT</I
></CODE
></PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-12566"
></A
><A
CLASS="indexterm"
NAME="AUTOID-12568"
></A
><A
CLASS="indexterm"
NAME="AUTOID-12571"
></A
><A
CLASS="indexterm"
NAME="AUTOID-12574"
></A
><A
CLASS="indexterm"
NAME="AUTOID-12576"
></A
><A
CLASS="indexterm"
NAME="AUTOID-12578"
></A
>The four-argument <B
CLASS="emphasis.bold"
>select</B
> operator is totally unrelated to the
previously described operator.  This operator is for discovering which
(if any) of your file descriptors are ready to do input or output, or to
report an exceptional condition.  (This helps you avoid having to do
polling.)  It calls the <EM
CLASS="emphasis"
>select</EM
>(2) system call with the bitmasks
you've specified, which you can construct using <A
CLASS="xref"
HREF="ch03_038.htm"
TITLE="fileno"
><B
CLASS="xref.cmd"
>fileno</B
></A
> and
<A
CLASS="xref"
HREF="ch03_188.htm"
TITLE="vec"
><B
CLASS="xref.cmd"
>vec</B
></A
>, like this:</P
><PRE
CLASS="programlisting"
>$rin = $win = $ein = &quot;&quot;;
vec($rin, fileno(STDIN), 1) = 1;
vec($win, fileno(STDOUT), 1) = 1;
$ein = $rin | $win;</PRE
><P
CLASS="para"
>If you want to <B
CLASS="emphasis.bold"
>select</B
> on many filehandles you
might wish to write a subroutine:</P
><PRE
CLASS="programlisting"
>sub fhbits {
    my @fhlist = @_;
    my $bits;
    for (@fhlist) {
        vec($bits, fileno($_), 1) = 1;
    }
    return $bits;
}
$rin = fhbits(qw(STDIN TTY MYSOCK));</PRE
><P
CLASS="para"
>If you wish to use the same bitmasks repeatedly (and it's more efficient
if you do), the usual idiom is:</P
><PRE
CLASS="programlisting"
>($nfound, $timeleft) =
    select($rout=$rin, $wout=$win, $eout=$ein, $timeout);</PRE
><P
CLASS="para"
>Or to block until any file descriptor becomes ready:</P
><PRE
CLASS="programlisting"
>$nfound = select($rout=$rin, $wout=$win, $eout=$ein, undef);</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>$wout=$win</CODE
> trick works because the value of an assignment is
its left side, so <CODE
CLASS="literal"
>$wout</CODE
> gets clobbered first by the assignment,
and then by the <B
CLASS="emphasis.bold"
>select</B
>, while <CODE
CLASS="literal"
>$win</CODE
> remains unchanged.</P
><P
CLASS="para"
>Any of the bitmasks can also be <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
>.  The
timeout, if specified, is in seconds, which may be fractional.  (A timeout of
<CODE
CLASS="literal"
>0</CODE
> effects a poll.)  Not many implementations are capable of
returning the <CODE
CLASS="literal"
>$timeleft</CODE
>.  If not, they always return
<CODE
CLASS="literal"
>$timeleft</CODE
> equal to the supplied <CODE
CLASS="literal"
>$timeout</CODE
>.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-12604"
></A
>One use for <B
CLASS="emphasis.bold"
>select</B
> is to sleep with a finer
resolution than <A
CLASS="xref"
HREF="ch03_150.htm"
TITLE="sleep"
><B
CLASS="xref.cmd"
>sleep</B
></A
> allows.  To do this,
specify <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> for all the bitmasks. So, to sleep for (at least) 4.75 seconds, use:</P
><PRE
CLASS="programlisting"
>select undef, undef, undef, 4.75;</PRE
><P
CLASS="para"
>(On some non-UNIX systems this may not work, and you may need to fake up
at least one bitmask for a valid descriptor that won't ever be ready.)</P
><P
CLASS="para"
>Mixing buffered I/O (like <A
CLASS="xref"
HREF="ch03_116.htm"
TITLE="read"
><B
CLASS="xref.cmd"
>read</B
></A
> or
<CODE
CLASS="literal"
>&lt;HANDLE&gt;</CODE
>) with four-argument <B
CLASS="emphasis.bold"
>select</B
> is asking for trouble.  Use <A
CLASS="xref"
HREF="ch03_166.htm"
TITLE="sysread"
><B
CLASS="xref.cmd"
>sysread</B
></A
> instead.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_134.htm"
TITLE="3.2.134 select (output filehandle)"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.134 select (output filehandle)"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_136.htm"
TITLE="3.2.136 semctl"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.136 semctl"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.2.134 select (output filehandle)</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.2.136 semctl</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
