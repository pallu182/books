<HTML
><HEAD
>
<TITLE>[Chapter 3] 3.2.33 exec</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:49:14Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_02.htm"
TITLE="3.2 Perl Functions in Alphabetical Order"><LINK
REL="prev"
HREF="ch03_032.htm"
TITLE="3.2.32 eval"><LINK
REL="next"
HREF="ch03_034.htm"
TITLE="3.2.34 exists"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_032.htm"
TITLE="3.2.32 eval"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.32 eval"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. Functions"
>Chapter 3<BR>Functions</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_034.htm"
TITLE="3.2.34 exists"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.34 exists"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CMD-EXEC"
>3.2.33 exec</A
></H3
><PRE
CLASS="programlisting"
>exec <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
></PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-9835"
></A
><A
CLASS="indexterm"
NAME="AUTOID-9837"
></A
><A
CLASS="indexterm"
NAME="AUTOID-9840"
></A
><A
CLASS="indexterm"
NAME="AUTOID-9842"
></A
>This function terminates the currently running Perl script by
executing another program in place of itself.  If there is more than
one argument in <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
> (or if <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
>
is an array with more than one value)
the function calls C's <EM
CLASS="emphasis"
>execvp</EM
>(3) routine with the arguments in
<CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
>.  This bypasses any shell processing of the command.
If there is only one scalar argument, the argument is checked
for shell metacharacters.  If metacharacters are found, the entire argument is
passed to &quot;<CODE
CLASS="literal"
>/bin/sh -c</CODE
>&quot; for parsing.[<A
CLASS="footnote"
HREF="#AUTOID-9850"
>3</A
>]
If there are no metacharacters, the argument is split into words and passed
directly to <EM
CLASS="emphasis"
>execvp</EM
>(3) in the interests of efficiency, since
this bypasses all the overhead of shell processing.
Ordinarily <A
CLASS="xref"
HREF="ch03_033.htm"
TITLE="exec"
><B
CLASS="xref.cmd"
>exec</B
></A
> never returns&nbsp;- if it does return, it always
returns false, and you should check <B
CLASS="emphasis.bold"
>$!</B
> to find out what went
wrong.
Note that <A
CLASS="xref"
HREF="ch03_033.htm"
TITLE="exec"
><B
CLASS="xref.cmd"
>exec</B
></A
> (and <A
CLASS="xref"
HREF="ch03_167.htm"
TITLE="system"
><B
CLASS="xref.cmd"
>system</B
></A
>) do not flush your output
buffer, so you may need to enable command buffering by setting
<B
CLASS="emphasis.bold"
>$|</B
> on one or more filehandles to avoid lost output.
This statement runs the <EM
CLASS="emphasis"
>echo</EM
> program to print the current argument list:</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-9850"
>[3]</A
> Under UNIX, that is.  Other operating systems may use other command interpreters.</P
></DIV
></BLOCKQUOTE
><PRE
CLASS="programlisting"
>exec 'echo', 'Your arguments are: ', @ARGV;</PRE
><P
CLASS="para"
>This example shows that you can <A
CLASS="xref"
HREF="ch03_033.htm"
TITLE="exec"
><B
CLASS="xref.cmd"
>exec</B
></A
> a pipeline:</P
><PRE
CLASS="programlisting"
>exec &quot;sort $outfile | uniq&quot;
  or die &quot;Can't do sort/uniq: $!\n&quot;;</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-9864"
></A
>The UNIX <EM
CLASS="emphasis"
>execv</EM
>(3) call provides the ability to tell a
program the name it was invoked as.  This name might have nothing to
do with the name of the program you actually gave the operating system
to run.  By default, Perl simply replicates the first element of <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
>
and uses it for both purposes.  If, however, you don't really want to
execute the first argument of <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
>, but you want to lie to the program
you are executing about its own name, you can do so.
Put the real name of the program
you want to run into a variable and
then put that variable out in front of the <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
> <EM
CLASS="emphasis"
>without</EM
> a comma,
kind of like a filehandle for a <A
CLASS="xref"
HREF="ch03_110.htm"
TITLE="print"
><B
CLASS="xref.cmd"
>print</B
></A
> statement.  (This always
forces interpretation of the <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
> as a multi-valued list, even if
there is only a single scalar in the list.)  Then the first element of
<CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
> will be used only to mislead the executing program as to its
name.  For example:</P
><PRE
CLASS="programlisting"
>$shell = '/bin/csh';
exec $shell '-sh', @args;      # pretend it's a login shell
die &quot;Couldn't execute csh: $!\n&quot;;</PRE
><P
CLASS="para"
>You can also replace the simple scalar holding the program name with a
block containing arbitrary code, which simplifies the above example
to:</P
><PRE
CLASS="programlisting"
>exec {'/bin/csh'} '-sh', @args; # pretend it's a login shell</PRE
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_032.htm"
TITLE="3.2.32 eval"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.32 eval"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_034.htm"
TITLE="3.2.34 exists"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.34 exists"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.2.32 eval</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.2.34 exists</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
