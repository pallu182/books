<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.2.49 POSIX&nbsp;- Perl Interface to IEEE Std 1003.1</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T02:03:10Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_02.htm"
TITLE="7.2 Library Modules"><LINK
REL="prev"
HREF="ch07_048.htm"
TITLE="7.2.48 overload&nbsp;- Overload Perl's Mathematical Operations"><LINK
REL="next"
HREF="ch07_050.htm"
TITLE="7.2.50 Pod::Text&nbsp;- Convert POD Data to Formatted ASCII Text"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_048.htm"
TITLE="7.2.48 overload&nbsp;- Overload Perl's Mathematical Operations"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.48 overload&nbsp;- Overload Perl's Mathematical Operations"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. The Standard Perl Library"
>Chapter 7<BR>The Standard Perl Library</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_050.htm"
TITLE="7.2.50 Pod::Text&nbsp;- Convert POD Data to Formatted ASCII Text"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.50 Pod::Text&nbsp;- Convert POD Data to Formatted ASCII Text"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="AUTOID-23950"
>7.2.49 POSIX&nbsp;- Perl Interface to IEEE Std 1003.1</A
></H3
><PRE
CLASS="programlisting"
>use POSIX;                        # import all symbols
use POSIX qw(setsid);             # import one symbol
use POSIX qw(:errno_h :fcntl_h);  # import sets of symbols

printf &quot;EINTR is %d\n&quot;, EINTR;

$sess_id = POSIX::setsid();

$fd = POSIX::open($path, O_CREAT|O_EXCL|O_WRONLY, 0644);
# note: $fd is a filedescriptor, *NOT* a filehandle</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH07.POSIX1"
></A
>The POSIX module permits you to access all (or nearly all) the standard
POSIX 1003.1 identifiers.  Many of these identifiers have been given
Perl-ish interfaces.</P
><P
CLASS="para"
>This description gives a condensed list of the features available in the POSIX
module.  Consult your operating system's manpages for general information on
most features.  Consult the appropriate Perl built-in function whenever a
POSIX routine is noted as being identical to the function.</P
><P
CLASS="para"
>The &quot;Classes&quot; section later in this chapter describes some classes for signal
objects, TTY objects, and other miscellaneous objects.  The &quot;Functions&quot; section
later in this chapter describes POSIX functions from the 1003.1 specification.
The remaining sections list various constants and macros in an organization that
roughly follows IEEE Std 1003.1b-1993.</P
><BLOCKQUOTE
CLASS="warning"
><P
CLASS="para"
><STRONG
>WARNING:</STRONG
> A few functions are not implemented because they are C-specific.[<A
CLASS="footnote"
HREF="#AUTOID-23960"
>12</A
>]
If you attempt to call one of these functions, it will print a message
telling you that it isn't implemented, and will suggest using the Perl
equivalent, should one exist.  For example, trying to access the
<CODE
CLASS="literal"
>setjmp()</CODE
> call will elicit the message: &quot;<CODE
CLASS="literal"
>setjmp() is
C-specific: use eval {} instead</CODE
>&quot;.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-23960"
>[12]</A
> The 1003.1 standard wisely recommends that other language bindings
should avoid duplicating the idiosyncracies of C.  This is something we
were <EM
CLASS="emphasis"
>glad</EM
> to comply with.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Furthermore, some vendors will claim 1003.1 compliance without passing the POSIX
Compliance Test Suites (PCTS).  For example, one vendor may not define
<CODE
CLASS="literal"
>EDEADLK</CODE
>, or may incorrectly define the semantics of the
<EM
CLASS="emphasis"
>errno</EM
> values set by <EM
CLASS="emphasis"
>open</EM
>(2).
Perl does not attempt to verify POSIX compliance.  That means you can currently
say &quot;<CODE
CLASS="literal"
>use POSIX</CODE
>&quot; successfully, and then later in
your program find that your vendor has been lax and there's no usable
<CODE
CLASS="literal"
>ICANON</CODE
> macro after all.  This could be construed to be a bug.
Whose bug, we won't venture to guess.</P
></BLOCKQUOTE
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.66"
>7.2.49.1 Classes</A
></H4
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>POSIX::SigAction</B
></P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>new</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-23981"
></A
>Creates a new POSIX::SigAction object that corresponds to the C
<CODE
CLASS="literal"
>struct sigaction</CODE
>.  This object will be destroyed automatically when
it is no longer needed.  The first parameter is the fully qualified name of a
subroutine which is a signal handler.  The second parameter is a
POSIX::SigSet
object.  The third parameter contains the <CODE
CLASS="literal"
>sa_flags</CODE
>.</P
><PRE
CLASS="programlisting"
>$sigset = POSIX::SigSet-&gt;new;
$sigaction = POSIX::SigAction-&gt;new('main::handler', $sigset,
                 &amp;POSIX::SA_NOCLDSTOP);</PRE
><P
CLASS="para"
>This POSIX::SigAction
object should be used with the POSIX::sigaction()
function.</P
></DD
></DL
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>POSIX::SigSet</B
></P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>new</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-23995"
></A
>Creates a new SigSet object.
This object will be destroyed automatically
when it is no longer needed.  Arguments may be supplied to initialize the
set. Create an empty set:</P
><PRE
CLASS="programlisting"
>$sigset = POSIX::SigSet-&gt;new;</PRE
><P
CLASS="para"
>Create a set with <CODE
CLASS="literal"
>SIGUSR1</CODE
>:</P
><PRE
CLASS="programlisting"
>$sigset = POSIX::SigSet-&gt;new(&amp;POSIX::SIGUSR1);</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>addset</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Adds a signal to a SigSet object.  Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.</P
><PRE
CLASS="programlisting"
>$sigset-&gt;addset(&amp;POSIX::SIGUSR2);</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>delset</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Removes a signal from the SigSet object.  Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on
failure.</P
><PRE
CLASS="programlisting"
>$sigset-&gt;delset(&amp;POSIX::SIGUSR2);</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>emptyset</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Initializes the SigSet object to be empty.  Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on
failure.</P
><PRE
CLASS="programlisting"
>$sigset-&gt;emptyset();</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>fillset</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Initializes the SigSet object to include all signals.
Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.</P
><PRE
CLASS="programlisting"
>$sigset-&gt;fillset();</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>ismember</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Tests the SigSet object to see whether it contains a specific signal.</P
><PRE
CLASS="programlisting"
>if ($sigset-&gt;ismember(&amp;POSIX::SIGUSR1 ) ){
    print &quot;contains SIGUSR1\n&quot;;
}</PRE
></DD
></DL
><P
CLASS="para"
><B
CLASS="emphasis.bold"
>POSIX::Termios</B
></P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>new</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-24043"
></A
>Creates a new Termios object.  This object will be destroyed automatically
when it is no longer needed.</P
><PRE
CLASS="programlisting"
>$termios = POSIX::Termios-&gt;new;</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>getattr</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Gets terminal control attributes for a given <EM
CLASS="emphasis"
>fd</EM
>, 0 by default.
Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.

Obtain the attributes for standard input:</P
><PRE
CLASS="programlisting"
>$termios-&gt;getattr()</PRE
><P
CLASS="para"
>Obtain the attributes for standard output:</P
><PRE
CLASS="programlisting"
>$termios-&gt;getattr(1)</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>getcc</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Retrieves a value from the <CODE
CLASS="literal"
>c_cc</CODE
> field of a Termios object.
The <CODE
CLASS="literal"
>c_cc</CODE
> field is an array, so an index must be specified.</P
><PRE
CLASS="programlisting"
>$c_cc[1] = $termios-&gt;getcc(&amp;POSIX::VEOF);</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>getcflag</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Retrieves the <CODE
CLASS="literal"
>c_cflag</CODE
> field of a Termios object.</P
><PRE
CLASS="programlisting"
>$c_cflag = $termios-&gt;getcflag;</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>getiflag</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Retrieves the <CODE
CLASS="literal"
>c_iflag</CODE
> field of a Termios object.</P
><PRE
CLASS="programlisting"
>$c_iflag = $termios-&gt;getiflag;</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>getispeed</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Retrieves the input baud rate.</P
><PRE
CLASS="programlisting"
>$ispeed = $termios-&gt;getispeed;</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>getlflag</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Retrieves the <CODE
CLASS="literal"
>c_lflag</CODE
> field of a Termios object.</P
><PRE
CLASS="programlisting"
>$c_lflag = $termios-&gt;getlflag;</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>getoflag</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Retrieves the <CODE
CLASS="literal"
>c_oflag</CODE
> field of a Termios object.</P
><PRE
CLASS="programlisting"
>$c_oflag = $termios-&gt;getoflag;</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>getospeed</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Retrieves the output baud rate.</P
><PRE
CLASS="programlisting"
>$ospeed = $termios-&gt;getospeed;</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>setattr</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Sets terminal control attributes for a given <EM
CLASS="emphasis"
>fd</EM
>.  Returns
<A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.  The following sets attributes immediately for
standard output.</P
><PRE
CLASS="programlisting"
>$termios-&gt;setattr(1, &amp;POSIX::TCSANOW);</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>setcc</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Sets a value in the <CODE
CLASS="literal"
>c_cc</CODE
> field of a Termios object.
The <CODE
CLASS="literal"
>c_cc</CODE
> field is an array, so an index must be specified.</P
><PRE
CLASS="programlisting"
>$termios-&gt;setcc(&amp;POSIX::VEOF, 4);</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>setcflag</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Sets the <CODE
CLASS="literal"
>c_cflag</CODE
> field of a Termios object.</P
><PRE
CLASS="programlisting"
>$termios-&gt;setcflag(&amp;POSIX::CLOCAL);</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>setiflag</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Sets the <CODE
CLASS="literal"
>c_iflag</CODE
> field of a Termios object.</P
><PRE
CLASS="programlisting"
>$termios-&gt;setiflag(&amp;POSIX::BRKINT);</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>setispeed</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Sets the input baud rate.  Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.</P
><PRE
CLASS="programlisting"
>$termios-&gt;setispeed(&amp;POSIX::B9600);</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>setlflag</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Sets the <CODE
CLASS="literal"
>c_lflag</CODE
> field of a Termios object.</P
><PRE
CLASS="programlisting"
>$termios-&gt;setlflag(&amp;POSIX::ECHO);</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>setoflag</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Set the <CODE
CLASS="literal"
>c_oflag</CODE
> field of a Termios object.</P
><PRE
CLASS="programlisting"
>$termios-&gt;setoflag(&amp;POSIX::OPOST);</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>setospeed</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Sets the output baud rate.  Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.</P
><PRE
CLASS="programlisting"
>$termios-&gt;setospeed(&amp;POSIX::B9600);</PRE
></DD
><DT
CLASS="term"
>Baud rate values</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><CODE
CLASS="literal"
>B0 B50 B75 B110 B134 B150 B200 B300 B600 B1200 B1800 B2400 B4800 B9600
B19200 B38400</CODE
></P
></DD
><DT
CLASS="term"
>Terminal interface values</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><CODE
CLASS="literal"
>TCSADRAIN TCSANOW TCOON TCIOFLUSH TCOFLUSH TCION TCIFLUSH TCSAFLUSH
TCIOFF TCOOFF</CODE
></P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_cc</CODE
> index values</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><CODE
CLASS="literal"
>VEOF VEOL VERASE VINTR VKILL VQUIT VSUSP VSTART VSTOP VMIN VTIME NCCS</CODE
></P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_cflag</CODE
> field values</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><CODE
CLASS="literal"
>CLOCAL CREAD CSIZE CS5 CS6 CS7 CS8 CSTOPB HUPCL PARENB PARODD</CODE
></P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_iflag</CODE
> field values</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><CODE
CLASS="literal"
>BRKINT ICRNL IGNBRK IGNCR IGNPAR INLCR INPCK ISTRIP IXOFF IXON PARMRK</CODE
></P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_lflag</CODE
> field values</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><CODE
CLASS="literal"
>ECHO ECHOE ECHOK ECHONL ICANON IEXTEN ISIG NOFLSH TOSTOP</CODE
></P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>c_oflag</CODE
> field values</DT
><DD
CLASS="listitem"
><P
CLASS="para"
><CODE
CLASS="literal"
>OPOST</CODE
></P
></DD
></DL
><P
CLASS="para"
>While these constants are associated with the Termios class, note that they are
actually symbols in the POSIX package. </P
><P
CLASS="para"
>Here's an example of a complete program
for getting unbuffered, single-character input on a POSIX system:<A
CLASS="indexterm"
NAME="AUTOID-24204"
></A
><A
CLASS="indexterm"
NAME="AUTOID-24207"
></A
></P
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
use strict;
$| = 1;
for (1..4) {
    my $got;
    print &quot;gimme: &quot;;
    $got = getone();
    print &quot;--&gt; $got\n&quot;;
}
exit;

BEGIN {
    use POSIX qw(:termios_h);

    my ($term, $oterm, $echo, $noecho, $fd_stdin);

    $fd_stdin = fileno(STDIN);

    $term     = POSIX::Termios-&gt;new();
    $term-&gt;getattr($fd_stdin);
    $oterm    = $term-&gt;getlflag();

    $echo     = ECHO | ECHOK | ICANON;
    $noecho   = $oterm &amp; ~$echo;

    sub cbreak {
        $term-&gt;setlflag($noecho);
        $term-&gt;setcc(VTIME, 1);
        $term-&gt;setattr($fd_stdin, TCSANOW);
    }

    sub cooked {
        $term-&gt;setlflag($oterm);
        $term-&gt;setcc(VTIME, 0);
        $term-&gt;setattr($fd_stdin, TCSANOW);
    }

    sub getone {
        my $key = &quot;&quot;;
        cbreak();
        sysread(STDIN, $key, 1);
        cooked();
        return $key;
    }

}

END { cooked() }</PRE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.67"
>7.2.49.2 Functions</A
></H4
><A
CLASS="indexterm"
NAME="CH07.POSIX2"
></A
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="PERL2-CH-7-TAB-16"
>Table 7.12: Functions</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Function Name</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Definition</TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>_exit</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>_exit</EM
>(2).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>abort</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>abort</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>abs</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_003.htm"
TITLE="abs"
><B
CLASS="xref.cmd"
>abs</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>access</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Determines the accessibility of a file.  Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.

<PRE
CLASS="programlisting"
>if (POSIX::access(&quot;/&quot;, &amp;POSIX::R_OK ) ){
    print &quot;have read permission\n&quot;;
}</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>acos</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>acos</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>alarm</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_005.htm"
TITLE="alarm"
><B
CLASS="xref.cmd"
>alarm</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>asctime</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>asctime</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>asin</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>asin</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>assert</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Similar to the C macro <EM
CLASS="emphasis"
>assert</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>atan</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>atan</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>atan2</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_006.htm"
TITLE="atan2"
><B
CLASS="xref.cmd"
>atan2</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>atexit</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific: use <CODE
CLASS="literal"
>END {}</CODE
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>atof</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>atoi</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>atol</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>bsearch</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Not supplied.  You should probably be using a hash anyway.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>calloc</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>ceil</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>ceil</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>chdir</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_011.htm"
TITLE="chdir"
><B
CLASS="xref.cmd"
>chdir</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>chmod</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_012.htm"
TITLE="chmod"
><B
CLASS="xref.cmd"
>chmod</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>chown</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_015.htm"
TITLE="chown"
><B
CLASS="xref.cmd"
>chown</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>clearerr</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use method <CODE
CLASS="literal"
>FileHandle::clearerr()</CODE
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>clock</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>clock</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>close</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Closes a file.  This uses file descriptors such as those obtained by calling
<CODE
CLASS="literal"
>POSIX::open()</CODE
>.  Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.

<PRE
CLASS="programlisting"
>$fd = POSIX::open(&quot;foo&quot;, &amp;POSIX::O_RDONLY);
POSIX::close($fd);</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>closedir</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_019.htm"
TITLE="closedir"
><B
CLASS="xref.cmd"
>closedir</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>cos</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_021.htm"
TITLE="cos"
><B
CLASS="xref.cmd"
>cos</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>cosh</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>cosh</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>creat</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Creates a new file.  This returns a file descriptor like the ones returned by
<CODE
CLASS="literal"
>POSIX::open()</CODE
>.  Use <CODE
CLASS="literal"
>POSIX::close()</CODE
> to close the file.

<PRE
CLASS="programlisting"
>$fd = POSIX::creat(&quot;foo&quot;, 0611);
POSIX::close($fd);</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>ctermid</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Generates the path name for the controlling terminal.

<PRE
CLASS="programlisting"
>$path = POSIX::ctermid();</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>ctime</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>ctime</EM
>(3)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>cuserid</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Gets the character login name of the user.

<PRE
CLASS="programlisting"
>$name = POSIX::cuserid();</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>difftime</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>difftime</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>div</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>dup</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Similar to the C function <EM
CLASS="emphasis"
>dup</EM
>(2).
Uses file descriptors such as those obtained by calling
<CODE
CLASS="literal"
>POSIX::open()</CODE
>.  Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>dup2</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Similar to the C function <EM
CLASS="emphasis"
>dup2</EM
>(2).
Uses file descriptors such as those obtained by calling
<CODE
CLASS="literal"
>POSIX::open()</CODE
>.  Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>errno</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the value of <EM
CLASS="emphasis"
>errno</EM
>.

<PRE
CLASS="programlisting"
>$errno = POSIX::errno();</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>execl</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use Perl's <A
CLASS="xref"
HREF="ch03_033.htm"
TITLE="exec"
><B
CLASS="xref.cmd"
>exec</B
></A
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>execle</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use Perl's <A
CLASS="xref"
HREF="ch03_033.htm"
TITLE="exec"
><B
CLASS="xref.cmd"
>exec</B
></A
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>execlp</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use Perl's <A
CLASS="xref"
HREF="ch03_033.htm"
TITLE="exec"
><B
CLASS="xref.cmd"
>exec</B
></A
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>execv</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use Perl's <A
CLASS="xref"
HREF="ch03_033.htm"
TITLE="exec"
><B
CLASS="xref.cmd"
>exec</B
></A
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>execve</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use Perl's <A
CLASS="xref"
HREF="ch03_033.htm"
TITLE="exec"
><B
CLASS="xref.cmd"
>exec</B
></A
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>execvp</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use Perl's <A
CLASS="xref"
HREF="ch03_033.htm"
TITLE="exec"
><B
CLASS="xref.cmd"
>exec</B
></A
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>exit</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_035.htm"
TITLE="exit"
><B
CLASS="xref.cmd"
>exit</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>exp</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_036.htm"
TITLE="exp"
><B
CLASS="xref.cmd"
>exp</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fabs</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_003.htm"
TITLE="abs"
><B
CLASS="xref.cmd"
>abs</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fclose</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use method <CODE
CLASS="literal"
>FileHandle::close()</CODE
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fcntl</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_037.htm"
TITLE="fcntl"
><B
CLASS="xref.cmd"
>fcntl</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fdopen</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use method <CODE
CLASS="literal"
>FileHandle::new_from_fd()</CODE
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>feof</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use method <CODE
CLASS="literal"
>FileHandle::eof()</CODE
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>ferror</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use method <CODE
CLASS="literal"
>FileHandle::error()</CODE
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fflush</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use method <CODE
CLASS="literal"
>FileHandle::flush()</CODE
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fgetc</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use method <CODE
CLASS="literal"
>FileHandle::getc()</CODE
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fgetpos</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use method <CODE
CLASS="literal"
>FileHandle::getpos()</CODE
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fgets</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use method <CODE
CLASS="literal"
>FileHandle::gets()</CODE
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fileno</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use method <CODE
CLASS="literal"
>FileHandle::fileno()</CODE
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>floor</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>floor</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fmod</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>fmod</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fopen</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use method <CODE
CLASS="literal"
>FileHandle::open()</CODE
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fork</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_040.htm"
TITLE="fork"
><B
CLASS="xref.cmd"
>fork</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fpathconf</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Retrieves the value of a configurable limit on a file or directory.  This
uses file descriptors such as those obtained by calling <CODE
CLASS="literal"
>POSIX::open()</CODE
>.
Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure. The following will determine the maximum length of the longest allowable
pathname on the filesystem that holds <EM
CLASS="emphasis"
>/tmp/foo</EM
>.

<PRE
CLASS="programlisting"
>$fd = POSIX::open(&quot;/tmp/foo&quot;, &amp;POSIX::O_RDONLY);
$path_max = POSIX::fpathconf($fd, &amp;POSIX::_PC_PATH_MAX);</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fprintf</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use Perl's built-in <A
CLASS="xref"
HREF="ch03_111.htm"
TITLE="printf"
><B
CLASS="xref.cmd"
>printf</B
></A
> function instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fputc</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use Perl's built-in <A
CLASS="xref"
HREF="ch03_110.htm"
TITLE="print"
><B
CLASS="xref.cmd"
>print</B
></A
> function instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fputs</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use Perl's built-in <A
CLASS="xref"
HREF="ch03_110.htm"
TITLE="print"
><B
CLASS="xref.cmd"
>print</B
></A
> function instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fread</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use Perl's built-in <A
CLASS="xref"
HREF="ch03_116.htm"
TITLE="read"
><B
CLASS="xref.cmd"
>read</B
></A
> function instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>free</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>freopen</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use Perl's built-in <A
CLASS="xref"
HREF="ch03_102.htm"
TITLE="open"
><B
CLASS="xref.cmd"
>open</B
></A
> function instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>frexp</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the mantissa and exponent of a floating-point number.

<PRE
CLASS="programlisting"
>($mantissa, $exponent) = POSIX::frexp(3.14);</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fscanf</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use <CODE
CLASS="literal"
>&lt;&gt;</CODE
> and regular expressions instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fseek</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use method <CODE
CLASS="literal"
>FileHandle::seek()</CODE
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fsetpos</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use method <CODE
CLASS="literal"
>FileHandle::setpos()</CODE
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fstat</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Gets file status.  This uses file descriptors such as those obtained by
calling <CODE
CLASS="literal"
>POSIX::open()</CODE
>.  The data returned is identical to the data from
Perl's built-in <A
CLASS="xref"
HREF="ch03_159.htm"
TITLE="stat"
><B
CLASS="xref.cmd"
>stat</B
></A
> function.  Odd how that happens...

<PRE
CLASS="programlisting"
>$fd = POSIX::open(&quot;foo&quot;, &amp;POSIX::O_RDONLY);
@stats = POSIX::fstat($fd);</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>ftell</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use method <CODE
CLASS="literal"
>FileHandle::tell()</CODE
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fwrite</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use Perl's built-in <A
CLASS="xref"
HREF="ch03_110.htm"
TITLE="print"
><B
CLASS="xref.cmd"
>print</B
></A
> function instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>getc</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_043.htm"
TITLE="getc"
><B
CLASS="xref.cmd"
>getc</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>getchar</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns one character from <CODE
CLASS="literal"
>STDIN</CODE
>.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>getcwd</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the name of the current working directory.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>getegid</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the effective group ID (gid).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>getenv</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the value of the specified environment variable.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>geteuid</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the effective user ID (uid).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>getgid</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the user's real group ID (gid).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>getgrgid</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_045.htm"
TITLE="getgrgid"
><B
CLASS="xref.cmd"
>getgrgid</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>getgrnam</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_046.htm"
TITLE="getgrnam"
><B
CLASS="xref.cmd"
>getgrnam</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>getgroups</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the ids of the user's supplementary groups.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>getlogin</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_050.htm"
TITLE="getlogin"
><B
CLASS="xref.cmd"
>getlogin</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>getpgrp</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_055.htm"
TITLE="getpgrp"
><B
CLASS="xref.cmd"
>getpgrp</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>getpid</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the process's ID (pid).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>getppid</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_056.htm"
TITLE="getppid"
><B
CLASS="xref.cmd"
>getppid</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>getpwnam</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_062.htm"
TITLE="getpwnam"
><B
CLASS="xref.cmd"
>getpwnam</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>getpwuid</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_063.htm"
TITLE="getpwuid"
><B
CLASS="xref.cmd"
>getpwuid</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>gets</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns one line from <CODE
CLASS="literal"
>STDIN</CODE
>.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>getuid</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the user's ID (uid).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>gmtime</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_070.htm"
TITLE="gmtime"
><B
CLASS="xref.cmd"
>gmtime</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>isalnum</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function, except that it can apply to a single
character or to a whole string.  (If applied to a whole string, all characters
must be of the indicated category.)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>isalpha</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function, except that it can apply to a single
character or to a whole string.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>isatty</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns a Boolean indicating whether the specified filehandle is connected
to a TTY.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>iscntrl</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function, except that it can apply to a single
character or to a whole string.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>isdigit</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function, except that it can apply to a single
character or to a whole string.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>isgraph</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function, except that it can apply to a single
character or to a whole string.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>islower</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function, except that it can apply to a single
character or to a whole string.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>isprint</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function, except that it can apply to a single
character or to a whole string.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>ispunct</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function, except that it can apply to a single
character or to a whole string.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>isspace</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function, except that it can apply to a single
character or to a whole string.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>isupper</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function, except that it can apply to a single
character or to a whole string.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>isxdigit</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function, except that it can apply to a single
character or to a whole string.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>kill</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_080.htm"
TITLE="kill"
><B
CLASS="xref.cmd"
>kill</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>labs</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use Perl's built-in <A
CLASS="xref"
HREF="ch03_003.htm"
TITLE="abs"
><B
CLASS="xref.cmd"
>abs</B
></A
> function instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>ldexp</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>ldexp</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>ldiv</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use the division operator <CODE
CLASS="literal"
>/</CODE
> 
and Perl's built-in <A
CLASS="xref"
HREF="ch03_076.htm"
TITLE="int"
><B
CLASS="xref.cmd"
>int</B
></A
>
function instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>link</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_085.htm"
TITLE="link"
><B
CLASS="xref.cmd"
>link</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>localeconv</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Gets numeric formatting information.  Returns a reference to a hash
containing the current locale formatting values.

The database for the <CODE
CLASS="literal"
>de</CODE
> (Deutsch or German) locale:</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><PRE
CLASS="programlisting"
>$loc = POSIX::setlocale(&amp;POSIX::LC_ALL, &quot;de&quot;);
print &quot;Locale = $loc\n&quot;;
$lconv = POSIX::localeconv();
print &quot;decimal_point     = &quot;, $lconv-&gt;{decimal_point},     &quot;\n&quot;;
print &quot;thousands_sep     = &quot;, $lconv-&gt;{thousands_sep},     &quot;\n&quot;;
print &quot;grouping          = &quot;, $lconv-&gt;{grouping},          &quot;\n&quot;;
print &quot;int_curr_symbol   = &quot;, $lconv-&gt;{int_curr_symbol},   &quot;\n&quot;;
print &quot;currency_symbol   = &quot;, $lconv-&gt;{currency_symbol},   &quot;\n&quot;;
print &quot;mon_decimal_point = &quot;, $lconv-&gt;{mon_decimal_point}, &quot;\n&quot;;
print &quot;mon_thousands_sep = &quot;, $lconv-&gt;{mon_thousands_sep}, &quot;\n&quot;;
print &quot;mon_grouping      = &quot;, $lconv-&gt;{mon_grouping},      &quot;\n&quot;;
print &quot;positive_sign     = &quot;, $lconv-&gt;{positive_sign},     &quot;\n&quot;;
print &quot;negative_sign     = &quot;, $lconv-&gt;{negative_sign},     &quot;\n&quot;;</PRE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><PRE
CLASS="programlisting"
>print &quot;int_frac_digits   = &quot;, $lconv-&gt;{int_frac_digits},   &quot;\n&quot;;
print &quot;frac_digits       = &quot;, $lconv-&gt;{frac_digits},       &quot;\n&quot;;
print &quot;p_cs_precedes     = &quot;, $lconv-&gt;{p_cs_precedes},     &quot;\n&quot;;
print &quot;p_sep_by_space    = &quot;, $lconv-&gt;{p_sep_by_space},    &quot;\n&quot;;
print &quot;n_cs_precedes     = &quot;, $lconv-&gt;{n_cs_precedes},     &quot;\n&quot;;
print &quot;n_sep_by_space    = &quot;, $lconv-&gt;{n_sep_by_space},    &quot;\n&quot;;
print &quot;p_sign_posn       = &quot;, $lconv-&gt;{p_sign_posn},       &quot;\n&quot;;
print &quot;n_sign_posn       = &quot;, $lconv-&gt;{n_sign_posn},       &quot;\n&quot;;</PRE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>localtime</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_088.htm"
TITLE="localtime"
><B
CLASS="xref.cmd"
>localtime</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>log</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_089.htm"
TITLE="log"
><B
CLASS="xref.cmd"
>log</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>log10</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>log10</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>longjmp</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use Perl's built-in <A
CLASS="xref"
HREF="ch03_027.htm"
TITLE="die"
><B
CLASS="xref.cmd"
>die</B
></A
> function instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>lseek</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Moves the read/write file pointer.  This uses file descriptors such as
those obtained by calling <CODE
CLASS="literal"
>POSIX::open()</CODE
>.

<PRE
CLASS="programlisting"
>$fd = POSIX::open(&quot;foo&quot;, &amp;POSIX::O_RDONLY);
$off_t = POSIX::lseek($fd, 0, &amp;POSIX::SEEK_SET);</PRE
>

Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>malloc</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>mblen</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>mblen</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>mbstowcs</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>mbstowcs</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>mbtowc</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>mbtowc</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>memchr</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use Perl's built-in <A
CLASS="xref"
HREF="ch03_075.htm"
TITLE="index"
><B
CLASS="xref.cmd"
>index</B
></A
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>memcmp</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use <B
CLASS="emphasis.bold"
>eq</B
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>memcpy</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use <B
CLASS="emphasis.bold"
>=</B
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>memmove</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use <B
CLASS="emphasis.bold"
>=</B
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>memset</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use <B
CLASS="emphasis.bold"
>x</B
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>mkdir</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_092.htm"
TITLE="mkdir"
><B
CLASS="xref.cmd"
>mkdir</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>mkfifo</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Similar to the C function <EM
CLASS="emphasis"
>mkfifo</EM
>(2).
Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>mktime</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Converts date/time information to a calendar time.  Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.
Synopsis:</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><PRE
CLASS="programlisting"
>mktime(<CODE
CLASS="replaceable"
><I
>sec</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>min</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>hour</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>mday</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>mon</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>year</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>wday</I
></CODE
> = 0,
                                     <CODE
CLASS="replaceable"
><I
>yday</I
></CODE
> = 0, <CODE
CLASS="replaceable"
><I
>isdst</I
></CODE
> = 0)</PRE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The month (<CODE
CLASS="replaceable"
><I
>mon</I
></CODE
>), weekday (<CODE
CLASS="replaceable"
><I
>wday</I
></CODE
>), and yearday
(<CODE
CLASS="replaceable"
><I
>yday</I
></CODE
>) begin at zero.
That is, January is 0, not 1; Sunday is 0, not 1; January 1st is 0, not 1.  The
year (<CODE
CLASS="literal"
>year</CODE
>) is given in years since 1900.  That is, the year
1995 is 95; the
year 2001 is 101.  Consult your system's <EM
CLASS="emphasis"
>mktime</EM
>(3) manpage for details
about these and the other arguments.

Calendar time for December 12, 1995, at 10:30 am.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><PRE
CLASS="programlisting"
>$time_t = POSIX::mktime(0, 30, 10, 12, 11, 95);
print &quot;Date = &quot;, POSIX::ctime($time_t);</PRE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>modf</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the integral and fractional parts of a floating-point number.

<PRE
CLASS="programlisting"
>($fractional, $integral) = POSIX::modf(3.14);</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>nice</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Similar to the C function <EM
CLASS="emphasis"
>nice</EM
>(3).
Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>offsetof</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>open</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Opens a file for reading or writing.  This returns file descriptors, not
Perl filehandles.  Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.
Use <CODE
CLASS="literal"
>POSIX::close()</CODE
> to close the file.

Open a file read-only:

<PRE
CLASS="programlisting"
>$fd = POSIX::open(&quot;foo&quot;);</PRE
>

Open a file for reading and writing:

<PRE
CLASS="programlisting"
>$fd = POSIX::open(&quot;foo&quot;, &amp;POSIX::O_RDWR);</PRE
>

Open a file for writing, with truncation:

<PRE
CLASS="programlisting"
>$fd = POSIX::open(&quot;foo&quot;, &amp;POSIX::O_WRONLY | &amp;POSIX::O_TRUNC);</PRE
>

Create a new file with mode 0644; set up the file for writing:

<PRE
CLASS="programlisting"
>$fd = POSIX::open(&quot;foo&quot;, &amp;POSIX::O_CREAT | &amp;POSIX::O_WRONLY, 
        0644);</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>opendir</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Opens a directory for reading.  Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.

<PRE
CLASS="programlisting"
>$dir = POSIX::opendir(&quot;/tmp&quot;);
@files = POSIX::readdir($dir);
POSIX::closedir($dir);</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>pathconf</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Retrieves the value of a configurable limit on a file or directory.
Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.
The following will determine the maximum length of the longest allowable
pathname on the filesystem that holds <EM
CLASS="emphasis"
>/tmp</EM
>:

<PRE
CLASS="programlisting"
>$path_max = POSIX::pathconf(&quot;/tmp&quot;, &amp;POSIX::_PC_PATH_MAX);</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>pause</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Similar to the C function <EM
CLASS="emphasis"
>pause</EM
>(3).
Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>perror</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>perror</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>pipe</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Creates an interprocess channel.  Returns file descriptors like those
returned by <CODE
CLASS="literal"
>POSIX::open()</CODE
>.

<PRE
CLASS="programlisting"
>($fd0, $fd1) = POSIX::pipe();
POSIX::write($fd0, &quot;hello&quot;, 5);
POSIX::read($fd1, $buf, 5);</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>pow</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Computes <CODE
CLASS="literal"
>$x</CODE
> raised to the power <CODE
CLASS="literal"
>$exponent</CODE
>.

<PRE
CLASS="programlisting"
>$ret = POSIX::pow($x, $exponent);</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>printf</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Prints the specified arguments to <CODE
CLASS="literal"
>STDOUT</CODE
>.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>putc</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use Perl's built-in <A
CLASS="xref"
HREF="ch03_110.htm"
TITLE="print"
><B
CLASS="xref.cmd"
>print</B
></A
> function instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>putchar</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use Perl's built-in <A
CLASS="xref"
HREF="ch03_110.htm"
TITLE="print"
><B
CLASS="xref.cmd"
>print</B
></A
> function instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>puts</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use Perl's built-in <A
CLASS="xref"
HREF="ch03_110.htm"
TITLE="print"
><B
CLASS="xref.cmd"
>print</B
></A
> function instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>qsort</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use Perl's built-in <A
CLASS="xref"
HREF="ch03_153.htm"
TITLE="sort"
><B
CLASS="xref.cmd"
>sort</B
></A
> function instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>raise</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Sends the specified signal to the current process.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>rand</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Non-portable; use Perl's built-in <A
CLASS="xref"
HREF="ch03_115.htm"
TITLE="rand"
><B
CLASS="xref.cmd"
>rand</B
></A
> function instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>read</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Reads from a file.  This uses file descriptors such as those obtained by
calling <CODE
CLASS="literal"
>POSIX::open()</CODE
>.  If the buffer <CODE
CLASS="literal"
>$buf</CODE
> is not large
enough for the read, then Perl will extend it to make room for the request.
Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.

<PRE
CLASS="programlisting"
>$fd = POSIX::open(&quot;foo&quot;, &amp;POSIX::O_RDONLY);
$bytes = POSIX::read($fd, $buf, 3);</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>readdir</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_117.htm"
TITLE="readdir"
><B
CLASS="xref.cmd"
>readdir</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>realloc</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>remove</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_181.htm"
TITLE="unlink"
><B
CLASS="xref.cmd"
>unlink</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>rename</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_122.htm"
TITLE="rename"
><B
CLASS="xref.cmd"
>rename</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>rewind</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Seeks to the beginning of the file.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>rewinddir</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_127.htm"
TITLE="rewinddir"
><B
CLASS="xref.cmd"
>rewinddir</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>rmdir</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_129.htm"
TITLE="rmdir"
><B
CLASS="xref.cmd"
>rmdir</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>scanf</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use <CODE
CLASS="literal"
>&lt;&gt;</CODE
> and regular expressions instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>setgid</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Sets the real group id for this process, like assigning to the
special variable <B
CLASS="emphasis.bold"
>$(</B
>.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>setjmp</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use <CODE
CLASS="literal"
>eval {}</CODE
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>setlocale</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Modifies and queries program's locale.

The following will set the traditional UNIX system locale behavior.

<PRE
CLASS="programlisting"
>$loc = POSIX::setlocale(&amp;POSIX::LC_ALL, &quot;C&quot;);</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>setpgid</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Similar to the C function <EM
CLASS="emphasis"
>setpgid</EM
>(2).
Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>setsid</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>setsid</EM
>(8).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>setuid</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Sets the real user ID for this process, like assigning to the
special variable <B
CLASS="emphasis.bold"
>$&lt;</B
>.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>sigaction</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Detailed signal management.  This uses POSIX::SigAction objects for the
<CODE
CLASS="literal"
>$action</CODE
> and <CODE
CLASS="literal"
>$oldaction</CODE
> arguments.  Consult your system's
<EM
CLASS="emphasis"
>sigaction</EM
>(3) manpage for details.
Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.

<PRE
CLASS="programlisting"
>POSIX::sigaction($sig, $action, $oldaction)</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>siglongjmp</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use Perl's built-in <A
CLASS="xref"
HREF="ch03_027.htm"
TITLE="die"
><B
CLASS="xref.cmd"
>die</B
></A
> function instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>sigpending</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Examine signals that are blocked and pending.  This uses POSIX::SigSet
objects for the <CODE
CLASS="literal"
>$sigset</CODE
> argument.  Consult your system's
<EM
CLASS="emphasis"
>sigpending</EM
>(2) manpage for details.
Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.

<PRE
CLASS="programlisting"
>POSIX::sigpending($sigset)</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>sigprocmask</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Changes and/or examines this process's signal mask.  This uses
POSIX::SigSet objects for the <CODE
CLASS="literal"
>$sigset</CODE
> and <CODE
CLASS="literal"
>$oldsigset</CODE
>
arguments.  Consult your system's
<EM
CLASS="emphasis"
>sigprocmask</EM
>(2) manpage for details.
Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.

<PRE
CLASS="programlisting"
>POSIX::sigprocmask($how, $sigset, $oldsigset)</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>sigsetjmp</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use <CODE
CLASS="literal"
>eval {}</CODE
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>sigsuspend</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Install a signal mask and suspend process until signal arrives.  This uses
POSIX::SigSet objects for the <CODE
CLASS="literal"
>$signal_mask</CODE
> argument.
Consult your system's <EM
CLASS="emphasis"
>sigsuspend</EM
>(2) manpage for details.
Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.

<PRE
CLASS="programlisting"
>POSIX::sigsuspend($signal_mask)</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>sin</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_149.htm"
TITLE="sin"
><B
CLASS="xref.cmd"
>sin</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>sinh</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>sinh</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>sleep</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_150.htm"
TITLE="sleep"
><B
CLASS="xref.cmd"
>sleep</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>sprintf</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_156.htm"
TITLE="sprintf"
><B
CLASS="xref.cmd"
>sprintf</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>sqrt</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_157.htm"
TITLE="sqrt"
><B
CLASS="xref.cmd"
>sqrt</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>srand</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_158.htm"
TITLE="srand"
><B
CLASS="xref.cmd"
>srand</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>sscanf</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use regular expressions instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>stat</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_159.htm"
TITLE="stat"
><B
CLASS="xref.cmd"
>stat</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>strcat</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use <CODE
CLASS="literal"
>.=</CODE
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>strchr</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use <A
CLASS="xref"
HREF="ch03_075.htm"
TITLE="index"
><B
CLASS="xref.cmd"
>index</B
></A
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>strcmp</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use <B
CLASS="emphasis.bold"
>eq</B
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>strcoll</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>strcoll</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>strcpy</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use <CODE
CLASS="literal"
>=</CODE
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>strcspn</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use regular expressions instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>strerror</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the error string for the specified <EM
CLASS="emphasis"
>errno</EM
>.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>strftime</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Converts date and time information to string.  Returns the string.

<PRE
CLASS="programlisting"
>strftime(<CODE
CLASS="replaceable"
><I
>fmt</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>sec</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>min</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>hour</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>mday</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>mon</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>year</I
></CODE
>, 
            <CODE
CLASS="replaceable"
><I
>wday</I
></CODE
> = 0, <CODE
CLASS="replaceable"
><I
>yday</I
></CODE
> = 0, <CODE
CLASS="replaceable"
><I
>isdst</I
></CODE
> = 0)</PRE
>

The month (<CODE
CLASS="replaceable"
><I
>mon</I
></CODE
>), weekday (<CODE
CLASS="replaceable"
><I
>wday</I
></CODE
>), and yearday (<CODE
CLASS="replaceable"
><I
>yday</I
></CODE
>)
begin at zero.  That is, January is 0, not 1; Sunday is 0, not 1;
January 1st is 0, not 1.  The year (<CODE
CLASS="replaceable"
><I
>year</I
></CODE
>) is given in years since
1900.  That is, the year 1995 is 95; the year 2001 is 101.  Consult your
system's <EM
CLASS="emphasis"
>strftime</EM
>(3) manpage for details about these and the
other arguments.

The string for Tuesday, December 12, 1995:

<PRE
CLASS="programlisting"
>$str = POSIX::strftime(&quot;%A, %B %d, %Y&quot;, 0, 0, 0, 12, 
                        11, 95, 2);
print &quot;$str\n&quot;;</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>strlen</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use <A
CLASS="xref"
HREF="ch03_084.htm"
TITLE="length"
><B
CLASS="xref.cmd"
>length</B
></A
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>strncat</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use <CODE
CLASS="literal"
>.=</CODE
> and/or <A
CLASS="xref"
HREF="ch03_162.htm"
TITLE="substr"
><B
CLASS="xref.cmd"
>substr</B
></A
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>strncmp</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use <B
CLASS="emphasis.bold"
>eq</B
> and/or <A
CLASS="xref"
HREF="ch03_162.htm"
TITLE="substr"
><B
CLASS="xref.cmd"
>substr</B
></A
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>strncpy</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use <CODE
CLASS="literal"
>=</CODE
> and/or <A
CLASS="xref"
HREF="ch03_162.htm"
TITLE="substr"
><B
CLASS="xref.cmd"
>substr</B
></A
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>strpbrk</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>strrchr</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific; use <A
CLASS="xref"
HREF="ch03_128.htm"
TITLE="rindex"
><B
CLASS="xref.cmd"
>rindex</B
></A
> and/or <A
CLASS="xref"
HREF="ch03_162.htm"
TITLE="substr"
><B
CLASS="xref.cmd"
>substr</B
></A
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>strspn</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>strstr</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_075.htm"
TITLE="index"
><B
CLASS="xref.cmd"
>index</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>strtod</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>strtok</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>strtol</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>strtoul</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>strxfrm</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>String transformation.  Returns the transformed string.

<PRE
CLASS="programlisting"
>$dst = POSIX::strxfrm($src);</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>sysconf</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Retrieves values of system configurable variables.
Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.
The following will get the machine's clock speed.

<PRE
CLASS="programlisting"
>$clock_ticks = POSIX::sysconf(&amp;POSIX::_SC_CLK_TCK);</PRE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>system</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_167.htm"
TITLE="system"
><B
CLASS="xref.cmd"
>system</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>tan</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>tan</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>tanh</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>tanh</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>tcdrain</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Similar to the C function <EM
CLASS="emphasis"
>tcdrain</EM
>(3).
Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>tcflow</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Similar to the C function <EM
CLASS="emphasis"
>tcflow</EM
>(3).
Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>tcflush</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Similar to the C function <EM
CLASS="emphasis"
>tcflush</EM
>(3).
Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>tcgetpgrp</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>tcgetpgrp</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>tcsendbreak</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Similar to the C function <EM
CLASS="emphasis"
>tcsendbreak</EM
>(3).
Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>tcsetpgrp</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Similar to the C function <EM
CLASS="emphasis"
>tcsetpgrp</EM
>(3).
Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>time</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_173.htm"
TITLE="time"
><B
CLASS="xref.cmd"
>time</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>times</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns elapsed realtime since some point in the past
(such as system startup), user and system times for this process, and user
and system times for child processes.  All times are returned in clock
ticks.

<PRE
CLASS="programlisting"
>($realtime, $user, $system, $cuser, $csystem) = POSIX::times();</PRE
>

Note: Perl's built-in <A
CLASS="xref"
HREF="ch03_174.htm"
TITLE="times"
><B
CLASS="xref.cmd"
>times</B
></A
> function returns four values, measured in
seconds.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>tmpfile</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use method <CODE
CLASS="literal"
>FileHandle::new_tmpfile()</CODE
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>tmpnam</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns a name for a temporary file.

<PRE
CLASS="programlisting"
>$tmpfile = POSIX::tmpnam();</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>tolower</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_082.htm"
TITLE="lc"
><B
CLASS="xref.cmd"
>lc</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>toupper</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_177.htm"
TITLE="uc"
><B
CLASS="xref.cmd"
>uc</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>ttyname</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>ttyname</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>tzname</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Retrieves the time conversion information from the <CODE
CLASS="literal"
>tzname</CODE
> variable.

<PRE
CLASS="programlisting"
>POSIX::tzset();
($std, $dst) = POSIX::tzname();</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>tzset</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>tzset</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>umask</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_179.htm"
TITLE="umask"
><B
CLASS="xref.cmd"
>umask</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>uname</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Gets name of current operating system.

<PRE
CLASS="programlisting"
>($sysname, $nodename, $release, 
     $version, $machine) = POSIX::uname();</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>ungetc</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Use method <CODE
CLASS="literal"
>FileHandle::ungetc()</CODE
> instead.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>unlink</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_181.htm"
TITLE="unlink"
><B
CLASS="xref.cmd"
>unlink</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>utime</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_186.htm"
TITLE="utime"
><B
CLASS="xref.cmd"
>utime</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>vfprintf</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>vprintf</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>vsprintf</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>C-specific.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>wait</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to Perl's built-in <A
CLASS="xref"
HREF="ch03_189.htm"
TITLE="wait"
><B
CLASS="xref.cmd"
>wait</B
></A
> function.</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>waitpid</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Wait for a child process to change state.  This is identical 
to Perl's built-in <A
CLASS="xref"
HREF="ch03_190.htm"
TITLE="waitpid"
><B
CLASS="xref.cmd"
>waitpid</B
></A
> function.

<PRE
CLASS="programlisting"
>$pid = POSIX::waitpid(-1, &amp;POSIX::WNOHANG);
print &quot;status = &quot;, ($? / 256), &quot;\n&quot;;</PRE
>&#13;</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>wcstombs</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>wcstombs</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>wctomb</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Identical to the C function <EM
CLASS="emphasis"
>wctomb</EM
>(3).</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>write</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Writes to a file.  Uses file descriptors such as those obtained by
calling <CODE
CLASS="literal"
>POSIX::open()</CODE
>.  Returns <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> on failure.

<PRE
CLASS="programlisting"
>$fd = POSIX::open(&quot;foo&quot;, &amp;POSIX::O_WRONLY);
$buf = &quot;hello&quot;;
$bytes = POSIX::write($b, $buf, 5);</PRE
>&#13;</P
></TD
></TR
></TBODY
><A
CLASS="indexterm"
NAME="AUTOID-25656"
></A
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.68"
>7.2.49.3 Pathname constants</A
></H4
><TABLE
CLASS="simplelist"
BORDER="0"
><A
CLASS="indexterm"
NAME="AUTOID-25660"
></A
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>_PC_CHOWN_RESTRICTED</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_PC_LINK_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_PC_MAX_CANON</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>_PC_MAX_INPUT</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_PC_NAME_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_PC_NO_TRUNC</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>_PC_PATH_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_PC_PIPE_BUF</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_PC_VDISABLE</CODE
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.69"
>7.2.49.4 POSIX constants</A
></H4
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>_POSIX_ARG_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_POSIX_CHILD_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_POSIX_CHOWN_RESTRICTED</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>_POSIX_JOB_CONTROL</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_POSIX_LINK_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_POSIX_MAX_CANON</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>_POSIX_MAX_INPUT</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_POSIX_NAME_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_POSIX_NGROUPS_MAX</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>_POSIX_NO_TRUNC</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_POSIX_OPEN_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_POSIX_PATH_MAX</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>_POSIX_PIPE_BUF</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_POSIX_SAVED_IDS</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_POSIX_SSIZE_MAX</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>_POSIX_STREAM_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_POSIX_TZNAME_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_POSIX_VDISABLE</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>_POSIX_VERSION</CODE
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.70"
>7.2.49.5 System configuration</A
></H4
><TABLE
CLASS="simplelist"
BORDER="0"
><TD
CLASS="member"
><CODE
CLASS="literal"
>_SC_ARG_MAX</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>_SC_CHILD_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_SC_CLK_TCK</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_SC_JOB_CONTROL</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_SC_NGROUPS_MAX</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>_SC_OPEN_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_SC_SAVED_IDS</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_SC_STREAM_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>_SC_TZNAME_MAX</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>_SC_VERSION</CODE
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.71"
>7.2.49.6 Error constants</A
></H4
><TABLE
CLASS="simplelist"
BORDER="0"
><TD
CLASS="member"
><CODE
CLASS="literal"
>E2BIG</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>EACCES</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>EAGAIN</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>EBADF</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>EBUSY</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>ECHILD</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>EDEADLK</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>EDOM</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>EEXIST</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>EFAUL</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>EFBIG</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>EINTR</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>EINVAL</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>EIO</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>EISDIR</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>EMFILE</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>EMLINK</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>ENAMETOOLONG</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>ENFILE</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>ENODE</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>ENOENT</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>ENOEXEC</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>ENOLCK</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>ENOMEM</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>ENOSPC</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>ENOSYS</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>ENOTDIR</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>ENOTEMPTY</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>ENOTTY</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>ENXIO</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>EPERM</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>EPIPE</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>ERANGE</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>EROFS</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>ESPIPE</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>ESRCH</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>EXDEV</CODE
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.72"
>7.2.49.7 File control constants</A
></H4
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>FD_CLOEXEC</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>F_DUPFD</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>F_GETFD</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>F_GETFL</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>F_GETLK</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>F_OK</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>F_RDLCK</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>F_SETFD</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>F_SETFL</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>F_SETLK</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>F_SETLKW</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>F_UNLCK</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>F_WRLCK</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>O_ACCMODE</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>O_APPEND</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>O_CREAT</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>O_EXCL</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>O_NOCTTY</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>O_NONBLOCK</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>O_RDONLY</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>O_RDWR</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>O_TRUNC</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>O_WRONLY</CODE
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.73"
>7.2.49.8 Floating-point constants</A
></H4
><TABLE
CLASS="simplelist"
BORDER="0"
><TD
CLASS="member"
><CODE
CLASS="literal"
>DBL_DIG</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>DBL_EPSILON</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>DBL_MANT_DIG</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>DBL_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>DBL_MAX_10_EXP</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>DBL_MAX_EXP</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>DBL_MIN</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>DBL_MIN_10_EXP</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>DBL_MIN_EXP</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>FLT_DIG</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>FLT_EPSILON</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>FLT_MANT_DIG</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>FLT_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>FLT_MAX_10_EXP</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>FLT_MAX_EXP</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>FLT_MIN</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>FLT_MIN_10_EXP</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>FLT_MIN_EXP</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>FLT_RADIX</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>FLT_ROUNDS</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>LDBL_DIG</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>LDBL_EPSILON</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>LDBL_MANT_DIG</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>LDBL_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>LDBL_MAX_10_EXP</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>LDBL_MAX_EXP</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>LDBL_MIN</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>LDBL_MIN_10_EXP</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>LDBL_MIN_EXP</CODE
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.74"
>7.2.49.9 Limit constants</A
></H4
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>ARG_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>CHAR_BIT</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>CHAR_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>CHAR_MIN</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>CHILD_MAX</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>INT_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>INT_MIN</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>LINK_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>LONG_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>LONG_MIN</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>MAX_CANON</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>MAX_INPUT</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>MB_LEN_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>NAME_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>NGROUPS_MAX</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>OPEN_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>PATH_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>PIPE_BUF</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SCHAR_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SCHAR_MIN</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>SHRT_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SHRT_MIN</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SSIZE_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>STREAM_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>TZNAME_MAX</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>UCHAR_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>UINT_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>ULONG_MAX USHRT_MAX</CODE
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.75"
>7.2.49.10 Locale constants</A
></H4
><TABLE
CLASS="simplelist"
BORDER="0"
><TD
CLASS="member"
><CODE
CLASS="literal"
>LC_ALL</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>LC_COLLATE</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>LC_CTYPE</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>LC_MONETARY</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>LC_NUMERIC</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>LC_TIME</CODE
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.76"
>7.2.49.11 Math constants</A
></H4
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>HUGE_VAL</CODE
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.77"
>7.2.49.12 Signal constants</A
></H4
><TABLE
CLASS="simplelist"
BORDER="0"
><TD
CLASS="member"
><CODE
CLASS="literal"
>SA_NOCLDSTOP</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIGABRT</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIGALRM</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIGCHLD</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIGCONT</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIGFPE</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIGHUP</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIGILL</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIGINT</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIGKILL</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIGPIPE</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIGQUIT</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIGSEGV</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIGSTOP</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIGTERM</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIGTSTP</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIGTTIN</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIGTTOU</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIGUSR1</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIGUSR2</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIG_BLOCK</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIG_DFL</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIG_ERR</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIG_IGN</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIG_SETMASK</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SIG_UNBLOCK</CODE
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.78"
>7.2.49.13 Stat constants</A
></H4
><TABLE
CLASS="simplelist"
BORDER="0"
><TD
CLASS="member"
><CODE
CLASS="literal"
>S_IRGRP</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>S_IROTH</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>S_IRUSR</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>S_IRWXG</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>S_IRWXO</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>S_IRWXU</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>S_ISGID</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>S_ISUID</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>S_IWGRP</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>S_IWOTH</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>S_IWUSR</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>S_IXGRP</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>S_IXOTH</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>S_IXUSR</CODE
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.79"
>7.2.49.14 Stat macros</A
></H4
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>S_ISBLK</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>S_ISCHR</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>S_ISDIR </CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>S_ISFIFO</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>S_ISREG</CODE
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.80"
>7.2.49.15 Stdlib constants</A
></H4
><TABLE
CLASS="simplelist"
BORDER="0"
><TD
CLASS="member"
><CODE
CLASS="literal"
>EXIT_FAILURE</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>EXIT_SUCCESS</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>MB_CUR_MAX</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>RAND_MAX</CODE
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.81"
>7.2.49.16 Stdio constants</A
></H4
><TABLE
CLASS="simplelist"
BORDER="0"
><TD
CLASS="member"
><CODE
CLASS="literal"
>BUFSIZ</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>EOF</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>FILENAME_MAX</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>L_ctermid</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>L_cuserid</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>L_tmpname</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>TMP_MAX</CODE
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.82"
>7.2.49.17 Time constants</A
></H4
><TABLE
CLASS="simplelist"
BORDER="0"
><TD
CLASS="member"
><CODE
CLASS="literal"
>CLK_TCK</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>CLOCKS_PER_SEC</CODE
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.83"
>7.2.49.18 Unistd constants</A
></H4
><TABLE
CLASS="simplelist"
BORDER="0"
><TD
CLASS="member"
><CODE
CLASS="literal"
>R_OK</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SEEK_CUR</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>SEEK_END</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>SEEK_SET</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>STDIN_FILENO</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>STDOUT_FILENO</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>STRERR_FILENO</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>W_OK</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>X_OK</CODE
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.84"
>7.2.49.19 Wait constants</A
></H4
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>WNOHANG</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>WUNTRACED</CODE
></TD
></TR
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.85"
>7.2.49.20 Wait macros</A
></H4
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>WIFEXITED</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>WEXITSTATUS</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>WIFSIGNALED</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>WTERMSIG</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>WIFSTOPPED</CODE
></TD
><TD
CLASS="member"
><CODE
CLASS="literal"
>WSTOPSIG</CODE
></TD
></TR
></TABLE
><A
CLASS="indexterm"
NAME="AUTOID-26187"
></A
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_048.htm"
TITLE="7.2.48 overload&nbsp;- Overload Perl's Mathematical Operations"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.48 overload&nbsp;- Overload Perl's Mathematical Operations"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_050.htm"
TITLE="7.2.50 Pod::Text&nbsp;- Convert POD Data to Formatted ASCII Text"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.50 Pod::Text&nbsp;- Convert POD Data to Formatted ASCII Text"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.2.48 overload&nbsp;- Overload Perl's Mathematical Operations</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.2.50 Pod::Text&nbsp;- Convert POD Data to Formatted ASCII Text</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
