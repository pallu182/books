<HTML
><HEAD
>
<TITLE>[Chapter 3] 3.2.105 pack</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:51:58Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_02.htm"
TITLE="3.2 Perl Functions in Alphabetical Order"><LINK
REL="prev"
HREF="ch03_104.htm"
TITLE="3.2.104 ord"><LINK
REL="next"
HREF="ch03_106.htm"
TITLE="3.2.106 package"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_104.htm"
TITLE="3.2.104 ord"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.104 ord"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. Functions"
>Chapter 3<BR>Functions</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_106.htm"
TITLE="3.2.106 package"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.106 package"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CMD-PACK"
>3.2.105 pack</A
></H3
><PRE
CLASS="programlisting"
>pack <CODE
CLASS="replaceable"
><I
>TEMPLATE</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
></PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11625"
></A
><A
CLASS="indexterm"
NAME="CH03.PACK1"
></A
><A
CLASS="indexterm"
NAME="CH03.PACK2"
></A
>This function takes a list of values and packs it into a
binary structure, returning the string containing the structure.
The <CODE
CLASS="replaceable"
><I
>TEMPLATE</I
></CODE
> is a sequence of characters that gives the order and type
of values, as follows:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Character</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Meaning</TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>a</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>An ASCII string, will be null padded</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>A</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>An ASCII string, will be space padded</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>b</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>A bit string, low-to-high order (like <B
CLASS="emphasis.bold"
>vec</B
>())</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>B</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>A bit string, high-to-low order</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>c</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>A signed char value</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>C</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>An unsigned char value</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>d</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>A double-precision float in the native format</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>f</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>A single-precision float in the native format</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>h</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>A hexadecimal string, low nybble first</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>H</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>A hexadecimal string, high nybble first</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>i</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>A signed integer value</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>I</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>An unsigned integer value</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>l</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>A signed long value</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>L</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>An unsigned long value   <EM
CLASS="emphasis"
>(continued)</EM
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>n</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>A short in &quot;network&quot; (big-endian) order</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>N</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>A long in &quot;network&quot; (big-endian) order</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>p</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>A pointer to a string</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>P</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>A pointer to a structure (fixed-length string)</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>s</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>A signed short value</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>S</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>An unsigned short value</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>v</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>A short in &quot;VAX&quot; (little-endian) order</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>V</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>A long in &quot;VAX&quot; (little-endian) order</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>u</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>A uuencoded string</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>x</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>A null byte</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>X</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Back up a byte</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>@</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Null-fill to absolute position</TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Each character may optionally be followed by a number which gives a repeat
count.  Together the character and the repeat count make a field specifier.
Field specifiers may be separated by whitespace, which will be ignored.  With
all types except <CODE
CLASS="literal"
>&quot;a&quot;</CODE
> and <CODE
CLASS="literal"
>&quot;A&quot;</CODE
>, the <A
CLASS="xref"
HREF="ch03_105.htm"
TITLE="pack"
><B
CLASS="xref.cmd"
>pack</B
></A
> function will gobble up that many values from
the <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
>.  Saying <CODE
CLASS="literal"
>&quot;*&quot;</CODE
> for the
repeat count means to use however many items are left.  The
<CODE
CLASS="literal"
>&quot;a&quot;</CODE
> and <CODE
CLASS="literal"
>&quot;A&quot;</CODE
> types gobble just one value,
but pack it as a string of length <EM
CLASS="emphasis"
>count</EM
>, padding with nulls
or spaces as necessary.  (When unpacking, <CODE
CLASS="literal"
>&quot;A&quot;</CODE
> strips trailing
spaces and nulls, but <CODE
CLASS="literal"
>&quot;a&quot;</CODE
> does not.)  Real numbers (floats
and doubles) are in the native machine format only; due to the multiplicity of
floating formats around, and the lack of a standard network representation, no
facility for interchange has been made.  This means that packed floating-point
data written on one machine may not be readable on another&nbsp;- even if both
use IEEE floating-point arithmetic (as the endian-ness of the memory
representation is not part of the IEEE spec).  Also, Perl uses doubles
internally for all numeric calculation, and converting from double to float to
double will lose precision; that is, <CODE
CLASS="literal"
>unpack(&quot;f&quot;,
pack(&quot;f&quot;,$num))</CODE
> will not in general equal <CODE
CLASS="literal"
>$num</CODE
>.</P
><P
CLASS="para"
>This first pair of examples packs numeric values into bytes:</P
><PRE
CLASS="programlisting"
>$out = pack &quot;cccc&quot;, 65, 66, 67, 68;      # $out eq &quot;ABCD&quot;
$out = pack &quot;c4&quot;, 65, 66, 67, 68;        # same thing</PRE
><P
CLASS="para"
>This does a similar thing, with a couple of nulls thrown in:</P
><PRE
CLASS="programlisting"
>$out = pack &quot;ccxxcc&quot;, 65, 66, 67, 68;    # $out eq &quot;AB\0\0CD&quot;</PRE
><P
CLASS="para"
>Packing your shorts doesn't imply that you're portable:</P
><PRE
CLASS="programlisting"
>$out = pack &quot;s2&quot;, 1, 2;    # &quot;\1\0\2\0&quot; on little-endian
                           # &quot;\0\1\0\2&quot; on big-endian</PRE
><P
CLASS="para"
>On binary and hex packs, the count refers to the number of bits or nybbles,
not the number of bytes produced:</P
><PRE
CLASS="programlisting"
>$out = pack &quot;B32&quot;, &quot;01010000011001010111001001101100&quot;;
$out = pack &quot;H8&quot;, &quot;5065726c&quot;;    # both produce &quot;Perl&quot;</PRE
><P
CLASS="para"
>The length on an <CODE
CLASS="literal"
>&quot;a&quot;</CODE
> field applies only to one string:</P
><PRE
CLASS="programlisting"
>$out = pack &quot;a4&quot;, &quot;abcd&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;;      # &quot;abcd&quot;</PRE
><P
CLASS="para"
>To get around that limitation, use multiple specifiers:</P
><PRE
CLASS="programlisting"
>$out = pack &quot;aaaa&quot;,  &quot;abcd&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;;   # &quot;axyz&quot;
$out = pack &quot;a&quot; x 4, &quot;abcd&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;;   # &quot;axyz&quot;</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>&quot;a&quot;</CODE
> format does null filling:</P
><PRE
CLASS="programlisting"
>$out = pack &quot;a14&quot;, &quot;abcdefg&quot;;   # &quot;abcdefg\0\0\0\0\0\0\0&quot;</PRE
><P
CLASS="para"
>This template packs a C <CODE
CLASS="literal"
>struct tm</CODE
> record (at least on some
systems):</P
><PRE
CLASS="programlisting"
>$out = pack &quot;i9pl&quot;, gmtime, $tz, $toff;</PRE
><P
CLASS="para"
>The same template may generally also be used in the <A
CLASS="xref"
HREF="ch03_182.htm"
TITLE="unpack"
><B
CLASS="xref.cmd"
>unpack</B
></A
> function.  If you want to join variable length
fields with a delimiter, use the <A
CLASS="xref"
HREF="ch03_078.htm"
TITLE="join"
><B
CLASS="xref.cmd"
>join</B
></A
>
function.</P
><P
CLASS="para"
>Note that, although all of our examples use literal strings as templates,
there is no reason you couldn't pull in your templates from a disk file.
You could, in fact, build an entire relational database system around this
function.<A
CLASS="indexterm"
NAME="AUTOID-11784"
></A
><A
CLASS="indexterm"
NAME="AUTOID-11785"
></A
></P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_104.htm"
TITLE="3.2.104 ord"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.104 ord"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_106.htm"
TITLE="3.2.106 package"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.106 package"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.2.104 ord</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.2.106 package</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
