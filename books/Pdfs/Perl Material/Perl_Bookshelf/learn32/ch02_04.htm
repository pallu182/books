<HTML
><HEAD
>
<TITLE>[Chapter 2] 2.4 Scalar Operators</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl on Win32 Systems"><META
NAME="DC.creator"
CONTENT="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:31:59Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-324-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Scalar Data"><LINK
REL="prev"
HREF="ch02_03.htm"
TITLE="2.3 Strings"><LINK
REL="next"
HREF="ch02_05.htm"
TITLE="2.5 Scalar Variables"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl on Win32 Systems"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl on Win32 Systems"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/wsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_03.htm"
TITLE="2.3 Strings"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.3 Strings"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. Scalar Data"
>Chapter 2<BR>Scalar Data</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_05.htm"
TITLE="2.5 Scalar Variables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.5 Scalar Variables"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch02-35323"
>2.4 Scalar Operators</A
></H2
><P
CLASS="para"
>An <A
CLASS="indexterm"
NAME="ch02-idx-1348-0"
></A
>operator produces a new value (the <A
CLASS="indexterm"
NAME="ch02-idx-1349-0"
></A
><EM
CLASS="emphasis"
>result</EM
>) from one or more other values (the <A
CLASS="indexterm"
NAME="ch02-idx-1351-0"
></A
><EM
CLASS="emphasis"
>operands</EM
>). For example, <CODE
CLASS="literal"
>+</CODE
> is an operator because it takes two numbers (the operands, like 5 and 6), and produces a new value (11, the result). </P
><P
CLASS="para"
>Perl's operators and expressions are generally a superset of those provided in most other ALGOL/Pascal-like programming languages, such as C or Java. An operator expects either numeric or string operands (or possibly a combination of both). If you provide a string operand where a number is expected, or vice versa, Perl automatically converts the operand using fairly intuitive rules, which will be detailed in the section <A
CLASS="xref"
HREF="ch02_04.htm#ch02-pgfId-769010"
TITLE="Conversion Between Numbers and Strings"
>"Conversion Between Numbers and Strings</A
>," later in this chapter.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-pgfId-768786"
>2.4.1 Operators for Numbers</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-768578-0"
></A
>Perl provides the typical ordinary <A
CLASS="indexterm"
NAME="ch02-idx-768579-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-768579-1"
></A
>addition, <A
CLASS="indexterm"
NAME="ch02-idx-768580-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-768580-1"
></A
>subtraction, <A
CLASS="indexterm"
NAME="ch02-idx-768581-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-768581-1"
></A
>multiplication, and <A
CLASS="indexterm"
NAME="ch02-idx-768582-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-768582-1"
></A
>division operators, and so on. For example:</P
><PRE
CLASS="programlisting"
>2 + 3      # 2 plus 3, or 5
5.1 - 2.4  # 5.1 minus 2.4, or approximately 2.7
3 * 12     # 3 times 12 = 36
10.2 / 0.3 # 10.2 divided by 0.3, or approximately 34
10 / 3     # always floating point divide, so approximately 3.333333...</PRE
><P
CLASS="para"
>Additionally, Perl provides the FORTRAN-like <A
CLASS="indexterm"
NAME="ch02-idx-768583-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-768583-1"
></A
><EM
CLASS="emphasis"
>exponentiation</EM
> operator, which many have yearned for in Pascal and C. The operator is represented by the double asterisk, such as <CODE
CLASS="literal"
>2**3</CODE
>, which is 2 to the power of 3, or 8. (If the result cannot fit into a double-precision floating-point number, such as a negative number to a noninteger exponent, or a large number to a large exponent, you'll get a fatal error.)</P
><P
CLASS="para"
>Perl also supports a <A
CLASS="indexterm"
NAME="ch02-idx-1410-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1410-1"
></A
><EM
CLASS="emphasis"
>modulus</EM
> operator. The value of the expression <CODE
CLASS="literal"
>10 % 3</CODE
> is the remainder when 10 is divided by 3, which is 1. Both values are first reduced to their integer values, so <CODE
CLASS="literal"
>10.5 % 3.2</CODE
> is computed as <CODE
CLASS="literal"
>10 % 3</CODE
>.</P
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch02-idx-1412-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1412-1"
></A
>logical comparison operators are <CODE
CLASS="literal"
>&lt;</CODE
>, <CODE
CLASS="literal"
>&lt;=</CODE
>, <CODE
CLASS="literal"
>==</CODE
>, <CODE
CLASS="literal"
>&gt;=</CODE
>, <CODE
CLASS="literal"
>&gt;</CODE
>, and <CODE
CLASS="literal"
>!=</CODE
>. These operators compare two values numerically, returning a <EM
CLASS="emphasis"
>true </EM
>or <EM
CLASS="emphasis"
>false</EM
> value. For example, <CODE
CLASS="literal"
>3 &gt; 2</CODE
> returns true because three is greater than two, while <CODE
CLASS="literal"
>5 != 5</CODE
> returns false because it's not true that 5 is not equal to 5. The definitions of true and false are covered later, but for now, think of the return values as one for true, and zero for false. (These operators are revisited in <A
CLASS="xref"
HREF="ch02_04.htm#ch02-pgfId-348"
TITLE="Numeric and String Comparison Operators"
>Table 2.2</A
>.) </P
><P
CLASS="para"
>You may be wondering about the word "approximately" in the code comments at the start of this section. Don't you get <EM
CLASS="emphasis"
>exactly</EM
> 2.7 when subtracting 2.4 from 5.1? In math class you do, but on computers you usually don't. Instead, you get an <EM
CLASS="emphasis"
>approximation</EM
> that's only accurate to a certain number of decimal places. Computers don't store numbers in the same way a mathematician does. Although there are infinitely many decimal points in them, the computer only has a limited space to store them (usually 64 bits per number). So, just a few of these infinite real numbers can be exactly represented on the computer&nbsp;- the rest are just close.</P
><P
CLASS="para"
>Comparing the following statements, you'll see what the computer really got as the result of the subtraction (the <CODE
CLASS="literal"
>printf</CODE
> function is described in <A
CLASS="xref"
HREF="ch06_01.htm"
TITLE="Basic I/O"
>Chapter 6, <CITE
CLASS="chapter"
>Basic I/O</CITE
></A
>):</P
><PRE
CLASS="programlisting"
>printf(<I
CLASS="lineannotation"
>&quot;</I
>%.51f\n<I
CLASS="lineannotation"
>&quot;</I
>, 5.1 - 2.4)
# 2.699999999999999733546474089962430298328399658203125

print(5.1 - 2.4, <I
CLASS="lineannotation"
>&quot;</I
>\n<I
CLASS="lineannotation"
>&quot;</I
>);
# 2.7</PRE
><P
CLASS="para"
>Don't worry too much about this: the <CODE
CLASS="literal"
>print()</CODE
> function's default format for printing floating-point numbers usually hides such minor representational inaccuracies. If this ends up being a problem, the Math::BigInt and Math::BigFloat object modules provide infinite-precision arithmetic for integers and floating-point numbers at the cost of somewhat slower execution. For details, see <A
CLASS="olink"
HREF="../prog/ch07_01.htm"
>Chapter 7</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> or the online documentation on these modules.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-15504"
>2.4.2 Operators for Strings</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1649-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1649-1"
></A
>String values can be <A
CLASS="indexterm"
NAME="ch02-idx-1650-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1650-1"
></A
>concatenated with the "<CODE
CLASS="literal"
>.</CODE
>" operator. (Yes, we are using a single period.) This concatenation does not alter either string, any more than <CODE
CLASS="literal"
>2+3</CODE
> alters either <CODE
CLASS="literal"
>2</CODE
> or <CODE
CLASS="literal"
>3</CODE
>. The resulting (longer) string is then available for further computation or to be stored into a variable. For example:</P
><PRE
CLASS="programlisting"
>&quot;hello&quot; . &quot;world&quot;        # same as &quot;helloworld&quot;
'hello world' . &quot;\n&quot;     # same as &quot;hello world\n&quot;
&quot;fred&quot; . &quot; &quot; . &quot;barney&quot;  # same as &quot;fred barney&quot;</PRE
><P
CLASS="para"
>Note that the concatenation must be explicitly called for with the <CODE
CLASS="literal"
>.</CODE
> operator. You do not merely have to stick the two values close to each other.</P
><P
CLASS="para"
>Another set of operators for strings are the string comparison operators. These operators are FORTRAN like, as in using <CODE
CLASS="literal"
>lt</CODE
> for less than, and so on. The operators compare the ASCII values of the characters of the strings in the usual fashion. The complete set of comparison operators (for both numbers and strings) is given in <A
CLASS="xref"
HREF="ch02_04.htm#ch02-pgfId-348"
TITLE="Numeric and String Comparison Operators"
>Table 2.2</A
>. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch02-pgfId-348"
>Table 2.2: Numeric and String Comparison Operators</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Comparison</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Numeric</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>String</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Equal</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1708-0"
></A
><CODE
CLASS="literal"
>==</CODE
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>eq</CODE
><A
CLASS="indexterm"
NAME="ch02-idx-1729-0"
></A
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Not equal</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>!=</CODE
><A
CLASS="indexterm"
NAME="ch02-idx-1711-0"
></A
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>ne</CODE
><A
CLASS="indexterm"
NAME="ch02-idx-1732-0"
></A
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Less than</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>&lt;</CODE
><A
CLASS="indexterm"
NAME="ch02-idx-1714-0"
></A
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>lt</CODE
><A
CLASS="indexterm"
NAME="ch02-idx-1735-0"
></A
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Greater than</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>&gt;</CODE
><A
CLASS="indexterm"
NAME="ch02-idx-1720-0"
></A
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1738-0"
></A
><CODE
CLASS="literal"
>gt</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Less than or equal to</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>&lt;=</CODE
><A
CLASS="indexterm"
NAME="ch02-idx-1723-0"
></A
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>le</CODE
><A
CLASS="indexterm"
NAME="ch02-idx-1741-0"
></A
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Greater than or equal to</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>&gt;=</CODE
><A
CLASS="indexterm"
NAME="ch02-idx-1726-0"
></A
></P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-1744-0"
></A
><CODE
CLASS="literal"
>ge</CODE
></P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-768602-0"
></A
>You may wonder why there are separate operators for numbers and strings, if numbers and strings are automatically converted back and forth. Consider the two values 7 and 30. If compared as numbers, 7 is obviously less than 30, but if compared as strings, the string <CODE
CLASS="literal"
>&quot;30&quot;</CODE
> comes <EM
CLASS="emphasis"
>before</EM
> the string <CODE
CLASS="literal"
>&quot;7&quot;</CODE
> (because the ASCII value for <CODE
CLASS="literal"
>3</CODE
> is less than the value for <CODE
CLASS="literal"
>7</CODE
>), and hence is less. Perl always requires you to specify the proper type of comparison, whether it be numeric or string.</P
><P
CLASS="para"
>Still another string operator is the <A
CLASS="indexterm"
NAME="ch02-idx-768603-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-768603-1"
></A
><EM
CLASS="emphasis"
>string repetition</EM
> operator, consisting of the single lowercase letter <A
CLASS="indexterm"
NAME="ch02-idx-768604-0"
></A
><CODE
CLASS="literal"
>x</CODE
>. This operator takes its left operand (a string), and makes as many concatenated copies of that string as indicated by its right operand (a number). For example:</P
><PRE
CLASS="programlisting"
>&quot;fred&quot; x 3         # is &quot;fredfredfred&quot;
&quot;barney&quot; x (4+1)   # is &quot;barney&quot; x 5, or 
                   # &quot;barneybarneybarneybarneybarney&quot;
(3+2) x 4          # is 5 x 4, or really &quot;5&quot; x 4, which is &quot;5555&quot;</PRE
><P
CLASS="para"
>That last example is worth spelling out slowly. The parentheses on <CODE
CLASS="literal"
>(3+2)</CODE
> force this part of the expression to be evaluated first, yielding five. (The parentheses here are working as in standard math.) But the string repetition operator wants a string for a left operand, so the number <CODE
CLASS="literal"
>5</CODE
> is converted to the string &quot;<CODE
CLASS="literal"
>5&quot;</CODE
> (using rules described in detail later), a one-character string. This new string is then copied four times, yielding the four-character string <CODE
CLASS="literal"
>5555</CODE
>. If we had reversed the order of the operands, we would have made five copies of the string <CODE
CLASS="literal"
>4</CODE
>, yielding <CODE
CLASS="literal"
>44444</CODE
>. This shows that string repetition is not commutative.</P
><P
CLASS="para"
>If necessary, the copy count (the right operand) is first truncated to an integer value (4.8 becomes 4) before being used. A copy count of less than 1 results in an empty (zero-length) string.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-pgfId-768734"
>2.4.3 Operator Precedence and Associativity</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-768606-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-768606-1"
></A
>Operator precedence defines how to resolve the ambiguous case in which two operators are trying to operate on three operands. For example, in the expression <CODE
CLASS="literal"
>2+3*4</CODE
>, do we perform the addition first or the multiplication first? If we did the addition first, we'd get <CODE
CLASS="literal"
>5*4</CODE
>, or <CODE
CLASS="literal"
>20</CODE
>. But if we did the multiplication first (as we were taught in math class), we'd get <CODE
CLASS="literal"
>2+12</CODE
>, or <CODE
CLASS="literal"
>14</CODE
>. Fortunately, Perl chooses the common mathematical definition, performing the multiplication first. Because of this, we say multiplication has a <EM
CLASS="emphasis"
>higher precedence</EM
> than addition.</P
><P
CLASS="para"
>You can override the order defined by precedence using <A
CLASS="indexterm"
NAME="ch02-idx-768607-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-768607-1"
></A
>parentheses. Anything in parentheses is completely computed before the operator outside of the parentheses is applied (just like you learned in your math class). So if I really want the addition before the multiplication, I can say <CODE
CLASS="literal"
>(2+3)*4</CODE
>, yielding <CODE
CLASS="literal"
>20</CODE
>. Also, if I wanted to demonstrate that multiplication is performed before addition, I could add a decorative but functionless set of parentheses in <CODE
CLASS="literal"
>2+(3*4)</CODE
>.</P
><P
CLASS="para"
>While precedence is intuitive for addition and multiplication,[<A
CLASS="footnote"
HREF="#ch02-pgfId-1451"
>6</A
>] we start running into problems when faced with, say, string concatenation compared with exponentiation. You can resolve this by consulting the official, accept-no-substitutes Perl operator precedence chart, shown in <A
CLASS="xref"
HREF="ch02_04.htm#ch02-20192"
TITLE="Associativity and Precedence of Operators"
>Table 2.3</A
>. (Note that some of the operators have not yet been described, and in fact, may not even appear anywhere in this book, but don't let that fact scare you away from reading about them.) Operators also found in C have the same precedence as in C).</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch02-pgfId-1451"
>[6]</A
> Asssuming you recall  your high school algebra class. If not, simply use  parentheses to improve clarity.</P
></DIV
></BLOCKQUOTE
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch02-20192"
>Table 2.3: Associativity and Precedence of Operators</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Associativity</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Operator</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Left</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The "list" operators (leftward)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Left</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>-&gt;</CODE
> (method call, dereference)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Nonassociative</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>++</CODE
> <CODE
CLASS="literal"
>--</CODE
> (autoincrement, autodecrement)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Right</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>**</CODE
> (exponentiation)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Right</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>!</CODE
> <CODE
CLASS="literal"
>~</CODE
> <CODE
CLASS="literal"
>\</CODE
> <CODE
CLASS="literal"
>+</CODE
>  <CODE
CLASS="literal"
>-</CODE
> (logical not, bit not, reference operator, unary plus, unary minus)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Left</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>=~</CODE
> <CODE
CLASS="literal"
>!~</CODE
> (matches, doesn't match)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Left</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>*</CODE
> <CODE
CLASS="literal"
>/</CODE
> <CODE
CLASS="literal"
>%</CODE
> <CODE
CLASS="literal"
>x</CODE
> (multiply, divide, modulus, string replicate)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Left</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>+</CODE
> <CODE
CLASS="literal"
>-</CODE
> <CODE
CLASS="literal"
>.</CODE
> (add, subtract, string concatenate)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Left</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>&lt;&lt; &gt;&gt; (shift operators)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Nonassociative</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Named unary operators (like <CODE
CLASS="literal"
>chomp</CODE
>)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Nonassociative</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>&lt; &gt; &lt;= &gt;= lt gt le ge</CODE
> (relational operators)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Nonassociative</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>== != &lt;=&gt; eq ne cmp </CODE
>(equality operators)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Left</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>&amp;</CODE
> (bit and)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Left</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>|</CODE
> <CODE
CLASS="literal"
>^</CODE
> (bit or, bit xor)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Left</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>&amp;&amp;</CODE
> (logical and)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Left</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>||</CODE
> (logical or)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Nonassociative</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>.. ...</CODE
>  (noninclusive and inclusive range)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Right</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>?:</CODE
> (if then else)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Right</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>=</CODE
> <CODE
CLASS="literal"
>+=</CODE
> <CODE
CLASS="literal"
>-=</CODE
> <CODE
CLASS="literal"
>*=</CODE
>, etc. (assignment and binary assignment)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Left</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>,</CODE
> <CODE
CLASS="literal"
>=&gt;</CODE
> (comma and comma arrow)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Nonassociative</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>List operators (rightward)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Right</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>not</CODE
> (logical not)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Left</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>and</CODE
> (logical and)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Left</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>or</CODE
> <CODE
CLASS="literal"
>xor</CODE
> (logical or, logical xor)</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>In <A
CLASS="xref"
HREF="ch02_04.htm#ch02-20192"
TITLE="Associativity and Precedence of Operators"
>Table 2.3</A
>, any given operator has higher precedence than those listed below it, and lower precedence than all of the operators listed above it.</P
><P
CLASS="para"
>Operators at the same precedence level resolve according to rules of <EM
CLASS="emphasis"
>associativity</EM
>. Just like precedence, <A
CLASS="indexterm"
NAME="ch02-idx-768608-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-768608-1"
></A
>associativity resolves the order of operations when two operators of the same precedence compete for three operands:</P
><PRE
CLASS="programlisting"
>2 ** 3 ** 4   # 2 ** (3 ** 4), or 2 ** 81, or approx 2.41e24
72 / 12 / 3   # (72 / 12) / 3, or 6/3, or 2
30 / 6 * 3    # (30/6)*3, or 15</PRE
><P
CLASS="para"
>In the first case, the <CODE
CLASS="literal"
>**</CODE
> operator has <A
CLASS="indexterm"
NAME="ch02-idx-768609-0"
></A
>right associativity, so the parentheses are implied on the right. Comparatively, the <CODE
CLASS="literal"
>*</CODE
> and <CODE
CLASS="literal"
>/</CODE
> operators have <A
CLASS="indexterm"
NAME="ch02-idx-768610-0"
></A
>left associativity, yielding a set of implied parentheses on the left.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-pgfId-769010"
>2.4.4 Conversion Between Numbers and Strings</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-768611-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-768611-1"
></A
>If you use a string value as an operand for a numeric operator (say, <CODE
CLASS="literal"
>+</CODE
>), Perl automatically converts the string to its equivalent numeric value, as if you had entered it as a decimal floating-point value.[<A
CLASS="footnote"
HREF="#ch02-pgfId-860275"
>7</A
>] Trailing nonnumerics and leading whitespaces are politely and quietly ignored, so "<CODE
CLASS="literal"
>123.45fred</CODE
>" (with a leading space) converts to <CODE
CLASS="literal"
>123.45</CODE
> with nary a warning.[<A
CLASS="footnote"
HREF="#ch02-pgfId-769035"
>8</A
>] At the extreme, something that <EM
CLASS="emphasis"
>isn't</EM
> a number at all converts to zero without warning (such as the string <CODE
CLASS="literal"
>fred</CODE
> used as a number).</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch02-pgfId-860275"
>[7]</A
> Hex and octal values are not supported in this automatic conversion. Use <A
CLASS="indexterm"
NAME="ch02-idx-860273-0"
></A
><CODE
CLASS="literal"
>hex</CODE
> and <A
CLASS="indexterm"
NAME="ch02-idx-860274-0"
></A
><CODE
CLASS="literal"
>oct</CODE
> to interpret hex and octal values.</P
></DIV
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch02-pgfId-769035"
>[8]</A
> Unless you turn on the <CODE
CLASS="literal"
>-w</CODE
> option from the command line. which you should really always do for safety's sake.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Likewise, if you give a numeric value when a string value is needed (for the string concatenate operator, for example), the numeric value is expanded into whatever string would have been printed for that number. For example, if you want to concatenate an <CODE
CLASS="literal"
>X</CODE
> followed by the results of 4 multiplied by 5, you can say this simply as:</P
><PRE
CLASS="programlisting"
>&quot;X&quot; . (4 * 5) # same as &quot;X&quot; . 20, or &quot;X20&quot;</PRE
><P
CLASS="para"
>(Remember that the parentheses force <CODE
CLASS="literal"
>4*5</CODE
> to be computed first, before considering the string concatenation operator.)</P
><P
CLASS="para"
>In other words, you don't really have to worry about whether you have a number or a string (most of the time). Perl performs all the conversions for you.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_03.htm"
TITLE="2.3 Strings"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.3 Strings"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl on Win32 Systems"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_05.htm"
TITLE="2.5 Scalar Variables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.5 Scalar Variables"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.3 Strings</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.5 Scalar Variables</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
