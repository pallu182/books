<HTML
><HEAD
>
<TITLE>[Chapter 11] 11.4 More About the Fieldholders</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:34:16Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch11_01.htm"
TITLE="11. Formats"><LINK
REL="prev"
HREF="ch11_03.htm"
TITLE="11.3 Invoking a Format"><LINK
REL="next"
HREF="ch11_05.htm"
TITLE="11.5 The Top-of-Page Format"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_03.htm"
TITLE="11.3 Invoking a Format"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.3 Invoking a Format"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch11_01.htm"
TITLE="11. Formats"
>Chapter 11<BR>Formats</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_05.htm"
TITLE="11.5 The Top-of-Page Format"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.5 The Top-of-Page Format"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch11-15347"
>11.4 More About the Fieldholders</A
></H2
><P
CLASS="para"
>So far, by example, you know that the fieldholder <CODE
CLASS="literal"
>@&lt;&lt;&lt;&lt;</CODE
> means a five-character left-justified field and that <CODE
CLASS="literal"
>@&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</CODE
> means an 11-character left-justified field. Here's the whole scoop, as promised earlier.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-948498"
>11.4.1 Text Fields</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-948282-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-948282-1"
></A
>Most fieldholders start with <A
CLASS="indexterm"
NAME="ch11-idx-948283-0"
></A
><CODE
CLASS="literal"
>@</CODE
>. The characters following the <CODE
CLASS="literal"
>@</CODE
> indicate the type of field, while the number of characters (including the <CODE
CLASS="literal"
>@</CODE
>) indicates the field width.</P
><P
CLASS="para"
>If the characters following the <CODE
CLASS="literal"
>@</CODE
> are <A
CLASS="indexterm"
NAME="ch11-idx-948284-0"
></A
>left-angle brackets (<CODE
CLASS="literal"
>&lt;&lt;&lt;&lt;</CODE
>), you get a left-justified field; that is, the value will be padded on the right with spaces if the value is shorter than the field width. (If a value is too long, it's truncated automatically; the layout of the format is always preserved.)</P
><P
CLASS="para"
>If the characters following the <CODE
CLASS="literal"
>@</CODE
> are <A
CLASS="indexterm"
NAME="ch11-idx-948285-0"
></A
>right-angle brackets (<CODE
CLASS="literal"
>&gt;&gt;&gt;&gt;</CODE
>), you get a right-justified field&nbsp;- that is, if the value is too short, it gets padded on the left with spaces.</P
><P
CLASS="para"
>Finally, if the characters following the <CODE
CLASS="literal"
>@</CODE
> are <A
CLASS="indexterm"
NAME="ch11-idx-948286-0"
></A
>vertical bars (<CODE
CLASS="literal"
>||||</CODE
>), you get a centered field: if the value is too short, it gets padded on both sides with spaces, enough on each side to make the value mostly centered within the field.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-948499"
>11.4.2 Numeric Fields</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch11-idx-948287-0"
></A
>Another kind of fieldholder is a fixed-precision numeric field, useful for those big financial reports. This field also begins with <CODE
CLASS="literal"
>@</CODE
>, and is followed by one or more <A
CLASS="indexterm"
NAME="ch11-idx-948288-0"
></A
><CODE
CLASS="literal"
>#</CODE
>'s with an optional dot (indicating a decimal point). Once again, the <CODE
CLASS="literal"
>@</CODE
> counts as one of the characters of the field. For example:</P
><PRE
CLASS="programlisting"
>format MONEY =
Assets: @#####.## Liabilities: @#####.## Net: @#####.##
$assets, $liabilities, $assets-$liabilities
.</PRE
><P
CLASS="para"
>The three numeric fields allow for six places to the left of the decimal place, and two to the right (useful for dollars and cents). Note the use of an expression in the format&nbsp;- perfectly legal and frequently used.</P
><P
CLASS="para"
>Perl provides nothing fancier than this; you can't get floating currency symbols or brackets around negative values or anything interesting. To do that, you have to write your own spiffy subroutine, like so:</P
><PRE
CLASS="programlisting"
>format MONEY =
Assets: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Liabilities @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Net: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
&amp;pretty($assets,10), &amp;pretty($liab,9), &amp;pretty($assets-$liab,10)
.

sub pretty {
    <A
CLASS="indexterm"
NAME="ch11-idx-948319-0"
></A
>my($n,$width) = @_;
    $width <A
CLASS="indexterm"
NAME="ch11-idx-948320-0"
></A
>-= 2; # back off for negative stuff
    $n = <A
CLASS="indexterm"
NAME="ch11-idx-948289-0"
></A
>sprintf(&quot;%.2f&quot;,$n); # sprintf is in later chapter
    if ($n &lt; 0) {
        return sprintf(&quot;[%$width.2f]&quot;, -$n);
            # negative numbers get brackets
    } else {
        return sprintf(&quot; %$width.2f &quot;, $n);
            # positive numbers get spaces instead
    }
}

## body of program:
$assets = 32125.12; 
$liab = 45212.15; 
write (MONEY);</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-948501"
>11.4.3 Multiline Fields</A
></H3
><P
CLASS="para"
>As mentioned earlier, Perl normally stops at the first newline of a value when placing the result into the output. One kind of fieldholder, the <A
CLASS="indexterm"
NAME="ch11-idx-948290-0"
></A
><A
CLASS="indexterm"
NAME="ch11-idx-948290-1"
></A
>multiline fieldholder, allows you to include a value that may have many lines of information. This fieldholder is denoted by <A
CLASS="indexterm"
NAME="ch11-idx-948291-0"
></A
><CODE
CLASS="literal"
>@*</CODE
> on a line by itself: as always, the following line defines the value to be substituted into the field, which in this case may be an expression that results in a value containing many <A
CLASS="indexterm"
NAME="ch11-idx-948321-0"
></A
>newlines.</P
><P
CLASS="para"
>The substituted value will look just like the original text: four lines of value become four lines of output. For example:</P
><PRE
CLASS="programlisting"
>format STDOUT =
Text Before.
@*
$long_string
Text After.
.

$long_string = &quot;Fred\nBarney\nBetty\nWilma\n&quot;;
write;</PRE
><P
CLASS="para"
>generates the output:</P
><PRE
CLASS="programlisting"
>Text Before.
Fred
Barney
Betty
Wilma
Text After.</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch11-pgfId-948502"
>11.4.4 Filled Fields</A
></H3
><P
CLASS="para"
>Another kind of fieldholder is a <A
CLASS="indexterm"
NAME="ch11-idx-948292-0"
></A
>filled field. This fieldholder allows you to create a filled paragraph, breaking the text into conveniently sized lines at word boundaries, wrapping the lines as needed. There are a few parts that work together here, but let's look at them separately.</P
><P
CLASS="para"
>First, a filled field is denoted by replacing the <CODE
CLASS="literal"
>@</CODE
> marker in a text fieldholder with a <A
CLASS="indexterm"
NAME="ch11-idx-948293-0"
></A
>caret (so you get <CODE
CLASS="literal"
>^&lt;&lt;&lt;</CODE
>, for example). The corresponding value for a filled field (on the following line of the format) must be a scalar variable[<A
CLASS="footnote"
HREF="#ch11-pgfId-948722"
>3</A
>] containing text, rather than an expression that returns a scalar value. The reason for this is that Perl will alter the variable while filling the filled field, and it's pretty hard to alter an expression.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch11-pgfId-948722"
>[3]</A
> Including a single scalar element of an array or hash, like <CODE
CLASS="literal"
>$a[3]</CODE
> or <CODE
CLASS="literal"
>$h{&quot;fred&quot;}</CODE
>.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>When Perl is filling the filled field, it takes the value of the variable and grabs as many <A
CLASS="indexterm"
NAME="ch11-idx-948294-0"
></A
>words (using a reasonable definition of "word")[<A
CLASS="footnote"
HREF="#ch11-pgfId-948613"
>4</A
>] as will fit into the field. These words are actually ripped out of the variable; the value of the variable after filling this field is whatever is left over after removing the words. You'll see why in a minute.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch11-pgfId-948613"
>[4]</A
> The word separator characters are defined by the <A
CLASS="indexterm"
NAME="ch11-idx-948295-0"
></A
><CODE
CLASS="literal"
>$:</CODE
> variable.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>So far, this isn't much different from how a normal text field works; we're printing only as much as will fit (except that we're respecting a word boundary rather than just cutting it off at the field width). The beauty of this filled field appears when you have multiple references to the same variable in the same format. Take a look at this:</P
><PRE
CLASS="programlisting"
>format PEOPLE =
Name: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Comment: ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
      $name,                  $comment
                              ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                              $comment
                              ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                              $comment
                              ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                              $comment
.</PRE
><P
CLASS="para"
>Note that the variable <CODE
CLASS="literal"
>$comment</CODE
> appears four times. The first line (the one with the name field) prints the person's name and the first few words of the value in <CODE
CLASS="literal"
>$comment</CODE
>. But in the process of computing this line, <CODE
CLASS="literal"
>$comment</CODE
> is altered so that the words disappear. The second line once again refers to the same variable (<CODE
CLASS="literal"
>$comment</CODE
>), and so will take the next few words from the same variable. This is also true for the third and fourth lines. Effectively, what we've created is a rectangle in the output that will be filled as best it can with the words from <CODE
CLASS="literal"
>$comment</CODE
> spread over four lines.</P
><P
CLASS="para"
>What happens if the complete text occupies less than four lines? Well, you'll get a blank line or two. This is probably OK if you are printing out labels and need exactly the same number of lines for each entry to match them up with the labels. But if you are printing out a report, many blank lines merely use up your printer paper budget.</P
><P
CLASS="para"
>To fix this, use the suppression indicator. Any line that contains a <A
CLASS="indexterm"
NAME="ch11-idx-948296-0"
></A
>tilde (<CODE
CLASS="literal"
>~</CODE
>) character is suppressed (not output) if the line would have otherwise printed blank (just whitespace). The tilde itself always prints as a blank and can be placed anywhere a space could have been placed in the line. Rewriting that last example:</P
><PRE
CLASS="programlisting"
>format PEOPLE =
Name: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Comment: ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
      $name,                  $comment
~                             ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                              $comment
~                             ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                              $comment
~                             ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                              $comment
.</PRE
><P
CLASS="para"
>Now, if the comment covers only two lines, the third and fourth lines are automatically suppressed.</P
><P
CLASS="para"
>What if the comment is more than four lines? Well, we could make about 20 copies of the last two lines of that format, hoping that 20 lines will cover it. But that goes against the idea that Perl helps you to be lazy, so there's a lazy way to do it. Any line that contains two consecutive tildes will be repeated automatically until the result is a completely blank line. (The blank line is suppressed.) This changes our format to look like this:</P
><PRE
CLASS="programlisting"
>format PEOPLE =
Name: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Comment: ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
      $name,                  $comment
~~                            ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                              $comment
.</PRE
><P
CLASS="para"
>This way, if the comment takes one line, two lines, or 20 lines, we are still OK.</P
><P
CLASS="para"
>Note that the criterion for stopping the repeated line requires the line to be blank at some point. That means you probably don't want any constant text (other than blanks or tildes) on the line, or else it will never become blank.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_03.htm"
TITLE="11.3 Invoking a Format"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 11.3 Invoking a Format"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch11_05.htm"
TITLE="11.5 The Top-of-Page Format"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 11.5 The Top-of-Page Format"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>11.3 Invoking a Format</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>11.5 The Top-of-Page Format</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
