<HTML
><HEAD
>
<TITLE>[Chapter 10] 10.6 The -x File Tests</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl on Win32 Systems"><META
NAME="DC.creator"
CONTENT="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:34:33Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-324-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch10_01.htm"
TITLE="10. Filehandles and File Tests"><LINK
REL="prev"
HREF="ch10_05.htm"
TITLE="10.5 Using Filehandles"><LINK
REL="next"
HREF="ch10_07.htm"
TITLE="10.7 The stat Function"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl on Win32 Systems"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl on Win32 Systems"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/wsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_05.htm"
TITLE="10.5 Using Filehandles"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.5 Using Filehandles"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch10_01.htm"
TITLE="10. Filehandles and File Tests"
>Chapter 10<BR>Filehandles and File Tests</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_07.htm"
TITLE="10.7 The stat Function"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.7 The stat Function"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch10-19653"
>10.6 The -x File Tests</A
></H2
><P
CLASS="para"
>Now you know how to open a filehandle for output, overwriting any existing file with the same name. Suppose you wanted to make sure that there wasn't a file by that name (to keep you from accidentally blowing away your spreadsheet data or that important birthday calendar). <A
CLASS="indexterm"
NAME="ch10-idx-778373-0"
></A
>Perl uses <A
CLASS="indexterm"
NAME="ch10-idx-778374-0"
></A
><CODE
CLASS="literal"
>-e </CODE
><CODE
CLASS="replaceable"
><I
>$filevar</I
></CODE
> to test for the existence of the file named by the scalar value in <CODE
CLASS="replaceable"
><I
>$filevar</I
></CODE
>. If this file exists, the result is true; otherwise it is false. For example:</P
><PRE
CLASS="programlisting"
>$name = &quot;index.html&quot;;
if (-e $name) {
    print &quot;I see you already have a file named $name\n&quot;;
} else {
    print &quot;Perhaps you'd like to make a file called $name\n&quot;;
} </PRE
><P
CLASS="para"
>The operand of the <CODE
CLASS="literal"
>-e</CODE
> operator is really just any scalar expression that evaluates to some string, including a string literal. Here's an example that checks to see whether both <EM
CLASS="emphasis"
>index.html</EM
> and <EM
CLASS="emphasis"
>index.cgi</EM
> exist in the current directory:</P
><PRE
CLASS="programlisting"
>if (-e &quot;index.html&quot; &amp;&amp; -e &quot;index.cgi&quot;) {
    print &quot;You have both styles of index files here.\n&quot;;
}</PRE
><P
CLASS="para"
>Other operators are defined as well. For example, <A
CLASS="indexterm"
NAME="ch10-idx-367891-0"
></A
><CODE
CLASS="literal"
>-r</CODE
> <CODE
CLASS="replaceable"
><I
>$filevar</I
></CODE
> returns true if the file named in <CODE
CLASS="replaceable"
><I
>$filevar</I
></CODE
> exists and is readable. Similarly, <CODE
CLASS="literal"
>-w </CODE
><A
CLASS="indexterm"
NAME="ch10-idx-367892-0"
></A
><CODE
CLASS="replaceable"
><I
>$filevar</I
></CODE
> tests whether it is writable. Here's an example that tests a user-specified filename for both readability and writability:</P
><PRE
CLASS="programlisting"
>print &quot;where? &quot;;
$filename = &lt;STDIN&gt;;
chomp $filename; # toss pesky newline
if (-r $filename &amp;&amp; -w $filename) {
        # file exists, and I can read and write it
        ...
}</PRE
><P
CLASS="para"
>Many more file tests are available, some of which are not applicable to Perl for Win32. <A
CLASS="xref"
HREF="ch10_06.htm#ch10-37548"
TITLE="File Tests and Their Meanings"
>Table 10.1</A
> lists some file tests and their meanings; for the whole list, see the <EM
CLASS="emphasis"
>perlfunc</EM
> documentation.</P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch10-37548"
>Table 10.1: File Tests and Their Meanings</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File Test</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Meaning</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-368315-0"
></A
>-r</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File or directory is readable</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-368320-0"
></A
>-w</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File or directory is writable</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-368355-0"
></A
>-e</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File or directory exists</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-778842-0"
></A
>-x</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File is executable</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-368360-0"
></A
>-z</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File exists and has zero size (directories are never empty)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-368365-0"
></A
>-s</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File or directory exists and has nonzero size (the value is the size in bytes)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-368371-0"
></A
>-f</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Entry is a plain file</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-368376-0"
></A
>-d</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Entry is a directory</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-368421-0"
></A
>-t</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><CODE
CLASS="literal"
>isatty</CODE
> on the filehandle is true (that is, the filehandle is a character device)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-368426-0"
></A
>-T</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File is text</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-368431-0"
></A
>-B</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>File is binary</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-368436-0"
></A
>-M</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Modification age in days (C lang. time_t value)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-368441-0"
></A
>-A</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Access age in days (C lang. time_t value)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch10-idx-368446-0"
></A
>-C</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Inode-modification age in days (C lang. time_t value)</P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Most of these tests return a simple true-false condition. A few don't, so let's talk about them.</P
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch10-idx-367920-0"
></A
><CODE
CLASS="literal"
>-s</CODE
> operator does return true if the file is nonempty, but it's a particular kind of true. It's the length in bytes of the file, which evaluates as true for a nonzero number.</P
><P
CLASS="para"
>The age operators <A
CLASS="indexterm"
NAME="ch10-idx-367921-0"
></A
><CODE
CLASS="literal"
>-M</CODE
>, <A
CLASS="indexterm"
NAME="ch10-idx-367922-0"
></A
><CODE
CLASS="literal"
>-A</CODE
>, and <A
CLASS="indexterm"
NAME="ch10-idx-367923-0"
></A
><CODE
CLASS="literal"
>-C</CODE
> (yes, they're uppercase) return the number of days since the file was last modified, accessed, or had its information changed.[<A
CLASS="footnote"
HREF="#ch10-pgfId-779948"
>8</A
>] This age value is fractional with a resolution of one second: 36 hours is returned as 1.5 days. If you compare the age with a whole number (say three), you'll get only the files that were changed exactly that many days ago, not one second more or less. This means that you'll probably want a range comparison rather than an exact comparison to get files that are between three and four days old.[<A
CLASS="footnote"
HREF="#ch10-pgfId-780006"
>9</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch10-pgfId-779948"
>[8]</A
> The age is measured relative to the time the program started, as captured in C-library time into the <A
CLASS="indexterm"
NAME="ch10-idx-779947-0"
></A
><CODE
CLASS="literal"
>$^T</CODE
> variable. You can get negative numbers for these ages if the queried value refers to an event that happened after the program began.</P
></DIV
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch10-pgfId-780006"
>[9]</A
> Or, you might want to use the <A
CLASS="indexterm"
NAME="ch10-idx-780005-0"
></A
><CODE
CLASS="literal"
>int</CODE
> function.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>These operators can operate on filehandles as well as filenames. Giving a filehandle for the operand is all it takes. So to test whether the file opened as <CODE
CLASS="literal"
>SOMEFILE</CODE
> is executable, you can use:</P
><PRE
CLASS="programlisting"
>if (-x SOMEFILE) {
        # file open on SOMEFILE is executable
}</PRE
><P
CLASS="para"
>If you leave the filename or filehandle parameter off (that is, if you specify just <CODE
CLASS="literal"
>-r</CODE
> or <CODE
CLASS="literal"
>-s</CODE
>), the default operand is the file named in the <A
CLASS="indexterm"
NAME="ch10-idx-367925-0"
></A
><CODE
CLASS="literal"
>$_</CODE
> variable (there it is again!). So, to test a list of filenames to see which ones are readable, it's as simple as:</P
><PRE
CLASS="programlisting"
>foreach (@some_list_of_filenames) {
        print &quot;$_ is readable\n&quot; if -r; # same as -r $_
}</PRE
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_05.htm"
TITLE="10.5 Using Filehandles"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 10.5 Using Filehandles"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl on Win32 Systems"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch10_07.htm"
TITLE="10.7 The stat Function"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 10.7 The stat Function"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>10.5 Using Filehandles</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>10.7 The stat Function</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
