<HTML
><HEAD
>
<TITLE>[Chapter 3] 3.2.155 split</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:54:28Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_02.htm"
TITLE="3.2 Perl Functions in Alphabetical Order"><LINK
REL="prev"
HREF="ch03_154.htm"
TITLE="3.2.154 splice"><LINK
REL="next"
HREF="ch03_156.htm"
TITLE="3.2.156 sprintf"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_154.htm"
TITLE="3.2.154 splice"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.154 splice"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. Functions"
>Chapter 3<BR>Functions</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_156.htm"
TITLE="3.2.156 sprintf"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.156 sprintf"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CMD-SPLIT"
>3.2.155 split</A
></H3
><PRE
CLASS="programlisting"
>split /<CODE
CLASS="replaceable"
><I
>PATTERN</I
></CODE
>/, <CODE
CLASS="replaceable"
><I
>EXPR</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>LIMIT</I
></CODE
>
split /<CODE
CLASS="replaceable"
><I
>PATTERN</I
></CODE
>/, <CODE
CLASS="replaceable"
><I
>EXPR</I
></CODE
>
split /<CODE
CLASS="replaceable"
><I
>PATTERN</I
></CODE
>/
split</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-13107"
></A
><A
CLASS="indexterm"
NAME="CH03.SPLIT"
></A
><A
CLASS="indexterm"
NAME="CH03.STRSPL"
></A
><A
CLASS="indexterm"
NAME="CH03.PAT"
></A
>This function scans a string given by <CODE
CLASS="replaceable"
><I
>EXPR</I
></CODE
> for delimiters, and
splits the string into a list of substrings, returning the resulting
list value in list context, or the count of substrings in scalar
context. The delimiters are determined by repeated pattern matching,
using the regular expression given in <CODE
CLASS="replaceable"
><I
>PATTERN</I
></CODE
>, so the delimiters
may be of any size, and need not be the same string on every match.
(The delimiters are not ordinarily returned, but see below.)  If the
<CODE
CLASS="replaceable"
><I
>PATTERN</I
></CODE
> doesn't match at all, <A
CLASS="xref"
HREF="ch03_155.htm"
TITLE="split"
><B
CLASS="xref.cmd"
>split</B
></A
> returns the original
string as a single substring.  If it matches once, you get two
substrings, and so on.</P
><P
CLASS="para"
>If <CODE
CLASS="replaceable"
><I
>LIMIT</I
></CODE
> is specified and is not negative, the function splits into no
more than that many fields (though it may split into fewer if it runs out of
delimiters).  If <CODE
CLASS="replaceable"
><I
>LIMIT</I
></CODE
> is negative, it is
treated as if an arbitrarily large <CODE
CLASS="replaceable"
><I
>LIMIT</I
></CODE
> has
been specified.  If <CODE
CLASS="replaceable"
><I
>LIMIT</I
></CODE
> is omitted, trailing null
fields are stripped from the result (which potential users of <A
CLASS="xref"
HREF="ch03_108.htm"
TITLE="pop"
><B
CLASS="xref.cmd"
>pop</B
></A
> would do well to remember).  If
<CODE
CLASS="replaceable"
><I
>EXPR</I
></CODE
> is omitted, the function splits the <B
CLASS="emphasis.bold"
>$_</B
> string.  If <CODE
CLASS="replaceable"
><I
>PATTERN</I
></CODE
> is also
omitted, the function splits on whitespace, <CODE
CLASS="literal"
>/\s+/</CODE
>, after
skipping any leading whitespace.</P
><P
CLASS="para"
>Strings of any length can be split:</P
><PRE
CLASS="programlisting"
>@chars = split //, $word;
@fields = split /:/, $line;
@words = split ' ', $paragraph;
@lines = split /^/m, $buffer;</PRE
><P
CLASS="para"
>A pattern capable of matching either the null string or something longer than
the null string (for instance, a pattern consisting of
any single character modified by a <CODE
CLASS="literal"
>*</CODE
> or <CODE
CLASS="literal"
>?</CODE
>) will split the
value of <CODE
CLASS="replaceable"
><I
>EXPR</I
></CODE
>
into separate characters wherever it is the null string that
produces the match; non-null matches will skip over occurrences of the
delimiter in the usual fashion.  (In other words, a pattern won't match
in one spot more than once, even if it matched with a zero width.)
For example:</P
><PRE
CLASS="programlisting"
>print join ':', split / */, 'hi there';</PRE
><P
CLASS="para"
>produces the output <CODE
CLASS="literal"
>&quot;h:i:t:h:e:r:e&quot;</CODE
>.
The space disappears because it matched as part of the delimiter.
As a trivial case, the null
pattern <B
CLASS="emphasis.bold"
>//</B
> simply splits into separate
characters (and spaces do not disappear).</P
><P
CLASS="para"
>The <CODE
CLASS="replaceable"
><I
>LIMIT</I
></CODE
> parameter is used to split only part of a string:</P
><PRE
CLASS="programlisting"
>($login, $passwd, $remainder) = split /:/, $_, 3;</PRE
><P
CLASS="para"
>We encourage you to split to lists of names like this in order to make your code
self-documenting.  (For purposes of error checking, note that
<CODE
CLASS="literal"
>$remainder</CODE
> would be undefined if there were fewer than three
fields.)  When assigning to a list, if <CODE
CLASS="replaceable"
><I
>LIMIT</I
></CODE
> is
omitted, Perl supplies a <CODE
CLASS="replaceable"
><I
>LIMIT</I
></CODE
> one larger than the
number of variables in the list, to avoid unnecessary work.  For the split
above, <CODE
CLASS="replaceable"
><I
>LIMIT</I
></CODE
> would have been 4 by default, and
<CODE
CLASS="literal"
>$remainder</CODE
> would have received only the third field, not all
the rest of the fields.  In time-critical applications it behooves you not to
split into more fields than you really need.</P
><P
CLASS="para"
>We said earlier that the delimiters are not returned, but if
the <CODE
CLASS="replaceable"
><I
>PATTERN</I
></CODE
> contains parentheses, then the substring matched
by each pair of parentheses is included in the resulting list,
interspersed with the fields that are ordinarily returned.
Here's a simple case:</P
><PRE
CLASS="programlisting"
>split /([-,])/, &quot;1-10,20&quot;;</PRE
><P
CLASS="para"
>produces the list value:</P
><PRE
CLASS="programlisting"
>(1, '-', 10, ',', 20)</PRE
><P
CLASS="para"
>With more parentheses, a field is returned for each pair, even if some
of the pairs don't match, in which case undefined values are returned
in those positions.  So if you say:</P
><PRE
CLASS="programlisting"
>split /(-)|(,)/, &quot;1-10,20&quot;;</PRE
><P
CLASS="para"
>you get the value:</P
><PRE
CLASS="programlisting"
>(1, '-', undef, 10, undef, ',', 20)</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>/</CODE
><CODE
CLASS="replaceable"
><I
>PATTERN</I
></CODE
><CODE
CLASS="literal"
>/</CODE
>
argument may be replaced with an expression to specify patterns that vary at
run-time.  (To do run-time compilation only once, use
<CODE
CLASS="literal"
>/$variable/o</CODE
>.)  As a special case, specifying a space
<CODE
CLASS="literal"
>&quot; &quot;</CODE
> will split on whitespace just as <A
CLASS="xref"
HREF="ch03_155.htm"
TITLE="split"
><B
CLASS="xref.cmd"
>split</B
></A
> with no arguments does.  Thus, <CODE
CLASS="literal"
>split(&quot;
&quot;)</CODE
> can be used to emulate <EM
CLASS="emphasis"
>awk</EM
>'s default
behavior, whereas <CODE
CLASS="literal"
>split(/ /)</CODE
> will give you as many null
initial fields as there are leading spaces.  (Other than this special case, if
you supply a string instead of a regular expression, it'll be interpreted as a
regular expression anyway.)</P
><P
CLASS="para"
>The following example splits an RFC-822 message header into a hash
containing <CODE
CLASS="literal"
>$head{Date}</CODE
>, <CODE
CLASS="literal"
>$head{Subject}</CODE
>, and so on.  It
uses the trick of assigning a list of pairs to a hash, based on the fact
that delimiters alternate with delimited fields.  It makes use of
parentheses to return part of each delimiter as part of the returned
list value.  Since the <A
CLASS="xref"
HREF="ch03_155.htm"
TITLE="split"
><B
CLASS="xref.cmd"
>split</B
></A
> pattern is guaranteed to return
things in pairs by virtue of containing one set of parentheses, the hash
assignment is guaranteed to receive a list consisting of key/value
pairs, where each key is the name of a header field.  (Unfortunately
this technique loses information for multiple lines with the same key
field, such as Received-By lines.  Ah, well. . . .)</P
><PRE
CLASS="programlisting"
>$header =~ s/\n\s+/ /g;      # Merge continuation lines.
%head = ('FRONTSTUFF', split /^([-\w]+):/m, $header);</PRE
><P
CLASS="para"
>The following example processes the entries in a UNIX
<EM
CLASS="emphasis"
>passwd</EM
> file.  You could leave out the <A
CLASS="xref"
HREF="ch03_014.htm"
TITLE="chop"
><B
CLASS="xref.cmd"
>chop</B
></A
>, in which case <CODE
CLASS="literal"
>$shell</CODE
> would have a
newline on the end of it.</P
><PRE
CLASS="programlisting"
>open PASSWD, '/etc/passwd';
while (&lt;PASSWD&gt;) {
    chop;        # remove trailing newline
    ($login, $passwd, $uid, $gid, $gcos, $home, $shell) =
            split /:/;
    ...
}</PRE
><P
CLASS="para"
>The inverse of <A
CLASS="xref"
HREF="ch03_155.htm"
TITLE="split"
><B
CLASS="xref.cmd"
>split</B
></A
> is performed by <A
CLASS="xref"
HREF="ch03_078.htm"
TITLE="join"
><B
CLASS="xref.cmd"
>join</B
></A
> (except that <A
CLASS="xref"
HREF="ch03_078.htm"
TITLE="join"
><B
CLASS="xref.cmd"
>join</B
></A
> can only join with the same delimiter between all
fields).  To break apart a string with fixed-position fields, use <A
CLASS="xref"
HREF="ch03_182.htm"
TITLE="unpack"
><B
CLASS="xref.cmd"
>unpack</B
></A
>.<A
CLASS="indexterm"
NAME="AUTOID-13185"
></A
><A
CLASS="indexterm"
NAME="AUTOID-13186"
></A
><A
CLASS="indexterm"
NAME="AUTOID-13187"
></A
></P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_154.htm"
TITLE="3.2.154 splice"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.154 splice"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_156.htm"
TITLE="3.2.156 sprintf"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.156 sprintf"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.2.154 splice</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.2.156 sprintf</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
