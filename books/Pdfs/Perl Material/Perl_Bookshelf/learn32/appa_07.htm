<HTML
><HEAD
>
<TITLE>[Appendix A] A.7 Chapter 8, Functions</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl on Win32 Systems"><META
NAME="DC.creator"
CONTENT="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:37:33Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-324-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="appa_01.htm"
TITLE="A. Exercise Answers"><LINK
REL="prev"
HREF="appa_06.htm"
TITLE="A.6 Chapter 7, Regular Expressions"><LINK
REL="next"
HREF="appa_08.htm"
TITLE="A.8 Chapter 9, Miscellaneous Control Structures"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl on Win32 Systems"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl on Win32 Systems"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/wsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_06.htm"
TITLE="A.6 Chapter 7, Regular Expressions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: A.6 Chapter 7, Regular Expressions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="appendix"
REL="up"
HREF="appa_01.htm"
TITLE="A. Exercise Answers"
>Appendix A<BR>Exercise Answers</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_08.htm"
TITLE="A.8 Chapter 9, Miscellaneous Control Structures"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: A.8 Chapter 9, Miscellaneous Control Structures"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="appa-23194"
>A.7 <A
CLASS="xref"
HREF="ch08_01.htm"
TITLE="Functions"
>Chapter 8, Functions</A
></A
></H2
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-179031"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
><A
CLASS="indexterm"
NAME="appa-idx-178724-0"
></A
><A
CLASS="indexterm"
NAME="appa-idx-178724-1"
></A
>sub card {
  my %card_map;
  @card_map{1..9} = qw(
    one two three four five six seven eight nine
  );

  <A
CLASS="indexterm"
NAME="appa-idx-178723-0"
></A
>my($num) = @_;
  if ($card_map{$num}) {
    $card_map{$num}; # return value
  } else {
    $num; # return value
  }
}
# driver routine:
while (<A
CLASS="indexterm"
NAME="appa-idx-178725-0"
></A
>&lt;&gt;) {
  chomp;
  print &quot;card of $_ is &quot;, &amp;card($_), &quot;\n&quot;;
}</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>&amp;card</CODE
> subroutine (so named because it returns a <EM
CLASS="emphasis"
>cardinal</EM
> name for a given value) begins by initializing a constant hash called <CODE
CLASS="literal"
>%card_map</CODE
>. This array has values such that <CODE
CLASS="literal"
>$card_map{6}</CODE
> is <CODE
CLASS="literal"
>six</CODE
>; consequently, the mapping is easy.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>if</CODE
> statement determines if the value is in range by looking the number up in the hash&nbsp;- if there's a corresponding hash element, the test is true, so that array element is returned. If there's no corresponding element (such as when <CODE
CLASS="literal"
>$num</CODE
> is <CODE
CLASS="literal"
>11</CODE
> or <CODE
CLASS="literal"
>-4</CODE
>), the value returned from the hash lookup is <CODE
CLASS="literal"
>undef</CODE
>, so the <CODE
CLASS="literal"
>else</CODE
>-branch of the <CODE
CLASS="literal"
>if</CODE
> statement is executed, returning the original number. You can also replace that entire <CODE
CLASS="literal"
>if</CODE
> statement with the single expression:</P
><PRE
CLASS="programlisting"
>  $card_map{$num} || $num;</PRE
><P
CLASS="para"
>If the value on the left of the <A
CLASS="indexterm"
NAME="appa-idx-181391-0"
></A
><CODE
CLASS="literal"
>||</CODE
> is true, it's the value for the entire expression, which then gets returned. If it's false (such as when <CODE
CLASS="literal"
>$num</CODE
> is out of range), the right side of the <CODE
CLASS="literal"
>||</CODE
> operator is evaluated, returning <CODE
CLASS="literal"
>$num</CODE
> as the return value.</P
><P
CLASS="para"
>The driver routine takes successive lines, <CODE
CLASS="literal"
>chomp</CODE
>ing off their newlines, and hands them one at a time to the <CODE
CLASS="literal"
>&amp;card</CODE
> routine, printing the result.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-179049"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>sub card { ...; } # from previous problem
print &quot;Enter first number: &quot;;
chomp($first = &lt;STDIN&gt;);
print &quot;Enter second number: &quot;;
chomp($second = &lt;STDIN&gt;);
$message = &amp;card($first) <A
CLASS="indexterm"
NAME="appa-idx-178727-0"
></A
>. &quot; plus &quot; .
  &amp;card($second) . &quot; equals &quot; .
  &amp;card($first+$second) . &quot;.\n&quot;;
print &quot;\u$message&quot;;</PRE
><P
CLASS="para"
>The first two <CODE
CLASS="literal"
>print</CODE
> statements prompt for two numbers, with the immediately following statements reading the values into <CODE
CLASS="literal"
>$first</CODE
> and <CODE
CLASS="literal"
>$second</CODE
>.</P
><P
CLASS="para"
>A string called <CODE
CLASS="literal"
>$message</CODE
> is then built up by calling <CODE
CLASS="literal"
>&amp;card</CODE
> three times, once for each value, and once for the sum.</P
><P
CLASS="para"
>After the message is constructed, its first character is uppercased by the case-shifting backslash operator <CODE
CLASS="literal"
>\u</CODE
>. The message is then printed.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-179066"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>sub card {
  my %card_map;
  @card_map{0..9} = qw(
    zero one two three four five six seven eight nine
  );

  my($num) = @_;
  my($negative);
  if ($num &lt; 0) {
    $negative = &quot;negative &quot;;
    $num = - $num;
  }
  if ($card_map{$num}) {
    $negative . $card_map{$num}; # return value
  } else {
    $negative . $num; # return value
  }
}</PRE
><P
CLASS="para"
>Here, we've given the <CODE
CLASS="literal"
>%card_map</CODE
> array a name for 0.</P
><P
CLASS="para"
>The first <CODE
CLASS="literal"
>if</CODE
> statement inverts the sign of <CODE
CLASS="literal"
>$num</CODE
>, and sets <CODE
CLASS="literal"
>$negative</CODE
> to the word negative, if the number is found to be less than 0. After this <CODE
CLASS="literal"
>if</CODE
> statement, the value of <CODE
CLASS="literal"
>$num</CODE
> is always non-negative, but we will have an appropriate prefix string in <CODE
CLASS="literal"
>$negative</CODE
>.</P
><P
CLASS="para"
>The second <CODE
CLASS="literal"
>if</CODE
> statement determines if the (now positive) <CODE
CLASS="literal"
>$num</CODE
> is within the hash. If so, the resulting hash value is appended to the prefix within <CODE
CLASS="literal"
>$negative</CODE
>, and returned. If not, the value within <CODE
CLASS="literal"
>$negative</CODE
> is attached to the original number.</P
><P
CLASS="para"
>That last <CODE
CLASS="literal"
>if</CODE
> statement can be replaced with the expression:</P
><PRE
CLASS="programlisting"
>  $negative . ($card_map{$num} || $num);</PRE
></LI
></OL
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_06.htm"
TITLE="A.6 Chapter 7, Regular Expressions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: A.6 Chapter 7, Regular Expressions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl on Win32 Systems"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_08.htm"
TITLE="A.8 Chapter 9, Miscellaneous Control Structures"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: A.8 Chapter 9, Miscellaneous Control Structures"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>A.6 Chapter 7, Regular Expressions</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>A.8 Chapter 9, Miscellaneous Control Structures</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
