<HTML
><HEAD
>
<TITLE>[Chapter 14] 14.4 Using fork</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:35:05Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch14_01.htm"
TITLE="14. Process Management"><LINK
REL="prev"
HREF="ch14_03.htm"
TITLE="14.3 Using Processes as Filehandles"><LINK
REL="next"
HREF="ch14_05.htm"
TITLE="14.5 Summary of Process Operations"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_03.htm"
TITLE="14.3 Using Processes as Filehandles"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.3 Using Processes as Filehandles"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch14_01.htm"
TITLE="14. Process Management"
>Chapter 14<BR>Process Management</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_05.htm"
TITLE="14.5 Summary of Process Operations"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.5 Summary of Process Operations"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch14-14964"
>14.4 Using fork</A
></H2
><P
CLASS="para"
>Still another way of creating an additional process is to clone the current Perl process using a UNIX primitive called <CODE
CLASS="literal"
>fork</CODE
>. The <A
CLASS="indexterm"
NAME="ch14-idx-744345-0"
></A
><CODE
CLASS="literal"
>fork</CODE
> function simply does what the<EM
CLASS="emphasis"
> fork </EM
><A
CLASS="indexterm"
NAME="ch14-idx-744346-0"
></A
>(2) system call does: it creates a clone of the current process. This clone (called the <A
CLASS="indexterm"
NAME="ch14-idx-744347-0"
></A
>child, with the original called the <A
CLASS="indexterm"
NAME="ch14-idx-744348-0"
></A
>parent) shares the same executable code, variables, and even open files. To distinguish the two processes, the <A
CLASS="indexterm"
NAME="ch14-idx-744349-0"
></A
>return value from <CODE
CLASS="literal"
>fork</CODE
> is zero for the child, and nonzero for the parent (or <CODE
CLASS="literal"
>undef</CODE
> if the system call fails). The nonzero value received by the parent happens to be the child's process ID. You can check for the return value and act accordingly:</P
><PRE
CLASS="programlisting"
>if (!defined($child_pid = fork())) {
    die &quot;cannot fork: $!&quot;;
} elsif ($child_pid) {
    # I'm the parent
} else {
    # I'm the child
} </PRE
><P
CLASS="para"
>To best use this clone, we need to learn about a few more things that parallel their UNIX namesakes closely: the <CODE
CLASS="literal"
>wait</CODE
>, <CODE
CLASS="literal"
>exit</CODE
>, and <CODE
CLASS="literal"
>exec</CODE
> functions.</P
><P
CLASS="para"
>The simplest of these is the <A
CLASS="indexterm"
NAME="ch14-idx-744350-0"
></A
><CODE
CLASS="literal"
>exec</CODE
> function. It's just like the <CODE
CLASS="literal"
>system</CODE
> function, except that instead of firing off a new process to execute the shell command, Perl replaces the current process with the shell. (In UNIX parlance, Perl <CODE
CLASS="literal"
>exec</CODE
>'s the shell.) After a successful <CODE
CLASS="literal"
>exec</CODE
>, the Perl program is gone, having been replaced by the requested program. For example,</P
><PRE
CLASS="programlisting"
>exec &quot;date&quot;;</PRE
><P
CLASS="para"
>replaces the current Perl program with the <EM
CLASS="emphasis"
>date</EM
> command, causing the output of the <EM
CLASS="emphasis"
>date</EM
> to go to the standard output of the Perl program. When the <EM
CLASS="emphasis"
>date</EM
> command finishes, there's nothing more to do because the Perl program is long gone.</P
><P
CLASS="para"
>Another way of looking at this is that the <A
CLASS="indexterm"
NAME="ch14-idx-744351-0"
></A
><CODE
CLASS="literal"
>system</CODE
> function is like a <CODE
CLASS="literal"
>fork</CODE
> followed by an <CODE
CLASS="literal"
>exec</CODE
>, as follows:</P
><PRE
CLASS="programlisting"
># METHOD 1... using system:
system(&quot;date&quot;);

# METHOD 2... using fork/exec:
unless (fork) {
    # fork returned zero, so I'm the child, and I exec:
    exec(&quot;date&quot;); # child process becomes the date command
}</PRE
><P
CLASS="para"
>Using <CODE
CLASS="literal"
>fork</CODE
> and <CODE
CLASS="literal"
>exec</CODE
> this way isn't quite right though, because the <EM
CLASS="emphasis"
>date</EM
> command and the parent process are both chugging along at the same time, possibly intermingling their output and generally mucking things up. What we need is a way to tell the parent to wait until the child process completes. That's exactly what the <A
CLASS="indexterm"
NAME="ch14-idx-744352-0"
></A
><CODE
CLASS="literal"
>wait</CODE
> function does; it waits until the <A
CLASS="indexterm"
NAME="ch14-idx-744353-0"
></A
>child (any child, to be precise) has completed. The <CODE
CLASS="literal"
>waitpid</CODE
> function is more discriminating: it waits for a specific child process to complete rather just any kid:</P
><PRE
CLASS="programlisting"
>if (!defined($kidpid = fork())) {
    # fork returned undef, so failed
    die &quot;cannot fork: $!&quot;;
} elsif ($kidpid == 0) {
                # fork returned 0, so this branch is the child
    exec(&quot;date&quot;);
                # if the exec fails, fall through to the next statement
    die &quot;can't exec date: $!&quot;;
} else { 
                # fork returned neither 0 nor undef, 
                # so this branch is the parent
    waitpid($kidpid, 0);
} </PRE
><P
CLASS="para"
>If this all seems rather fuzzy to you, you should probably study up on the <EM
CLASS="emphasis"
>fork </EM
>(2) and <EM
CLASS="emphasis"
>exec </EM
>(2) system calls in a traditional UNIX text, because Perl is pretty much just passing the function calls right down to the UNIX system calls.</P
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch14-idx-744354-0"
></A
><CODE
CLASS="literal"
>exit</CODE
> function causes an immediate exit from the current Perl process. You'd use this to abort a Perl program from somewhere in the middle, or with <CODE
CLASS="literal"
>fork</CODE
> to execute some Perl code in a process and then quit. Here's a case of removing some files in <EM
CLASS="emphasis"
>/tmp </EM
>in the background using a forked Perl process:</P
><PRE
CLASS="programlisting"
>unless (defined ($pid = fork)) {
    die &quot;cannot fork: $!&quot;;
} 
unless ($pid) {
    unlink &lt;/tmp/badrock.*&gt;;     # blast those files
    exit;                        # the child stops here
} 
                                 # Parent continues here
waitpid($pid, 0);                # must clean up after dead kid</PRE
><P
CLASS="para"
>Without the <CODE
CLASS="literal"
>exit</CODE
>, the child process would continue executing Perl code (at the line marked <CODE
CLASS="literal"
>Parent</CODE
> <CODE
CLASS="literal"
>continues</CODE
> <CODE
CLASS="literal"
>here</CODE
>), and that's definitely not what we want.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>exit</CODE
> function takes an optional parameter, which serves as the numeric <A
CLASS="indexterm"
NAME="ch14-idx-744355-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-744355-1"
></A
>exit value that can be noticed by the parent process. The default is to exit with a zero value, indicating that everything went OK.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_03.htm"
TITLE="14.3 Using Processes as Filehandles"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.3 Using Processes as Filehandles"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_05.htm"
TITLE="14.5 Summary of Process Operations"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.5 Summary of Process Operations"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>14.3 Using Processes as Filehandles</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>14.5 Summary of Process Operations</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
