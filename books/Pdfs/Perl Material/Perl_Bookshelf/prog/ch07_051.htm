<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.2.51 Safe&nbsp;- Create Safe Namespaces for Evaluating Perl Code</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T02:03:28Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_02.htm"
TITLE="7.2 Library Modules"><LINK
REL="prev"
HREF="ch07_050.htm"
TITLE="7.2.50 Pod::Text&nbsp;- Convert POD Data to Formatted ASCII Text"><LINK
REL="next"
HREF="ch07_052.htm"
TITLE="7.2.52 SDBM_File&nbsp;- Tied Access to SDBM Files"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_050.htm"
TITLE="7.2.50 Pod::Text&nbsp;- Convert POD Data to Formatted ASCII Text"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.50 Pod::Text&nbsp;- Convert POD Data to Formatted ASCII Text"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. The Standard Perl Library"
>Chapter 7<BR>The Standard Perl Library</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_052.htm"
TITLE="7.2.52 SDBM_File&nbsp;- Tied Access to SDBM Files"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.52 SDBM_File&nbsp;- Tied Access to SDBM Files"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="AUTOID-26217"
>7.2.51 Safe&nbsp;- Create Safe Namespaces for Evaluating Perl Code</A
></H3
><PRE
CLASS="programlisting"
>use Safe;
$cpt = new Safe;  # create a new safe compartment</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH07.SAFE1"
></A
><A
CLASS="indexterm"
NAME="CH07.SAFE2"
></A
><A
CLASS="indexterm"
NAME="CH07.SAFE3"
></A
><A
CLASS="indexterm"
NAME="CH07.SAFE4"
></A
><A
CLASS="indexterm"
NAME="CH07.SAFE5"
></A
>The Safe extension module allows the creation of compartments in which
untrusted Perl code can be evaluated.  Each compartment provides a new
namespace and has an associated operator mask.</P
><P
CLASS="para"
>The root of the namespace (that is, <CODE
CLASS="literal"
>main::</CODE
>) is changed to a
different package, and code evaluated in the compartment cannot
refer to variables outside this namespace, even with run-time
glob lookups and other tricks.  Code that is compiled outside
the compartment can choose to place variables into (or share
variables with) the compartment's namespace, and only that
data will be visible to code evaluated in the compartment.</P
><P
CLASS="para"
>By default, the only variables shared with compartments are the
underscore variables <B
CLASS="emphasis.bold"
>$_</B
> and <B
CLASS="emphasis.bold"
>@_</B
> (and, technically, the much less
frequently used <CODE
CLASS="literal"
>%_</CODE
>, the <CODE
CLASS="literal"
>_</CODE
> filehandle and so on).  This is because
otherwise Perl operators that default to <CODE
CLASS="literal"
>$_</CODE
> would not work and neither
would the assignment of arguments to <CODE
CLASS="literal"
>@_</CODE
> on subroutine entry.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH07.SAFE6"
></A
>Each compartment has an associated operator mask with which you can exclude
particular Perl operators from the compartment.  (The mask syntax is explained
below.)  Recall that Perl code is compiled into an internal format before
execution.  Evaluating Perl code (for example, via <CODE
CLASS="literal"
>eval</CODE
>
<CODE
CLASS="replaceable"
><I
>STRING</I
></CODE
> or <CODE
CLASS="literal"
>do</CODE
>
<CODE
CLASS="replaceable"
><I
>FILE</I
></CODE
>) causes the code to be compiled into an internal
format and then, provided there was no error in the compilation, executed.  Code
evaluated in a compartment is compiled subject to the compartment's operator
mask.  Attempting to evaluate compartmentalized code that contains a masked
operator will cause the compilation to fail with an error.  The code will not be
executed.</P
><P
CLASS="para"
>By default, the operator mask for a newly created compartment masks out all
operations that give access to the system in some sense.  This includes masking
off operators such as <A
CLASS="xref"
HREF="ch03_167.htm"
TITLE="system"
><B
CLASS="xref.cmd"
>system</B
></A
>, <A
CLASS="xref"
HREF="ch03_102.htm"
TITLE="open"
><B
CLASS="xref.cmd"
>open</B
></A
>, <A
CLASS="xref"
HREF="ch03_015.htm"
TITLE="chown"
><B
CLASS="xref.cmd"
>chown</B
></A
>, and <A
CLASS="xref"
HREF="ch03_145.htm"
TITLE="shmget"
><B
CLASS="xref.cmd"
>shmget</B
></A
>, but operators such as <A
CLASS="xref"
HREF="ch03_110.htm"
TITLE="print"
><B
CLASS="xref.cmd"
>print</B
></A
>, <A
CLASS="xref"
HREF="ch03_166.htm"
TITLE="sysread"
><B
CLASS="xref.cmd"
>sysread</B
></A
>, and
<CODE
CLASS="literal"
>&lt;FILEHANDLE&gt;</CODE
> are not masked off.  These file operators
are allowed since, in order for the code in the compartment to have access to a
filehandle, the code outside the compartment must have explicitly placed the
filehandle variable inside the compartment.</P
><P
CLASS="para"
>Since it is only at the compilation stage that the operator mask applies,
controlled access to potentially unsafe operations can be achieved by having a
handle to a wrapper subroutine (written outside the compartment) placed into the
compartment. For example:</P
><PRE
CLASS="programlisting"
>$cpt = new Safe;
sub wrapper {
    ;# vet arguments and perform potentially unsafe operations
}
$cpt-&gt;share('&amp;wrapper');  # see share method below</PRE
><P
CLASS="para"
>An operator mask exists at user-level as a string of bytes of length
<CODE
CLASS="literal"
>MAXO</CODE
>, each of which is either <CODE
CLASS="literal"
>0x00</CODE
> or
<CODE
CLASS="literal"
>0x01</CODE
>.  Here, <CODE
CLASS="literal"
>MAXO</CODE
> is the number of
operators in the current version of Perl.  The subroutine
<CODE
CLASS="literal"
>MAXO</CODE
> (available for export by package Safe) returns the
number of operators in the currently running Perl executable.  The presence of a
<CODE
CLASS="literal"
>0x01</CODE
> byte at offset <CODE
CLASS="replaceable"
><I
>n</I
></CODE
> of the
string indicates that operator number <CODE
CLASS="replaceable"
><I
>n</I
></CODE
> should be
masked (that is, disallowed).  The Safe extension makes available routines for
converting from operator names to operator numbers (and vice versa) and for
converting from a list of operator names to the corresponding mask (and vice
versa).</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.86"
>7.2.51.1 Methods in class Safe</A
></H4
><P
CLASS="para"
>To create a new compartment, use:</P
><PRE
CLASS="programlisting"
>$cpt = new Safe <CODE
CLASS="replaceable"
><I
>NAMESPACE</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>MASK</I
></CODE
>;</PRE
><P
CLASS="para"
>where <CODE
CLASS="replaceable"
><I
>NAMESPACE</I
></CODE
> is the root namespace to use for the
compartment (defaults to <CODE
CLASS="literal"
>Safe::Root000000000</CODE
>, auto-incremented
for each new compartment).  <CODE
CLASS="replaceable"
><I
>MASK</I
></CODE
> is the operator mask to use.
Both arguments are optional.</P
><P
CLASS="para"
>The following methods can then be used on the compartment
object returned by the above constructor.  The object argument
is implicit in each case.</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>root</CODE
>(<CODE
CLASS="replaceable"
><I
>NAMESPACE</I
></CODE
><CODE
CLASS="literal"
>)</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A get-or-set method for the compartment's namespace.  With the
<CODE
CLASS="replaceable"
><I
>NAMESPACE</I
></CODE
> argument present, it sets the root namespace for the
compartment.  With no <CODE
CLASS="replaceable"
><I
>NAMESPACE</I
></CODE
> argument present, it returns the
current root namespace of the compartment.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>mask</CODE
>(<CODE
CLASS="replaceable"
><I
>MASK</I
></CODE
><CODE
CLASS="literal"
>)</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A get-or-set method for the compartment's operator mask.
With the <CODE
CLASS="replaceable"
><I
>MASK</I
></CODE
> argument present, it sets the operator mask for the
compartment.  With no <CODE
CLASS="replaceable"
><I
>MASK</I
></CODE
> argument present, it returns the
current operator mask of the compartment.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>trap</CODE
>(<CODE
CLASS="replaceable"
><I
>OP</I
></CODE
><CODE
CLASS="literal"
>, ...)</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Sets bits in the compartment's operator mask corresponding
to each operator named in the list of arguments.  Each <CODE
CLASS="replaceable"
><I
>OP</I
></CODE
> can be
either the name of an operation or its number.  See <EM
CLASS="emphasis"
>opcode.h</EM
> or
<EM
CLASS="emphasis"
>opcode.pl</EM
> in the main Perl distribution for a canonical list of
operator names.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>untrap(</CODE
><CODE
CLASS="replaceable"
><I
>OP</I
></CODE
><CODE
CLASS="literal"
>, ...)</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Resets bits in the compartment's operator mask corresponding
to each operator named in the list of arguments.  Each <CODE
CLASS="replaceable"
><I
>OP</I
></CODE
> can be
either the name of an operation or its number.  See <EM
CLASS="emphasis"
>opcode.h</EM
> or
<EM
CLASS="emphasis"
>opcode.pl</EM
> in the main Perl distribution for a canonical list of
operator names.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>share(</CODE
><CODE
CLASS="replaceable"
><I
>VARNAME</I
></CODE
><CODE
CLASS="literal"
>, ...)</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Shares the variables in the argument list with the compartment.  Each
<CODE
CLASS="replaceable"
><I
>VARNAME</I
></CODE
> must be a string containing the name of a variable with
a leading type identifier included.  Examples of legal variable names
are <CODE
CLASS="literal"
>$foo</CODE
> for a scalar, <CODE
CLASS="literal"
>@foo</CODE
> for an array, <CODE
CLASS="literal"
>%foo</CODE
>
for a hash, <CODE
CLASS="literal"
>&amp;foo</CODE
> for a subroutine and <CODE
CLASS="literal"
>*foo</CODE
> for a
typeglob.  (A typeglob results in the sharing of all symbol table
entries associated with <CODE
CLASS="literal"
>foo</CODE
>, including scalar, array, hash,
subroutine, and filehandle.)</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>varglob(</CODE
><CODE
CLASS="replaceable"
><I
>VARNAME</I
></CODE
><CODE
CLASS="literal"
>)</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns a typeglob for the symbol table entry of <CODE
CLASS="replaceable"
><I
>VARNAME</I
></CODE
> in the package
of the compartment. <CODE
CLASS="replaceable"
><I
>VARNAME</I
></CODE
> must be the name of a variable without
any leading type marker. For example:</P
><PRE
CLASS="programlisting"
>$cpt = new Safe 'Root';
$Root::foo = &quot;Hello world&quot;;
# Equivalent version which doesn't need to know $cpt's package name:
${$cpt-&gt;varglob('foo')} = &quot;Hello world&quot;;</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>reval(</CODE
><CODE
CLASS="replaceable"
><I
>STRING</I
></CODE
><CODE
CLASS="literal"
>)</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Evaluates <CODE
CLASS="replaceable"
><I
>STRING</I
></CODE
> as Perl code inside the compartment.
The code can only see the compartment's namespace (as returned by the
<CODE
CLASS="literal"
>root()</CODE
> method).  Any attempt by code in
<CODE
CLASS="replaceable"
><I
>STRING</I
></CODE
> to use an operator which is in the
compartment's mask will cause an error (at run-time of the main program, but at
compile-time for the code in <CODE
CLASS="replaceable"
><I
>STRING</I
></CODE
>).  If the code in
<CODE
CLASS="replaceable"
><I
>STRING</I
></CODE
> includes an <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
> (and the <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
> operator is permitted) then the
error can occur at run-time for <CODE
CLASS="replaceable"
><I
>STRING</I
></CODE
> (although it
is at compile-time for the <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
> within
<CODE
CLASS="replaceable"
><I
>STRING</I
></CODE
>).  The error is of the form &quot;<CODE
CLASS="literal"
>%s
trapped by operation mask operation....</CODE
>&quot;  If an operation
is trapped in this way, then the code in <CODE
CLASS="replaceable"
><I
>STRING</I
></CODE
> will
not be executed.  If such a trapped operation occurs, or if any other
compile-time or return error occurs, then <B
CLASS="emphasis.bold"
>$@</B
> is
set to the error message, just as with an <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
>.  If there is no error, then the
method returns the value of the last expression evaluated, or a return statement
may be used, just as with subroutines and <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>rdo(</CODE
><CODE
CLASS="replaceable"
><I
>FILENAME</I
></CODE
><CODE
CLASS="literal"
>)</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Evaluates the contents of file <CODE
CLASS="replaceable"
><I
>FILENAME</I
></CODE
> inside the compartment.
See the <CODE
CLASS="literal"
>reval()</CODE
> method earlier for further details.</P
></DD
></DL
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.87"
>7.2.51.2 Subroutines in package Safe</A
></H4
><P
CLASS="para"
>The Safe package contains subroutines for manipulating operator
names and operator masks.  All are available for export by the package.
The canonical list of operator names is contained in the array
<CODE
CLASS="literal"
>op_name</CODE
> defined and initialized in file <EM
CLASS="emphasis"
>opcode.h</EM
> of the Perl
source distribution.</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>ops_to_mask(</CODE
><CODE
CLASS="replaceable"
><I
>OP</I
></CODE
><CODE
CLASS="literal"
>, ...)</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Takes a list of operator names and returns an operator mask
with precisely those operators masked.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>mask_to_ops(</CODE
><CODE
CLASS="replaceable"
><I
>MASK</I
></CODE
><CODE
CLASS="literal"
>)</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Takes an operator mask and returns a list of operator names
corresponding to those operators which are masked in <CODE
CLASS="replaceable"
><I
>MASK</I
></CODE
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>opcode(</CODE
><CODE
CLASS="replaceable"
><I
>OP</I
></CODE
><CODE
CLASS="literal"
>, ...)</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Takes a list of operator names and returns the corresponding
list of opcodes (which can then be used as byte offsets into a mask).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>opname(</CODE
><CODE
CLASS="replaceable"
><I
>OP</I
></CODE
><CODE
CLASS="literal"
>, ...)</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Takes a list of opcodes and returns the corresponding list of
operator names.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>fullmask</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns a mask with all operators masked.
It returns the string <CODE
CLASS="literal"
>&quot;\001&quot; x MAXO()</CODE
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>emptymask</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns a mask with all operators unmasked.
It returns the string <CODE
CLASS="literal"
>&quot;\0&quot; x MAXO()</CODE
>.  This is useful if you
want a compartment to make use of the name-space protection
features but do not want the default restrictive mask.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>MAXO</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>This returns the number of operators (hence the length of an
operator mask).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>op_mask</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>This returns the operator mask that is actually in effect at the
time the invocation to the subroutine is compiled.
This is probably not terribly useful.</P
></DD
></DL
><A
CLASS="indexterm"
NAME="AUTOID-26431"
></A
><A
CLASS="indexterm"
NAME="AUTOID-26432"
></A
><A
CLASS="indexterm"
NAME="AUTOID-26433"
></A
><A
CLASS="indexterm"
NAME="AUTOID-26434"
></A
><A
CLASS="indexterm"
NAME="AUTOID-26435"
></A
><A
CLASS="indexterm"
NAME="AUTOID-26436"
></A
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_050.htm"
TITLE="7.2.50 Pod::Text&nbsp;- Convert POD Data to Formatted ASCII Text"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.50 Pod::Text&nbsp;- Convert POD Data to Formatted ASCII Text"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_052.htm"
TITLE="7.2.52 SDBM_File&nbsp;- Tied Access to SDBM Files"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.52 SDBM_File&nbsp;- Tied Access to SDBM Files"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.2.50 Pod::Text&nbsp;- Convert POD Data to Formatted ASCII Text</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.2.52 SDBM_File&nbsp;- Tied Access to SDBM Files</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
