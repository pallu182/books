<HTML
><HEAD
>
<TITLE>[Chapter 4] 4.2 The if/unless Statement</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:32:28Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. Control Structures"><LINK
REL="prev"
HREF="ch04_01.htm"
TITLE="4.1 Statement Blocks"><LINK
REL="next"
HREF="ch04_03.htm"
TITLE="4.3 The while/until Statement"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_01.htm"
TITLE="4.1 Statement Blocks"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.1 Statement Blocks"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. Control Structures"
>Chapter 4<BR>Control Structures</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_03.htm"
TITLE="4.3 The while/until Statement"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.3 The while/until Statement"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch04-31636"
>4.2 The if/unless Statement</A
></H2
><P
CLASS="para"
>Next up in order of complexity is the <A
CLASS="indexterm"
NAME="ch04-idx-437531-0"
></A
><CODE
CLASS="literal"
>if</CODE
> statement. This construct takes a <A
CLASS="indexterm"
NAME="ch04-idx-437532-0"
></A
>control expression (evaluated for its truth) and a block. It may optionally have an <EM
CLASS="emphasis"
>else</EM
> followed by a block as well. In other words, it looks like this:</P
><PRE
CLASS="programlisting"
>if (<CODE
CLASS="replaceable"
><I
>some_expression</I
></CODE
>) {
    <CODE
CLASS="replaceable"
><I
>true_statement_1</I
></CODE
>;
    <CODE
CLASS="replaceable"
><I
>true_statement_2</I
></CODE
>;
    <CODE
CLASS="replaceable"
><I
>true_statement_3</I
></CODE
>;
} <A
CLASS="indexterm"
NAME="ch04-idx-437551-0"
></A
>else {
    <CODE
CLASS="replaceable"
><I
>false_statement_1</I
></CODE
>;
    <CODE
CLASS="replaceable"
><I
>false_statement_2</I
></CODE
>;
    <CODE
CLASS="replaceable"
><I
>false_statement_3</I
></CODE
>;
}</PRE
><P
CLASS="para"
>(If you're a C or Java hacker, you should note that the <A
CLASS="indexterm"
NAME="ch04-idx-437533-0"
></A
>curly braces are required. This eliminates the need for a "<A
CLASS="indexterm"
NAME="ch04-idx-437534-0"
></A
>confusing dangling else" rule.)</P
><P
CLASS="para"
>During execution, Perl evaluates the control expression. If the expression is true, the first block (the <CODE
CLASS="replaceable"
><I
>true_statement</I
></CODE
> statements above) is executed. If the expression is false, the second block (the <CODE
CLASS="replaceable"
><I
>false_statement</I
></CODE
> statements above) is executed instead.</P
><P
CLASS="para"
>But what constitutes <A
CLASS="indexterm"
NAME="ch04-idx-437535-0"
></A
><A
CLASS="indexterm"
NAME="ch04-idx-437535-1"
></A
>true and false? In Perl, the rules are slightly weird, but they give you the expected results. The control expression is evaluated for a <EM
CLASS="emphasis"
>string</EM
> value in scalar context (if it's already a string, no change, but if it's a number, it is converted to a string[<A
CLASS="footnote"
HREF="#ch04-pgfId-437582"
>1</A
>]). If this string is either the empty string (with a length of zero), or a string consisting of the single character <CODE
CLASS="literal"
>&quot;0&quot;</CODE
> (the digit zero), then the value of the expression is false. Anything else is true automatically. Why such funny rules? Because it makes it easy to branch on an emptyish versus nonempty string, as well as a zero versus nonzero number, without having to create two versions of interpreting true and false values. Here are some examples of true and false interpretations:<PRE
CLASS="programlisting"
>0       # converts to &quot;0&quot;, so false
1-1     # computes to 0, then converts to &quot;0&quot;, so false
1       # converts to &quot;1&quot;, so true
&quot;&quot;      # empty string, so false
&quot;1&quot;     # not &quot;&quot; or &quot;0&quot;, so true
&quot;00&quot;    # not &quot;&quot; or &quot;0&quot;, so true (this is weird, watch out)
&quot;0.000&quot; # also true for the same reason and warning
undef   # evaluates to &quot;&quot;, so false</PRE
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch04-pgfId-437582"
>[1]</A
> Internally, this isn't quite true. But it acts like this is what it does.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Practically speaking, interpretation of values as true or false is fairly intuitive. Don't let us scare you.</P
><P
CLASS="para"
>Here's an example of a complete <A
CLASS="indexterm"
NAME="ch04-idx-437536-0"
></A
><CODE
CLASS="literal"
>if</CODE
> statement:</P
><PRE
CLASS="programlisting"
>print &quot;how old are you? &quot;;
$a = &lt;STDIN&gt;;
chomp($a);
if ($a &lt; 18) {
    print &quot;So, you're not old enough to vote, eh?\n&quot;;
} else {
    print &quot;Old enough!  Cool!  So go vote!\n&quot;;
    $voter++; # count the voters for later
}</PRE
><P
CLASS="para"
>You can omit the <CODE
CLASS="literal"
>else</CODE
> block, leaving just a <EM
CLASS="emphasis"
>"then"</EM
> part, as in:</P
><PRE
CLASS="programlisting"
>print &quot;how old are you? &quot;;
$a = &lt;STDIN&gt;;
chomp($a);
if ($a &lt; 18) {
        print &quot;So, you're not old enough to vote, eh?\n&quot;;
}</PRE
><P
CLASS="para"
>Sometimes, you want to leave off the <EM
CLASS="emphasis"
>"then"</EM
> part and have just an <CODE
CLASS="literal"
>else</CODE
> part, because it is more natural to say "do that if this is false," rather than "do that if not this is true." Perl handles this with the <A
CLASS="indexterm"
NAME="ch04-idx-437537-0"
></A
><CODE
CLASS="literal"
>unless</CODE
> variation:</P
><PRE
CLASS="programlisting"
>print &quot;how old are you? &quot;;
$a = &lt;STDIN&gt;;
chomp($a);
unless ($a &lt; 18) {
    print &quot;Old enough!  Cool!  So go vote!\n&quot;;
    $voter++;
}</PRE
><P
CLASS="para"
>Replacing <CODE
CLASS="literal"
>if</CODE
> with <CODE
CLASS="literal"
>unless</CODE
> is in effect saying "If the control expression is false, do...." (An <CODE
CLASS="literal"
>unless</CODE
> can also have an <CODE
CLASS="literal"
>else</CODE
>, just like an <CODE
CLASS="literal"
>if</CODE
>.)</P
><P
CLASS="para"
>If you have more than two possible choices, add an <CODE
CLASS="literal"
>elsif</CODE
> branch to the <CODE
CLASS="literal"
>if</CODE
> statement, like so:</P
><PRE
CLASS="programlisting"
>if (<CODE
CLASS="replaceable"
><I
>some_expression_one</I
></CODE
>) {
    <CODE
CLASS="replaceable"
><I
>one_true_statement_1</I
></CODE
>;
    <CODE
CLASS="replaceable"
><I
>one_true_statement_2</I
></CODE
>;
    <CODE
CLASS="replaceable"
><I
>one_true_statement_3</I
></CODE
>;
} <A
CLASS="indexterm"
NAME="ch04-idx-437552-0"
></A
>elsif (<CODE
CLASS="replaceable"
><I
>some_expression_two</I
></CODE
>) {
    <CODE
CLASS="replaceable"
><I
>two_true_statement_1</I
></CODE
>;
    <CODE
CLASS="replaceable"
><I
>two_true_statement_2</I
></CODE
>;
    <CODE
CLASS="replaceable"
><I
>two_true_statement_3</I
></CODE
>;
} elsif (<CODE
CLASS="replaceable"
><I
>some_expression_three</I
></CODE
>) {
    <CODE
CLASS="replaceable"
><I
>three_true_statement_1</I
></CODE
>;
    <CODE
CLASS="replaceable"
><I
>three_true_statement_2</I
></CODE
>;
    <CODE
CLASS="replaceable"
><I
>three_true_statement_3</I
></CODE
>;
} else {
    <CODE
CLASS="replaceable"
><I
>all_false_statement_1</I
></CODE
>;
    <CODE
CLASS="replaceable"
><I
>all_false_statement_2</I
></CODE
>;
    <CODE
CLASS="replaceable"
><I
>all_false_statement_3</I
></CODE
>;
}</PRE
><P
CLASS="para"
>Each expression (here, <CODE
CLASS="replaceable"
><I
>some_expression_one</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>some_expression_two</I
></CODE
>, and <CODE
CLASS="replaceable"
><I
>some_expression_three</I
></CODE
>) is computed in turn. If an expression is true, the corresponding branch is executed, and all remaining control expressions and corresponding statement blocks are skipped. If all expressions are false, the <CODE
CLASS="literal"
>else</CODE
> branch is executed (if there is one). You don't have to have an <CODE
CLASS="literal"
>else</CODE
> block, but it is always a good idea. You may have as many <CODE
CLASS="literal"
>elsif</CODE
> branches as you wish.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_01.htm"
TITLE="4.1 Statement Blocks"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.1 Statement Blocks"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_03.htm"
TITLE="4.3 The while/until Statement"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.3 The while/until Statement"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.1 Statement Blocks</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.3 The while/until Statement</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
