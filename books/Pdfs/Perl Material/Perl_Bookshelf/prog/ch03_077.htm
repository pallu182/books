<HTML
><HEAD
>
<TITLE>[Chapter 3] 3.2.77 ioctl</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:50:46Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_02.htm"
TITLE="3.2 Perl Functions in Alphabetical Order"><LINK
REL="prev"
HREF="ch03_076.htm"
TITLE="3.2.76 int"><LINK
REL="next"
HREF="ch03_078.htm"
TITLE="3.2.78 join"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_076.htm"
TITLE="3.2.76 int"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.76 int"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. Functions"
>Chapter 3<BR>Functions</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_078.htm"
TITLE="3.2.78 join"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.78 join"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CMD-IOCTL"
>3.2.77 ioctl</A
></H3
><PRE
CLASS="programlisting"
>ioctl <CODE
CLASS="replaceable"
><I
>FILEHANDLE</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>FUNCTION</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>SCALAR</I
></CODE
></PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-10861"
></A
>This function implements the <EM
CLASS="emphasis"
>ioctl</EM
>(2) system call.
You'll probably have to say:</P
><PRE
CLASS="programlisting"
>require &quot;ioctl.ph&quot;;
    # probably /usr/local/lib/perl/ioctl.ph</PRE
><P
CLASS="para"
>first to get the correct function definitions.  If <EM
CLASS="emphasis"
>ioctl.ph</EM
>
doesn't exist or doesn't have the correct definitions you'll have to
roll your own, based on your C header files such as
<EM
CLASS="emphasis"
>&lt;sys/ioctl.h&gt;</EM
>.  (The Perl distribution includes a script called
<EM
CLASS="emphasis"
>h2ph</EM
> to help you do this, but it's non-trivial.)
<CODE
CLASS="replaceable"
><I
>SCALAR</I
></CODE
> will be read and/or written depending on the <CODE
CLASS="replaceable"
><I
>FUNCTION</I
></CODE
>&nbsp;- a
pointer to the string value of <CODE
CLASS="replaceable"
><I
>SCALAR</I
></CODE
> will be passed as the third
argument of the actual <EM
CLASS="emphasis"
>ioctl</EM
>(2) call. (If <CODE
CLASS="replaceable"
><I
>SCALAR</I
></CODE
> has no string value but
does have a numeric value, that value will be passed directly rather
than a pointer to the string value.)  The <A
CLASS="xref"
HREF="ch03_105.htm"
TITLE="pack"
><B
CLASS="xref.cmd"
>pack</B
></A
> and
<A
CLASS="xref"
HREF="ch03_182.htm"
TITLE="unpack"
><B
CLASS="xref.cmd"
>unpack</B
></A
> functions are useful for manipulating the values of
structures used by <A
CLASS="xref"
HREF="ch03_077.htm"
TITLE="ioctl"
><B
CLASS="xref.cmd"
>ioctl</B
></A
>.
The following example sets the erase character to DEL on many UNIX systems
(see the POSIX module in <A
CLASS="xref"
HREF="ch07_01.htm"
TITLE="The Standard Perl Library"
>Chapter 7</A
> for a slightly more portable interface):</P
><PRE
CLASS="programlisting"
>require 'ioctl.ph';
$getp = &amp;TIOCGETP or die &quot;NO TIOCGETP&quot;;
$sgttyb_t = &quot;ccccs&quot;;            # 4 chars and a short
if (ioctl STDIN, $getp, $sgttyb) {
    @ary = unpack $sgttyb_t, $sgttyb;
    $ary[2] = 127;
    $sgttyb = pack $sgttyb_t, @ary;
    ioctl STDIN, &amp;TIOCSETP, $sgttyb
        or die &quot;Can't ioctl TIOCSETP: $!&quot;;
}</PRE
><P
CLASS="para"
>The return value of <A
CLASS="xref"
HREF="ch03_077.htm"
TITLE="ioctl"
><B
CLASS="xref.cmd"
>ioctl</B
></A
> (and <A
CLASS="xref"
HREF="ch03_037.htm"
TITLE="fcntl"
><B
CLASS="xref.cmd"
>fcntl</B
></A
>) is as follows:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>System call returns</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Perl returns</TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>-1</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>undefined value</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>0</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>string &quot;<CODE
CLASS="literal"
>0 but true</CODE
>&quot;</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>anything else</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>that number</TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Thus Perl returns true on success and false on failure, yet you can still
easily determine the actual value returned by the operating system:</P
><PRE
CLASS="programlisting"
>$retval = ioctl(...) or $retval = -1;
printf &quot;System returned %d\n&quot;, $retval;</PRE
><P
CLASS="para"
>Calls to <B
CLASS="emphasis.bold"
>ioctl</B
> should not be considered portable.  If, say, you're
merely turning off echo once for the whole script, it's much more
portable (and not much slower) to say:</P
><PRE
CLASS="programlisting"
>system &quot;stty -echo&quot;;   # Works on most UNIX boxen.</PRE
><P
CLASS="para"
>Just because you <EM
CLASS="emphasis"
>can</EM
> do something in Perl doesn't mean you
<EM
CLASS="emphasis"
>ought</EM
> to.  To quote the Apostle Paul, &quot;Everything is
permissible&nbsp;- but not everything is beneficial.&quot;</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_076.htm"
TITLE="3.2.76 int"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.76 int"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_078.htm"
TITLE="3.2.78 join"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.78 join"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.2.76 int</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.2.78 join</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
