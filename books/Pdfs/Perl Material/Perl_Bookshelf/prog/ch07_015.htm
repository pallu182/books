<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.2.15 Exporter&nbsp;- Default Import Method for Modules</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T02:01:58Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_02.htm"
TITLE="7.2 Library Modules"><LINK
REL="prev"
HREF="ch07_014.htm"
TITLE="7.2.14 Env&nbsp;- Import Environment Variables"><LINK
REL="next"
HREF="ch07_016.htm"
TITLE="7.2.16 ExtUtils::Install&nbsp;- Install Files from Here to There"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_014.htm"
TITLE="7.2.14 Env&nbsp;- Import Environment Variables"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.14 Env&nbsp;- Import Environment Variables"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. The Standard Perl Library"
>Chapter 7<BR>The Standard Perl Library</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_016.htm"
TITLE="7.2.16 ExtUtils::Install&nbsp;- Install Files from Here to There"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.16 ExtUtils::Install&nbsp;- Install Files from Here to There"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="AUTOID-20327"
>7.2.15 Exporter&nbsp;- Default Import Method for Modules</A
></H3
><PRE
CLASS="programlisting"
># in module YourModule.pm:
package YourModule;
use Exporter ();
@ISA = qw(Exporter);

@EXPORT = qw(...);              # Symbols to export by default.
@EXPORT_OK = qw(...);           # Symbols to export on request.
%EXPORT_TAGS = (tag =&gt; [...]);  # Define names for sets of symbols.

# in other files that wish to use YourModule:
use YourModule;                 # Import default symbols into my package.
use YourModule qw(...);         # Import listed symbols into my package.
use YourModule ();              # Do not import any symbols!</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH07.EXP1"
></A
><A
CLASS="indexterm"
NAME="CH07.EXP2"
></A
><A
CLASS="indexterm"
NAME="CH07.EXP3"
></A
>Any module may define a class method called <CODE
CLASS="literal"
>import()</CODE
>.  Perl
automatically calls a module's <CODE
CLASS="literal"
>import()</CODE
> method when processing the
<A
CLASS="xref"
HREF="ch03_185.htm"
TITLE="use"
><B
CLASS="xref.cmd"
>use</B
></A
> statement for the module.  The module itself doesn't have to
define the <CODE
CLASS="literal"
>import()</CODE
> method, though.  The Exporter module implements
a default <CODE
CLASS="literal"
>import()</CODE
> method that many modules choose to inherit
instead.  The Exporter module supplies the customary import semantics,
and any other <CODE
CLASS="literal"
>import()</CODE
> methods will tend to deviate from the
normal import semantics in various (hopefully documented) ways.
Now we'll talk about the normal import semantics.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.14"
>7.2.15.1 Specialized import lists</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-20348"
></A
><A
CLASS="indexterm"
NAME="AUTOID-20350"
></A
><A
CLASS="indexterm"
NAME="AUTOID-20353"
></A
><A
CLASS="indexterm"
NAME="AUTOID-20356"
></A
>Ignoring the class name, which is always the first argument to a class
method, the arguments that are passed into the <CODE
CLASS="literal"
>import()</CODE
> method are
known as an <EM
CLASS="emphasis"
>import list</EM
>.  Usually the import list is nothing more than a
list of subroutine or variable names, but occasionally you may want to
get fancy.  If the first entry in an import list begins with
<CODE
CLASS="literal"
>!</CODE
>, <CODE
CLASS="literal"
>:</CODE
>, or <CODE
CLASS="literal"
>/</CODE
>, the list is treated as a
series of specifications that either add to or delete from the list of
names to import.  They are processed left to right.  Specifications are
in the form:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Symbol</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Meaning</TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>[!]</CODE
><CODE
CLASS="replaceable"
><I
>name</I
></CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>This <CODE
CLASS="replaceable"
><I
>name</I
></CODE
> only</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>[!]:DEFAULT</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>All names in <CODE
CLASS="literal"
>@EXPORT</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>[!]:</CODE
><CODE
CLASS="replaceable"
><I
>tag</I
></CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>All names in <CODE
CLASS="literal"
>$EXPORT_TAGS{</CODE
><CODE
CLASS="replaceable"
><I
>tag</I
></CODE
><CODE
CLASS="literal"
>}</CODE
> anonymous list</TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>[!]/</CODE
><CODE
CLASS="replaceable"
><I
>pattern</I
></CODE
><CODE
CLASS="literal"
>/</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>All names in <CODE
CLASS="literal"
>@EXPORT</CODE
> and <CODE
CLASS="literal"
>@EXPORT_OK</CODE
> that match <CODE
CLASS="replaceable"
><I
>pattern</I
></CODE
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>A leading <CODE
CLASS="literal"
>!</CODE
> indicates that matching names should be deleted from the
list of names to import.  If the first specification is a deletion, it
is treated as though preceded by <CODE
CLASS="literal"
>:DEFAULT</CODE
>.  If you just want to import
extra names in addition to the default set, you will still need to
include <CODE
CLASS="literal"
>:DEFAULT</CODE
> explicitly.</P
><P
CLASS="para"
>For example, suppose that <EM
CLASS="emphasis"
>YourModule.pm</EM
> says:</P
><PRE
CLASS="programlisting"
>@EXPORT      = qw(A1 A2 A3 A4 A5);
@EXPORT_OK   = qw(B1 B2 B3 B4 B5);
%EXPORT_TAGS = (
    T1 =&gt; [qw(A1 A2 B1 B2)],
    T2 =&gt; [qw(A1 A2 B3 B4)]
);</PRE
><P
CLASS="para"
>Individual names in <CODE
CLASS="literal"
>EXPORT_TAGS</CODE
> must also appear in
<CODE
CLASS="literal"
>@EXPORT</CODE
> or <CODE
CLASS="literal"
>@EXPORT_OK</CODE
>.  Note that you cannot use the
tags directly within either <CODE
CLASS="literal"
>@EXPORT</CODE
> or <CODE
CLASS="literal"
>@EXPORT_OK</CODE
>
(though you could preprocess tags into either of those arrays, and in
fact, the <CODE
CLASS="literal"
>export_tags()</CODE
> and <CODE
CLASS="literal"
>export_ok_tags()</CODE
> functions below
do precisely that).</P
><P
CLASS="para"
>An application using YourModule can then say something like this:</P
><PRE
CLASS="programlisting"
>use YourModule qw(:DEFAULT :T2 !B3 A3);</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>:DEFAULT</CODE
> adds in <CODE
CLASS="literal"
>A1</CODE
>, <CODE
CLASS="literal"
>A2</CODE
>, <CODE
CLASS="literal"
>A3</CODE
>,
<CODE
CLASS="literal"
>A4</CODE
>, and <CODE
CLASS="literal"
>A5</CODE
>.  The <CODE
CLASS="literal"
>:T2</CODE
> adds in only <CODE
CLASS="literal"
>B3</CODE
> and
<CODE
CLASS="literal"
>B4</CODE
>, since <CODE
CLASS="literal"
>A1</CODE
> and <CODE
CLASS="literal"
>A2</CODE
> were already added.  The
<CODE
CLASS="literal"
>!B3</CODE
> then deletes <CODE
CLASS="literal"
>B3</CODE
>, and the <CODE
CLASS="literal"
>A3</CODE
> does nothing
because <CODE
CLASS="literal"
>A3</CODE
> was already included.
Other examples include:</P
><PRE
CLASS="programlisting"
>use Socket qw(!/^[AP]F_/ !SOMAXCONN !SOL_SOCKET);
use POSIX  qw(:errno_h :termios_h !TCSADRAIN !/^EXIT/);</PRE
><P
CLASS="para"
>Remember that most patterns (using <CODE
CLASS="literal"
>//</CODE
>) will need to be anchored
with a leading ^, for example, <CODE
CLASS="literal"
>/^EXIT/</CODE
> rather than <CODE
CLASS="literal"
>/EXIT/</CODE
>.</P
><P
CLASS="para"
>You can say:</P
><PRE
CLASS="programlisting"
>BEGIN { $Exporter::Verbose=1 }</PRE
><P
CLASS="para"
>in order to see how the
specifications are being processed and what is actually being imported
into modules.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.15"
>7.2.15.2 Module version checking</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-20443"
></A
><A
CLASS="indexterm"
NAME="AUTOID-20445"
></A
>The Exporter module will convert an attempt to import a number from a
module into a call to <CODE
CLASS="literal"
>$module_name-&gt;require_version($value)</CODE
>.
This can be used to validate that the version of the module being used
is greater than or equal to the required version.  The Exporter module
also supplies a default <CODE
CLASS="literal"
>require_version()</CODE
> method, which checks the
value of <CODE
CLASS="literal"
>$VERSION</CODE
> in the exporting module.</P
><P
CLASS="para"
>Since the default <CODE
CLASS="literal"
>require_version()</CODE
> method treats the
<CODE
CLASS="literal"
>$VERSION</CODE
> number as a simple numeric value, it will regard version
1.10 as lower than
1.9.  For this reason it is strongly recommended that the module developer use
numbers
with at least two decimal places; for example, 1.09.</P
><P
CLASS="para"
>Prior to release 5.004 or so of Perl, this only worked with modules that
use the Exporter module; in particular, this means that you can't check the
version of a class module that doesn't require the Exporter module.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.16"
>7.2.15.3 Managing unknown symbols</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-20458"
></A
>In some situations you may want to prevent certain symbols from being
exported.  Typically this applies to extensions with functions
or constants that may not exist on some systems.</P
><P
CLASS="para"
>The names of any symbols that cannot be exported should be listed
in the <CODE
CLASS="literal"
>@EXPORT_FAIL</CODE
> array.</P
><P
CLASS="para"
>If a module attempts to import any of these symbols, the Exporter
will give the module an opportunity to handle the situation before
generating an error.  The Exporter will call an <CODE
CLASS="literal"
>export_fail()</CODE
> method
with a list of the failed symbols:</P
><PRE
CLASS="programlisting"
>@failed_symbols = $module_name-&gt;export_fail(@failed_symbols);</PRE
><P
CLASS="para"
>If the <CODE
CLASS="literal"
>export_fail()</CODE
> method returns an empty list, then no error is
recorded and all requested symbols are exported.  If the returned
list is not empty, then an error is generated for each symbol and the
export fails.  The Exporter provides a default <CODE
CLASS="literal"
>export_fail()</CODE
> method that
simply returns the list unchanged.</P
><P
CLASS="para"
>Uses for the <CODE
CLASS="literal"
>export_fail()</CODE
> method include giving better error messages
for some symbols and performing lazy architectural checks.  Put more
symbols into <CODE
CLASS="literal"
>@EXPORT_FAIL</CODE
> by default and then take them out if someone
actually tries to use them and an expensive check shows that they are
usable on that platform.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.17"
>7.2.15.4 Tag handling utility functions</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-20474"
></A
>Since the symbols listed within <CODE
CLASS="literal"
>%EXPORT_TAGS</CODE
> must also appear in either
<CODE
CLASS="literal"
>@EXPORT</CODE
> or <CODE
CLASS="literal"
>@EXPORT_OK</CODE
>, two utility functions are provided
that allow you to easily add tagged sets of symbols to <CODE
CLASS="literal"
>@EXPORT</CODE
> or
<CODE
CLASS="literal"
>@EXPORT_OK:</CODE
></P
><PRE
CLASS="programlisting"
>%EXPORT_TAGS = (Bactrian =&gt; [qw(aa bb cc)], Dromedary =&gt; [qw(aa cc dd)]);</PRE
><PRE
CLASS="programlisting"
>Exporter::export_tags('Bactrian');     # add aa, bb and cc to @EXPORT
Exporter::export_ok_tags('Dromedary'); # add aa, cc and dd to @EXPORT_OK</PRE
><P
CLASS="para"
>Any names that are not tags are added to <CODE
CLASS="literal"
>@EXPORT</CODE
> or
<CODE
CLASS="literal"
>@EXPORT_OK</CODE
> unchanged, but will trigger a warning (with
<B
CLASS="emphasis.bold"
>-w</B
>) to avoid misspelt tag names being
silently added to <CODE
CLASS="literal"
>@EXPORT</CODE
> or <CODE
CLASS="literal"
>@EXPORT_OK</CODE
>.
Future versions may regard this as a fatal error.</P
><A
CLASS="indexterm"
NAME="AUTOID-20489"
></A
><A
CLASS="indexterm"
NAME="AUTOID-20490"
></A
><A
CLASS="indexterm"
NAME="AUTOID-20491"
></A
><A
CLASS="indexterm"
NAME="AUTOID-20492"
></A
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_014.htm"
TITLE="7.2.14 Env&nbsp;- Import Environment Variables"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.14 Env&nbsp;- Import Environment Variables"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_016.htm"
TITLE="7.2.16 ExtUtils::Install&nbsp;- Install Files from Here to There"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.16 ExtUtils::Install&nbsp;- Install Files from Here to There"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.2.14 Env&nbsp;- Import Environment Variables</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.2.16 ExtUtils::Install&nbsp;- Install Files from Here to There</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
