<HTML
><HEAD
>
<TITLE>[Chapter 8] 8.3 Return Values</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl on Win32 Systems"><META
NAME="DC.creator"
CONTENT="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:33:58Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-324-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch08_01.htm"
TITLE="8. Functions"><LINK
REL="prev"
HREF="ch08_02.htm"
TITLE="8.2 Invoking a User Function"><LINK
REL="next"
HREF="ch08_04.htm"
TITLE="8.4 Arguments"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl on Win32 Systems"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl on Win32 Systems"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/wsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_02.htm"
TITLE="8.2 Invoking a User Function"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.2 Invoking a User Function"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch08_01.htm"
TITLE="8. Functions"
>Chapter 8<BR>Functions</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_04.htm"
TITLE="8.4 Arguments"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.4 Arguments"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch08-13023"
>8.3 Return Values</A
></H2
><P
CLASS="para"
>A subroutine is always part of some expression. The value of the subroutine invocation is called the <A
CLASS="indexterm"
NAME="ch08-idx-548-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-548-1"
></A
><EM
CLASS="emphasis"
>return value</EM
>. The return value of a subroutine is the value of the <EM
CLASS="emphasis"
>return</EM
> statement or of the last expression evaluated in the subroutine.</P
><P
CLASS="para"
>For example, let's define this subroutine:</P
><PRE
CLASS="programlisting"
>sub sum_of_a_and_b {
    return $a + $b;
}</PRE
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch08-idx-84169-0"
></A
>last expression evaluated in the body of this subroutine (in fact, the only expression evaluated) is the sum of <CODE
CLASS="literal"
>$a</CODE
> and <CODE
CLASS="literal"
>$b</CODE
>, so the sum of <CODE
CLASS="literal"
>$a</CODE
> and <CODE
CLASS="literal"
>$b</CODE
> will be the return value. Here's that in action:</P
><PRE
CLASS="programlisting"
>$a = 3; $b = 4;
$c = sum_of_a_and_b();   # $c gets 7
$d = 3*sum_of_a_and_b(); # $d gets 21</PRE
><P
CLASS="para"
>A subroutine can also <A
CLASS="indexterm"
NAME="ch08-idx-84170-0"
></A
>return a list of values when evaluated in a list context. Consider this subroutine and invocation:</P
><PRE
CLASS="programlisting"
>sub list_of_a_and_b {
return ($a,$b);
}
$a = 5; $b = 6;
@c = list_of_a_and_b(); # @c gets (5,6)</PRE
><P
CLASS="para"
>The last expression evaluated really means the last expression evaluated, rather than the last expression defined in the body of the subroutine. For example, this subroutine returns <CODE
CLASS="literal"
>$a</CODE
> if <CODE
CLASS="literal"
>$a</CODE
> <CODE
CLASS="literal"
>&gt;</CODE
> <CODE
CLASS="literal"
>0</CODE
>; otherwise, it returns <CODE
CLASS="literal"
>$b</CODE
>:</P
><PRE
CLASS="programlisting"
>sub gimme_a_or_b {
        if ($a &gt; 0) {
            print &quot;choosing a ($a)\n&quot;;
    return $a;
        } else {
            print &quot;choosing b ($b)\n&quot;;
    return $b;
        }
}</PRE
><P
CLASS="para"
>These examples are all rather trivial. It gets better when we can pass values that are different for each invocation into a subroutine, instead of having to rely on global variables. In fact, this discussion is coming right up.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_02.htm"
TITLE="8.2 Invoking a User Function"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.2 Invoking a User Function"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl on Win32 Systems"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_04.htm"
TITLE="8.4 Arguments"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.4 Arguments"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.2 Invoking a User Function</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>8.4 Arguments</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
