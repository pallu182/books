<HTML
><HEAD
>
<TITLE>[Chapter 19] 19.2 Your CGI Program in Context</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:36:12Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch19_01.htm"
TITLE="19. CGI Programming"><LINK
REL="prev"
HREF="ch19_01.htm"
TITLE="19.1 The CGI.pm Module"><LINK
REL="next"
HREF="ch19_03.htm"
TITLE="19.3 Simplest CGI Program"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_01.htm"
TITLE="19.1 The CGI.pm Module"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.1 The CGI.pm Module"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch19_01.htm"
TITLE="19. CGI Programming"
>Chapter 19<BR>CGI Programming</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_03.htm"
TITLE="19.3 Simplest CGI Program"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.3 Simplest CGI Program"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch19-23672"
>19.2 Your CGI Program in Context</A
></H2
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch19_02.htm#ch19-41286"
TITLE="Form interaction with CGI"
>Figure 19.1</A
> shows the relationships between a web <A
CLASS="indexterm"
NAME="ch19-idx-4299-0"
></A
>browser, web <A
CLASS="indexterm"
NAME="ch19-idx-4300-0"
></A
>server, and CGI program. <A
CLASS="indexterm"
NAME="ch19-idx-4298-0"
></A
>When you click on a link while using your browser, there is a URL associated with the link. This URL specifies a web server and a resource accessible through that server. So the browser communicates with the server, requesting the given resource. If, say, the resource is an HTML fill-out <A
CLASS="indexterm"
NAME="ch19-idx-4308-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4308-1"
></A
>form, the web server responds by downloading the form to the browser, which then displays the form for you to fill out. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch19-41286"
>Figure 19.1: Form interaction with CGI</A
></H4
><IMG
CLASS="graphic"
SRC="figs/cgi0201.gif"
ALT="Figure 19.1"><P
CLASS="para"
>Each text-input field on the form has a name (given in the form's HTML code) and an associated value, which is whatever you type into the field. The form itself is associated (via the HTML <CODE
CLASS="literal"
>&lt;FORM&gt;</CODE
><A
CLASS="indexterm"
NAME="ch19-idx-4309-0"
></A
> tag) with a CGI program that processes the form input. When you fill out the form and click on "Submit", the browser accesses the URL of the CGI program. But first it tacks onto the end of the URL what is called a <EM
CLASS="emphasis"
>query string</EM
><A
CLASS="indexterm"
NAME="ch19-idx-4310-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4310-1"
></A
> consisting of one or more <CODE
CLASS="literal"
>name=value</CODE
><A
CLASS="indexterm"
NAME="ch19-idx-4312-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4312-1"
></A
> pairs; each name is the name of a text input field, and each value is the corresponding input you provided. So the URL to which the browser submits your form input looks something like this (where the query string is everything after the question mark): </P
><PRE
CLASS="programlisting"
>http://www.SOMEWHERE.org/cgi-bin/some_cgi_prog?flavor=vanilla&amp;size=double</PRE
><P
CLASS="para"
>In this case there are two <CODE
CLASS="literal"
>name=value</CODE
> pairs. Such pairs are separated by an <A
CLASS="indexterm"
NAME="ch19-idx-4311-0"
></A
>ampersand (&amp;), a detail you won't have to worry about when you use the CGI.pm module. The part of the URL that reads <EM
CLASS="emphasis"
>/cgi-bin/some_cgi_prog /</EM
> receives further explanation later; at the moment, it only matters that this provides a path to the CGI program that will process the HTML form input. </P
><P
CLASS="para"
>When the web server (<EM
CLASS="emphasis"
>www.SOMEWHERE.org</EM
> in this case) receives the URL from your browser, it invokes the CGI program, passing the <CODE
CLASS="literal"
>name=value</CODE
> pairs to the program as arguments. The program then does whatever it does, and (usually) returns HTML code to the server, which in turn downloads it to the browser for display to you. </P
><P
CLASS="para"
>The conversation between the browser and the server, and also between the server and the CGI program, follows the protocol known as HTTP. You needn't worry much about this when writing your CGI program, because CGI.pm takes care of the protocol requirements for you. </P
><P
CLASS="para"
>The way in which the CGI program expects to receive its arguments (and other information) from the browser via the server is governed by the Common Gateway Interface specification. Again, you don't need to worry too much about this; as you will see, CGI.pm automatically unpacks the arguments for you. </P
><P
CLASS="para"
>Finally, you should know that CGI programs can work with any HTML document, not just forms. For example, you could write the HTML code </P
><PRE
CLASS="programlisting"
>Click &lt;a href=&quot;http://www.SOMEWHERE.org/cgi-bin/fortune.cgi&quot;&gt;here&lt;/a&gt; to
receive your fortune.</PRE
><P
CLASS="para"
>and <EM
CLASS="emphasis"
>fortune.cgi</EM
> could be a program that simply invokes the <EM
CLASS="emphasis"
>fortune</EM
> program (on UNIX systems). In this case, there wouldn't be any argument supplied to the CGI program with the URL. Or the HTML document could give two links for the user to click on&nbsp;- one to receive a fortune, and one to receive the current date. Both links could point to the same program, in one case with the argument <CODE
CLASS="literal"
>fortune</CODE
> following the question mark in the URL, and in the other case with the argument <CODE
CLASS="literal"
>date</CODE
>. The HTML links would look like this: </P
><PRE
CLASS="programlisting"
>&lt;a href=&quot;http://www.SOMEWHERE.org/cgi-bin/fortune_or_date?fortune"&gt;
&lt;a href=&quot;http://www.SOMEWHERE.org/cgi-bin/fortune_or_date?date"&gt;</PRE
><P
CLASS="para"
>The CGI program (<EM
CLASS="emphasis"
>fortune_or_date</EM
> in this case) would then see which of the two possible arguments it received and execute either the <EM
CLASS="emphasis"
>fortune</EM
> or <EM
CLASS="emphasis"
>date</EM
> program accordingly. </P
><P
CLASS="para"
>So you see that arguments do not have to be of the <CODE
CLASS="literal"
>name=date</CODE
> variety characteristic of fill-out forms. You can write a CGI program to do most anything you please, and you can pass it most any arguments you please. </P
><P
CLASS="para"
>In this chapter we will primarily illustrate HTML fill-out forms. And we will assume that you understand basic HTML code already.[<A
CLASS="footnote"
HREF="#ch19-pgfId-1243"
>3</A
>] <A
CLASS="indexterm"
NAME="ch19-idx-4302-0"
></A
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch19-pgfId-1243"
>[3]</A
> For the full story about HTML, see the O'Reilly book,<EM
CLASS="emphasis"
> HTML: The Definitive Guide</EM
>, <EM
CLASS="emphasis"
>Second  Edition</EM
>. </P
></DIV
></BLOCKQUOTE
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_01.htm"
TITLE="19.1 The CGI.pm Module"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.1 The CGI.pm Module"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_03.htm"
TITLE="19.3 Simplest CGI Program"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.3 Simplest CGI Program"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>19.1 The CGI.pm Module</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>19.3 Simplest CGI Program</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
