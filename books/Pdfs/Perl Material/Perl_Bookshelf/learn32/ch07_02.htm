<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.2 Simple Uses of Regular Expressions</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl on Win32 Systems"><META
NAME="DC.creator"
CONTENT="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:33:36Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-324-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_01.htm"
TITLE="7. Regular Expressions"><LINK
REL="prev"
HREF="ch07_01.htm"
TITLE="7.1 Concepts About Regular Expressions"><LINK
REL="next"
HREF="ch07_03.htm"
TITLE="7.3 Patterns"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl on Win32 Systems"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl on Win32 Systems"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/wsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_01.htm"
TITLE="7.1 Concepts About Regular Expressions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.1 Concepts About Regular Expressions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. Regular Expressions"
>Chapter 7<BR>Regular Expressions</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_03.htm"
TITLE="7.3 Patterns"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.3 Patterns"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch07-11320"
>7.2 Simple Uses of Regular Expressions</A
></H2
><P
CLASS="para"
>If we were looking for all lines of a file that contain the string <CODE
CLASS="literal"
>abc</CODE
>, we might use the Windows NT <EM
CLASS="emphasis"
>findstr</EM
><A
CLASS="indexterm"
NAME="ch07-idx-309599-0"
></A
> command:</P
><PRE
CLASS="programlisting"
><B
CLASS="emphasis.bold"
>&gt;findstr abc somefile &gt; results</B
></PRE
><P
CLASS="para"
>In this case, <CODE
CLASS="literal"
>abc</CODE
> is the regular expression that the <EM
CLASS="emphasis"
>findstr</EM
> command tests against each input line. Lines that match are sent to standard output, and end up in the file <CODE
CLASS="literal"
>results</CODE
> because of the command-line redirection.</P
><P
CLASS="para"
>In Perl, we can speak of the string <CODE
CLASS="literal"
>abc</CODE
> as a regular expression by enclosing the string in <A
CLASS="indexterm"
NAME="ch07-idx-307714-0"
></A
>slashes:</P
><PRE
CLASS="programlisting"
>if (/abc/) {
  print $_;
}</PRE
><P
CLASS="para"
>But what is being tested against the regular expression <CODE
CLASS="literal"
>abc</CODE
> in this case? Why, it's our old friend, the <A
CLASS="indexterm"
NAME="ch07-idx-307715-0"
></A
><CODE
CLASS="literal"
>$_</CODE
> variable! When a regular expression is enclosed in slashes (as above), the <CODE
CLASS="literal"
>$_</CODE
> variable is tested against the regular expression. If the regular expression matches, the <A
CLASS="indexterm"
NAME="ch07-idx-307717-0"
></A
><EM
CLASS="emphasis"
>match</EM
> operator returns <A
CLASS="indexterm"
NAME="ch07-idx-307716-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-307716-1"
></A
>true. Otherwise, it returns false.</P
><P
CLASS="para"
>For this example, the <CODE
CLASS="literal"
>$_</CODE
> variable is presumed to contain some text line and is printed if the line contains the characters <CODE
CLASS="literal"
>abc</CODE
> in sequence anywhere within the line&nbsp;- similar to the <EM
CLASS="emphasis"
>findstr</EM
> command above. Unlike the <EM
CLASS="emphasis"
>findstr</EM
> command, which is operating on all of the lines of a file, this Perl fragment is looking at just one line. To work on all lines, add a loop, as in:</P
><PRE
CLASS="programlisting"
>while (<A
CLASS="indexterm"
NAME="ch07-idx-307783-0"
></A
>&lt;&gt;) {
  if (/abc/) {
    print $_;
  }
}</PRE
><P
CLASS="para"
>What if we didn't know the number of <CODE
CLASS="literal"
>b</CODE
>'s between the <CODE
CLASS="literal"
>a</CODE
> and the <CODE
CLASS="literal"
>c</CODE
>? That is, what if we want to print the line if it contains an <CODE
CLASS="literal"
>a</CODE
> followed by zero or more <CODE
CLASS="literal"
>b</CODE
>'s, followed by a <CODE
CLASS="literal"
>c</CODE
>? With <EM
CLASS="emphasis"
>findstr</EM
>, we'd say:</P
><PRE
CLASS="programlisting"
><B
CLASS="emphasis.bold"
>&gt;findstr ab*c somefile &gt;results</B
></PRE
><P
CLASS="para"
>In Perl, we can say exactly the same thing:</P
><PRE
CLASS="programlisting"
>while (&lt;&gt;) {
  if (/ab*c/) {
    print $_;
  }
}</PRE
><P
CLASS="para"
>Just like <EM
CLASS="emphasis"
>findstr</EM
>, this loop looks for an <CODE
CLASS="literal"
>a</CODE
> followed by zero or more <CODE
CLASS="literal"
>b</CODE
>'s followed by a <CODE
CLASS="literal"
>c</CODE
>.<EM
CLASS="emphasis"
></EM
><A
CLASS="indexterm"
NAME="ch07-idx-309601-0"
></A
></P
><P
CLASS="para"
>We'll visit more uses of pattern matching in the section <A
CLASS="xref"
HREF="ch07_04.htm"
TITLE="More on the Matching Operator"
>"More on the Matching Operator</A
>," later in the chapter, after we talk about all kinds of regular expressions.</P
><P
CLASS="para"
>Another simple regular expression operator is the <A
CLASS="indexterm"
NAME="ch07-idx-307718-0"
></A
><EM
CLASS="emphasis"
>substitute</EM
> operator, which replaces the part of a string that matches the regular expression with another string. The substitute operator consists of the letter <CODE
CLASS="literal"
>s</CODE
>, a slash, a regular expression, a slash, a replacement string, and a final slash, looking something like:</P
><PRE
CLASS="programlisting"
>s/ab*c/def/;</PRE
><P
CLASS="para"
>The variable (in this case, <CODE
CLASS="literal"
>$_</CODE
>) is matched against the regular expression (<CODE
CLASS="literal"
>ab*c</CODE
>). If the match is successful, the part of the string that matched is discarded and replaced by the replacement string (<CODE
CLASS="literal"
>def</CODE
>). If the match is unsuccessful, nothing happens.</P
><P
CLASS="para"
>As with the match operator, we'll revisit the myriad options on the substitute operator later, in the section <A
CLASS="xref"
HREF="ch07_05.htm"
TITLE="Substitutions"
>"Substitutions</A
>."</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_01.htm"
TITLE="7.1 Concepts About Regular Expressions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.1 Concepts About Regular Expressions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl on Win32 Systems"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_03.htm"
TITLE="7.3 Patterns"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.3 Patterns"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.1 Concepts About Regular Expressions</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.3 Patterns</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
