<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.4 More on the Matching Operator</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:33:15Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_01.htm"
TITLE="7. Regular Expressions"><LINK
REL="prev"
HREF="ch07_03.htm"
TITLE="7.3 Patterns"><LINK
REL="next"
HREF="ch07_05.htm"
TITLE="7.5 Substitutions"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_03.htm"
TITLE="7.3 Patterns"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.3 Patterns"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. Regular Expressions"
>Chapter 7<BR>Regular Expressions</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_05.htm"
TITLE="7.5 Substitutions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.5 Substitutions"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch07-10185"
>7.4 More on the Matching Operator</A
></H2
><P
CLASS="para"
>We have already looked at the simplest uses of the matching operator (a regular expression enclosed in slashes). Now let's look at a zillion ways to make this operator do something slightly different.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-307979"
>7.4.1 Selecting a Different Target (the <CODE
CLASS="literal"
>=~</CODE
> Operator)</A
></H3
><P
CLASS="para"
>Usually the string you'll want to match your pattern against is not within the <CODE
CLASS="literal"
>$_</CODE
><A
CLASS="indexterm"
NAME="ch07-idx-307788-0"
></A
> variable, and it would be a nuisance to put it there. (Perhaps you already have a value in <CODE
CLASS="literal"
>$_</CODE
> you're quite fond of.) No problem. The <A
CLASS="indexterm"
NAME="ch07-idx-309985-0"
></A
><CODE
CLASS="literal"
>=~</CODE
> operator helps us here. This operator takes a regular expression operator on the right side, and changes the <EM
CLASS="emphasis"
>target </EM
>of the operator to something besides the <CODE
CLASS="literal"
>$_</CODE
> variable&nbsp;- namely, some value named on the left side of the operator. It looks like this:</P
><PRE
CLASS="programlisting"
>$a = &quot;hello world&quot;;
$a =~ /^he/;         # true
$a =~ /(.)\l/;       # also true (matches the double l)
if ($a =~ /(.)\l/) { # true, so yes...
                     # some stuff
}</PRE
><P
CLASS="para"
>The target of the <CODE
CLASS="literal"
>=~</CODE
> operator can be any expression that yields some scalar string value. For example, <A
CLASS="indexterm"
NAME="ch07-idx-307755-0"
></A
><CODE
CLASS="literal"
>&lt;STDIN&gt;</CODE
> yields a scalar string value when used in a scalar context, so we can combine this with the <CODE
CLASS="literal"
>=~</CODE
> operator and a regular expression match operator to get a compact check for particular input, as in:</P
><PRE
CLASS="programlisting"
>print &quot;any last request? &quot;;
if (&lt;STDIN&gt; =~ /^[yY]/) {          # does the input begin with a y?
    print &quot;And just what might that request be? &quot;;
    &lt;STDIN&gt;;                       # discard a line of standard input
    print &quot;Sorry, I'm unable to do that.\n&quot;;
}</PRE
><P
CLASS="para"
>In this case, <CODE
CLASS="literal"
>&lt;STDIN&gt;</CODE
> yields the next line from standard input, which is then immediately used as the string to match against the pattern <CODE
CLASS="literal"
>^[yY]</CODE
>. Note that you never stored the input into a variable, so if you wanted to match the input against another pattern, or possibly echo the data out in an error message, you'd be out of luck. But this form frequently comes in handy.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-307980"
>7.4.2 Ignoring Case</A
></H3
><P
CLASS="para"
>In the previous example, we used <CODE
CLASS="literal"
>[yY]</CODE
> to match either a lower- or uppercase <CODE
CLASS="literal"
>y</CODE
>. For very short strings, such as <CODE
CLASS="literal"
>y</CODE
> or <CODE
CLASS="literal"
>fred</CODE
>, this is easy enough, as in <CODE
CLASS="literal"
>[fF][oO][oO]</CODE
>. But what if the string you want to match is the word "<CODE
CLASS="literal"
>procedure</CODE
>" in either lower- or uppercase?</P
><P
CLASS="para"
>In some versions of <A
CLASS="indexterm"
NAME="ch07-idx-307756-0"
></A
><EM
CLASS="emphasis"
>grep</EM
>, a <CODE
CLASS="literal"
>-i</CODE
> flag indicates "ignore case." Perl also has such an option. You indicate the <A
CLASS="indexterm"
NAME="ch07-idx-307757-0"
></A
>ignore-case option by appending a lowercase <A
CLASS="indexterm"
NAME="ch07-idx-307758-0"
></A
><CODE
CLASS="literal"
>i</CODE
> to the closing slash, as in <CODE
CLASS="literal"
>/</CODE
><CODE
CLASS="replaceable"
><I
>somepattern</I
></CODE
><CODE
CLASS="literal"
>/i</CODE
>. This says that the letters of the pattern will match letters in the string in either case. For example, to match the word <CODE
CLASS="literal"
>procedure</CODE
> in either case at the beginning of the line, use <CODE
CLASS="literal"
>/^procedure/i</CODE
>.</P
><P
CLASS="para"
>Now our previous example looks like this:</P
><PRE
CLASS="programlisting"
>print &quot;any last request? &quot;;
if (&lt;STDIN&gt; =~ /^y/i) { # does the input begin with a y?
    # yes! deal with it
    ...
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-307981"
>7.4.3 Using a Different Delimiter</A
></H3
><P
CLASS="para"
>If you are looking for a string with a regular expression that contains <A
CLASS="indexterm"
NAME="ch07-idx-307760-0"
></A
>slash characters (<CODE
CLASS="literal"
>/</CODE
>), you must precede each <A
CLASS="indexterm"
NAME="ch07-idx-307759-0"
></A
>slash with a backslash (<CODE
CLASS="literal"
>\</CODE
> ). For example, you can look for a string that begins with <CODE
CLASS="literal"
>/usr/etc</CODE
> like this:</P
><PRE
CLASS="programlisting"
>$path = &lt;STDIN&gt;; # read a pathname (from &quot;find&quot; perhaps?)
if ($path =~ /^\/usr\/etc/) {
    # begins with /usr/etc...
}</PRE
><P
CLASS="para"
>As you can see, the backslash-slash combination makes it look like there are little valleys between the text pieces. Doing this for a lot of slash characters can get cumbersome, so Perl allows you to specify a different delimiter character. Simply precede any nonalphanumeric, nonwhitespace character[<A
CLASS="footnote"
HREF="#ch07-pgfId-307955"
>5</A
>] (your selected delimiter) with an <A
CLASS="indexterm"
NAME="ch07-idx-307761-0"
></A
><CODE
CLASS="literal"
>m</CODE
>, then list your pattern followed by another identical delimiter character, as in:<PRE
CLASS="programlisting"
>/^\/usr\/etc/     # using standard slash delimiter
m@^/usr/etc@      # using @ for a delimiter
m#^/usr/etc#      # using # for a delimiter (my favorite)</PRE
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch07-pgfId-307955"
>[5]</A
> If the delimiter happens to be the left character of a <A
CLASS="indexterm"
NAME="ch07-idx-307789-0"
></A
>left-right pair (parentheses, braces, angle bracket, or square bracket), the closing delimiter is the corresponding right of the same pair. But otherwise, the characters are the same for begin and end.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>You can even use slashes again if you want, as in <CODE
CLASS="literal"
>m/fred/</CODE
>. So the common regular-expression matching operator is really the <CODE
CLASS="literal"
>m</CODE
> operator; however, the <CODE
CLASS="literal"
>m</CODE
> is optional if you choose slash for a delimiter.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-307982"
>7.4.4 Using Variable Interpolation</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch07-idx-307762-0"
></A
><A
CLASS="indexterm"
NAME="ch07-idx-307762-1"
></A
>A regular expression is variable interpolated before it is considered for other special characters. Therefore, you can construct a regular expression from computed strings rather than just literals. For example:</P
><PRE
CLASS="programlisting"
>$what = &quot;bird&quot;;
$sentence = &quot;Every good bird does fly.&quot;;
if ($sentence =~ <A
CLASS="indexterm"
NAME="ch07-idx-307763-0"
></A
>/\b$what\b/) {
    print &quot;The sentence contains the word $what!\n&quot;;
}</PRE
><P
CLASS="para"
>Here we have used a variable reference to effectively construct the regular expression operator <CODE
CLASS="literal"
>/\bbird\b/</CODE
>.</P
><P
CLASS="para"
>Here's a slightly more complicated example:</P
><PRE
CLASS="programlisting"
>$sentence = &quot;Every good bird does fly.&quot;;
print &quot;What should I look for? &quot;;
$what = &lt;STDIN&gt;;
chomp($what);
if ($sentence =~ /$what/) { # found it!
    print &quot;I saw $what in $sentence.\n&quot;;
} else {
    print &quot;nope... didn't find it.\n&quot;;
}</PRE
><P
CLASS="para"
>If you enter <CODE
CLASS="literal"
>bird</CODE
>, it is found. If you enter <CODE
CLASS="literal"
>scream</CODE
>, it isn't. If you enter <CODE
CLASS="literal"
>[bw]ird</CODE
>, that's also found, showing that the regular expression pattern-matching characters are indeed still significant.</P
><P
CLASS="para"
>How would you make them insignificant? You'd have to arrange for the non-alphanumeric characters to be preceded by a backslash, which would then turn them into literal matches. That sounds hard, unless you have the <CODE
CLASS="literal"
>\Q</CODE
> quoting escape at your disposal:</P
><PRE
CLASS="programlisting"
>$what = &quot;[box]&quot;;
foreach (qw(in[box] out[box] white[sox])) {
    if (/\Q$what\E/) {
        print &quot;$_ matched!\n&quot;;
    }
}</PRE
><P
CLASS="para"
>Here, the <CODE
CLASS="literal"
>\Q$what\E</CODE
> construct turns into <CODE
CLASS="literal"
>\[box\]</CODE
>, making the match look for a literal pair of enclosing brackets, instead of treating the whole thing as a character class.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-765"
>7.4.5 Special Read-Only Variables</A
></H3
><P
CLASS="para"
>After a successful pattern match, the variables <A
CLASS="indexterm"
NAME="ch07-idx-307764-0"
></A
><CODE
CLASS="literal"
>$1</CODE
>, <CODE
CLASS="literal"
>$2</CODE
>, <CODE
CLASS="literal"
>$3</CODE
>, and so on are set to the same values as <A
CLASS="indexterm"
NAME="ch07-idx-307790-0"
></A
><CODE
CLASS="literal"
>\1</CODE
>, <CODE
CLASS="literal"
>\2</CODE
>, <CODE
CLASS="literal"
>\3</CODE
>, and so on. You can use this to look at a piece of the match in later code. For example:</P
><PRE
CLASS="programlisting"
>$_ = &quot;this is a test&quot;;
/(\w+)\W+(\w+)/; # match first two words
                 # $1 is now &quot;this&quot; and $2 is now &quot;is&quot;</PRE
><P
CLASS="para"
>You can also gain access to the same values (<CODE
CLASS="literal"
>$1</CODE
>, <CODE
CLASS="literal"
>$2</CODE
>, <CODE
CLASS="literal"
>$3</CODE
>, and so on) by placing a match in a list context. The result is a list of values from <CODE
CLASS="literal"
>$1</CODE
> up to the number of memorized things, but only if the regular expression matches. (Otherwise the variables are undefined.) Taking that last example in another way:</P
><PRE
CLASS="programlisting"
>$_ = &quot;this is a test&quot;;
($first, $second) = /(\w+)\W+(\w+)/; # match first two words
     # $first is now &quot;this&quot; and $second is now &quot;is&quot;</PRE
><P
CLASS="para"
>Other predefined read-only variables include <A
CLASS="indexterm"
NAME="ch07-idx-307766-0"
></A
><CODE
CLASS="literal"
>$&amp;</CODE
>, which is the part of the string that matched the regular expression; <A
CLASS="indexterm"
NAME="ch07-idx-307767-0"
></A
><CODE
CLASS="literal"
>$`</CODE
>, which is the part of the string before the part that matched; and <A
CLASS="indexterm"
NAME="ch07-idx-307768-0"
></A
><CODE
CLASS="literal"
>$'</CODE
>, which is the part of the string after the part that matched. For example:</P
><PRE
CLASS="programlisting"
>$_ = &quot;this is a sample string&quot;;
/sa.*le/; # matches &quot;sample&quot; within the string
          # $` is now &quot;this is a &quot;
          # $&amp; is now &quot;sample&quot;
          # $' is now &quot; string&quot;</PRE
><P
CLASS="para"
>Because these variables are set on each successful match, you should save the values elsewhere if you need them later in the program.[<A
CLASS="footnote"
HREF="#ch07-pgfId-952"
>6</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch07-pgfId-952"
>[6]</A
> See O'Reilly's <EM
CLASS="emphasis"
>Mastering Regular Expressions</EM
> for performance ramifications of using these variables.</P
></DIV
></BLOCKQUOTE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_03.htm"
TITLE="7.3 Patterns"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.3 Patterns"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_05.htm"
TITLE="7.5 Substitutions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.5 Substitutions"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.3 Patterns</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.5 Substitutions</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
