<HTML
><HEAD
>
<TITLE>[Chapter 6] 6.2 Input from the Diamond Operator</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl on Win32 Systems"><META
NAME="DC.creator"
CONTENT="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:33:26Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-324-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Basic I/O"><LINK
REL="prev"
HREF="ch06_01.htm"
TITLE="6.1 Input from STDIN"><LINK
REL="next"
HREF="ch06_03.htm"
TITLE="6.3 Output to STDOUT"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl on Win32 Systems"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl on Win32 Systems"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/wsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_01.htm"
TITLE="6.1 Input from STDIN"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.1 Input from STDIN"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Basic I/O"
>Chapter 6<BR>Basic I/O</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_03.htm"
TITLE="6.3 Output to STDOUT"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.3 Output to STDOUT"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch06-11805"
>6.2 Input from the Diamond Operator</A
></H2
><P
CLASS="para"
>Another way to read input is with the <A
CLASS="indexterm"
NAME="ch06-idx-387-0"
></A
>diamond operator: <CODE
CLASS="literal"
>&lt;&gt;</CODE
>. This operator works like <CODE
CLASS="literal"
>&lt;STDIN&gt;</CODE
> in that it returns a single line in a scalar context (<CODE
CLASS="literal"
>undef</CODE
> if all the lines have been read) or all remaining lines if used in a list context. However, unlike <CODE
CLASS="literal"
>&lt;STDIN&gt;</CODE
>, the diamond operator gets its data from the file or files specified on the <A
CLASS="indexterm"
NAME="ch06-idx-390-0"
></A
>command line that invoked the Perl program. For example, if you have a program named <EM
CLASS="emphasis"
>type.plx</EM
>, consisting of:</P
><PRE
CLASS="programlisting"
>while (&lt;&gt;) {
        print $_;
}</PRE
><P
CLASS="para"
>and you invoke <EM
CLASS="emphasis"
>type.plx</EM
> with:</P
><PRE
CLASS="programlisting"
><B
CLASS="emphasis.bold"
>perl type.plx file1 file2 file3</B
></PRE
><P
CLASS="para"
>then the diamond operator reads each line of <CODE
CLASS="literal"
>file1</CODE
> followed by each line of <CODE
CLASS="literal"
>file2</CODE
> and <CODE
CLASS="literal"
>file3</CODE
> in turn, returning <CODE
CLASS="literal"
>undef</CODE
> only when all of the lines have been read. As you can see, <EM
CLASS="emphasis"
>type.plx</EM
> works a little like the NT command <EM
CLASS="emphasis"
>type</EM
>, sending all the lines of the named files to standard output in sequence. If you don't specify any filenames on the command line, the diamond operator reads from standard input automatically.</P
><P
CLASS="para"
>Technically, the diamond operator isn't looking literally at the command-line arguments; it works from the <A
CLASS="indexterm"
NAME="ch06-idx-560852-0"
></A
><CODE
CLASS="literal"
>@ARGV</CODE
> array. This array is a special array initialized by the Perl interpreter to the command-line arguments. Each command-line argument goes into a separate element of the <CODE
CLASS="literal"
>@ARGV</CODE
> array. You can interpret this list any way you want.[<A
CLASS="footnote"
HREF="#ch06-pgfId-560911"
>2</A
>] You can even set this array within your program and have the diamond operator work on that new list rather than the command-line arguments, like so:</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch06-pgfId-560911"
>[2]</A
> The <A
CLASS="indexterm"
NAME="ch06-idx-560856-0"
></A
>Perl standard distribution contains routines for parsing the command-line arguments of a Perl program. See <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> for more information on the <A
CLASS="indexterm"
NAME="ch06-idx-322-0"
></A
><CODE
CLASS="literal"
>getopt</CODE
> library.</P
></DIV
></BLOCKQUOTE
><PRE
CLASS="programlisting"
>@ARGV = (&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;);
while (&lt;&gt;) { # process files aaa, bbb, and ccc
        print &quot;this line is: $_&quot;;
}</PRE
><P
CLASS="para"
>In <A
CLASS="xref"
HREF="ch10_01.htm"
TITLE="Filehandles and File Tests"
>Chapter 10, <CITE
CLASS="chapter"
>Filehandles and File Tests</CITE
></A
>, we'll see how to open and close specific filenames at specific times, but the technique detailed here has been used for some of our quick-and-dirty programs.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_01.htm"
TITLE="6.1 Input from STDIN"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.1 Input from STDIN"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl on Win32 Systems"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_03.htm"
TITLE="6.3 Output to STDOUT"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.3 Output to STDOUT"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>6.1 Input from STDIN</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>6.3 Output to STDOUT</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
