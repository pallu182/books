<HTML
><HEAD
>
<TITLE>[Chapter 1] 1.8 List Processing</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:30:14Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. An Overview of Perl"><LINK
REL="prev"
HREF="ch01_07.htm"
TITLE="1.7 Regular Expressions"><LINK
REL="next"
HREF="ch01_09.htm"
TITLE="1.9 What You Don't Know Won't Hurt You (Much)"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch01_07.htm"
TITLE="1.7 Regular Expressions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.7 Regular Expressions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. An Overview of Perl"
>Chapter 1<BR>An Overview of Perl</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch01_09.htm"
TITLE="1.9 What You Don't Know Won't Hurt You (Much)"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.9 What You Don't Know Won't Hurt You (Much)"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="PERL2-CH-1-SECT-8"
>1.8 List Processing</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH01.LC"
></A
>Much earlier in this chapter, we mentioned that Perl has two main
contexts, scalar context (for dealing with singular things) and list
context (for dealing with plural things).  Many of the traditional
operators we've described so far have been strictly scalar in their
operation.  They always take singular arguments (or pairs of singular
arguments for binary operators), and always produce a singular result,
even in a list context.  So if you write this:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>@array = (1 + 2, 3 - 4, 5 * 6, 7 / 8);</PRE
></P
><P
CLASS="para"
>you know that the list on the right side contains exactly four values,
because the ordinary math operators always produce scalar values, even
in the list context provided by the assignment to an array.</P
><P
CLASS="para"
>However, other Perl operators can produce either a scalar or a
list value, depending on their context.  They just &quot;know&quot; whether a
scalar or a list is expected of them.  But how will you know that?
It turns out to be pretty easy to figure out, once you get your mind
around a few key concepts.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1757"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1759"
></A
>First, list context has to be provided by something in the
&quot;surroundings&quot;.  In the example above, the list assignment provides it.
If you look at the various syntax summaries scattered throughout
<A
CLASS="xref"
HREF="ch02_01.htm"
TITLE="The Gory Details"
>Chapter 2</A
> and <A
CLASS="xref"
HREF="ch03_01.htm"
TITLE="Functions"
>Chapter 3</A
>, 
you'll see various operators that are defined to take
a <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
> as an argument.
Those are the operators that <EM
CLASS="emphasis"
>provide</EM
> a list
context.  Throughout this book, <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
> is used as a specific technical
term to mean &quot;a syntactic construct that provides a list context&quot;.
For example, if you look up <A
CLASS="xref"
HREF="ch03_153.htm"
TITLE="sort"
><B
CLASS="xref.cmd"
>sort</B
></A
>, you'll find the syntax summary:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>sort <EM
CLASS="emphasis"
>LIST</EM
></PRE
></P
><P
CLASS="para"
>That means that <A
CLASS="xref"
HREF="ch03_153.htm"
TITLE="sort"
><B
CLASS="xref.cmd"
>sort</B
></A
> provides a list context to its arguments.</P
><P
CLASS="para"
>Second, at compile time, any operator that takes a <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
> provides a list
context to each syntactic element of that <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
>.  So every top-level
operator or entity in the <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
> knows that it's supposed to produce the
best list it knows how to produce.  This means that if you say:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>sort @guys, @gals, other();</PRE
></P
><P
CLASS="para"
>then each of <CODE
CLASS="literal"
>@guys</CODE
>, <CODE
CLASS="literal"
>@gals</CODE
>, and <CODE
CLASS="literal"
>other()</CODE
> knows that it's supposed
to produce a list value.</P
><P
CLASS="para"
>Finally, at run-time, each of those <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
> elements produces its list in
turn, and then (this is important) all the separate lists are joined
together, end to end, into a single list.  And that squashed-flat,
one-dimensional list is what is finally handed off to the
function that wanted a <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
> in the first place.  So if <CODE
CLASS="literal"
>@guys</CODE
>
contains <CODE
CLASS="literal"
>(Fred,Barney)</CODE
>, <CODE
CLASS="literal"
>@gals</CODE
> contains <CODE
CLASS="literal"
>(Wilma,Betty)</CODE
>,
and the <CODE
CLASS="literal"
>other()</CODE
> function returns the single-element list
<CODE
CLASS="literal"
>(Dino)</CODE
>, then the <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
> that
sort sees is</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>(Fred,Barney,Wilma,Betty,Dino)</PRE
></P
><P
CLASS="para"
>and the <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
> that <B
CLASS="emphasis.bold"
>sort</B
> returns is</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>(Barney,Betty,Dino,Fred,Wilma)</PRE
></P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1801"
></A
>Some operators produce lists (like <A
CLASS="xref"
HREF="ch03_079.htm"
TITLE="keys"
><B
CLASS="xref.cmd"
>keys</B
></A
>), some consume them (like
<A
CLASS="xref"
HREF="ch03_110.htm"
TITLE="print"
><B
CLASS="xref.cmd"
>print</B
></A
>), and some transform lists into other lists (like <A
CLASS="xref"
HREF="ch03_153.htm"
TITLE="sort"
><B
CLASS="xref.cmd"
>sort</B
></A
>).
Operators in the last category can be considered filters; only, unlike
in the shell, the flow of data is from right to left, since list
operators operate on their arguments passed in from the right.  You can
stack up several list operators in a row:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>print reverse sort map {lc} keys %hash;</PRE
></P
><P
CLASS="para"
>That takes the keys of <CODE
CLASS="literal"
>%hash</CODE
> and returns them to the <A
CLASS="xref"
HREF="ch03_091.htm"
TITLE="map"
><B
CLASS="xref.cmd"
>map</B
></A
> function,
which lowercases all the keys by applying the <A
CLASS="xref"
HREF="ch03_082.htm"
TITLE="lc"
><B
CLASS="xref.cmd"
>lc</B
></A
> operator to each of
them, and passes them to the <A
CLASS="xref"
HREF="ch03_153.htm"
TITLE="sort"
><B
CLASS="xref.cmd"
>sort</B
></A
> function, which sorts them, and
passes them to the <B
CLASS="emphasis.bold"
>reverse</B
> function, which reverses the order of the
list elements, and passes them to the <B
CLASS="emphasis.bold"
>print</B
> function, which prints them.</P
><P
CLASS="para"
>As you can see, that's much easier to describe in Perl than in English.<A
CLASS="indexterm"
NAME="AUTOID-1816"
></A
></P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch01_07.htm"
TITLE="1.7 Regular Expressions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.7 Regular Expressions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch01_09.htm"
TITLE="1.9 What You Don't Know Won't Hurt You (Much)"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.9 What You Don't Know Won't Hurt You (Much)"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.7 Regular Expressions</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.9 What You Don't Know Won't Hurt You (Much)</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
