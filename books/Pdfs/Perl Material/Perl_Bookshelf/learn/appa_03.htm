<HTML
><HEAD
>
<TITLE>[Appendix A] A.3 Chapter 4, Control Structures</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:36:46Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="appa_01.htm"
TITLE="A. Exercise Answers"><LINK
REL="prev"
HREF="appa_02.htm"
TITLE="A.2 Chapter 3, Arrays and List Data"><LINK
REL="next"
HREF="appa_04.htm"
TITLE="A.4 Chapter 5, Hashes"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_02.htm"
TITLE="A.2 Chapter 3, Arrays and List Data"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: A.2 Chapter 3, Arrays and List Data"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="appendix"
REL="up"
HREF="appa_01.htm"
TITLE="A. Exercise Answers"
>Appendix A<BR>Exercise Answers</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_04.htm"
TITLE="A.4 Chapter 5, Hashes"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: A.4 Chapter 5, Hashes"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="appa-13257"
>A.3 Chapter 4, Control Structures</A
></H2
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-179344"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>print &quot;What temperature is it? &quot;;
chomp($temperature = &lt;STDIN&gt;);
if ($temperature &gt; 72) {
    print &quot;Too hot!\n&quot;;
} else {
    print &quot;Too cold!\n&quot;;
}</PRE
><P
CLASS="para"
>The first line prompts you for the temperature. The second line accepts the temperature for input. The <CODE
CLASS="literal"
>if</CODE
> statement on the final 5 lines selects one of two messages to print, depending on the value of <CODE
CLASS="literal"
>$temperature</CODE
>.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-179357"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>print &quot;What temperature is it? &quot;;
chomp($temperature = &lt;STDIN&gt;);
if ($temperature &gt; 75) {
    print &quot;Too hot!\n&quot;;
} <A
CLASS="indexterm"
NAME="appa-idx-178708-0"
></A
>elsif ($temperature &lt; 68) {
    print &quot;Too cold!\n&quot;;
} else {
    print &quot;Just right!\n&quot;;
}</PRE
><P
CLASS="para"
>Here, we've modified the program to include a three-way choice. First, the temperature is compared to 75, then to 68. Note that only one of the three choices will be executed each time through the program.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-178873"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>print &quot;Enter a number (999 to quit): &quot;;
chomp($n = &lt;STDIN&gt;);
<A
CLASS="indexterm"
NAME="appa-idx-178709-0"
></A
>while ($n != 999) {
    $sum <A
CLASS="indexterm"
NAME="appa-idx-181016-0"
></A
>+= $n;
    print &quot;Enter another number (999 to quit): &quot;;
    chomp($n = &lt;STDIN&gt;);
}
print &quot;the sum is $sum\n&quot;;</PRE
><P
CLASS="para"
>The first line prompts for the first number. The second line reads the number from the terminal. The <CODE
CLASS="literal"
>while</CODE
> loop continues to execute as long as the number is not 999.</P
><P
CLASS="para"
>The += operator accumulates the numbers into the <CODE
CLASS="literal"
>$sum</CODE
> variable. Note that the initial value of <CODE
CLASS="literal"
>$sum</CODE
> is <CODE
CLASS="literal"
>undef</CODE
>, which makes a nice value for an accumulator, because the first value added in will be effectively added to <CODE
CLASS="literal"
>0</CODE
> (remember that <CODE
CLASS="literal"
>undef</CODE
> used as a number is zero).</P
><P
CLASS="para"
>Within the loop, we must prompt for and receive another number, so that the test at the top of the loop is against a newly entered number.</P
><P
CLASS="para"
>When the loop is exited, the program prints the accumulated results.</P
><P
CLASS="para"
>Note that if you enter <CODE
CLASS="literal"
>999</CODE
> right away, the value of <CODE
CLASS="literal"
>$sum</CODE
> is not zero, but an empty string&nbsp;- the value of <CODE
CLASS="literal"
>undef</CODE
> when used as a string. If you want to ensure that the program prints zero in this case, you should initialize the value of <CODE
CLASS="literal"
>$sum</CODE
> in the beginning of the program with <CODE
CLASS="literal"
>$sum = 0</CODE
>.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-41998"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>print &quot;Enter some strings, end with ^D:\n&quot;;
@strings = &lt;STDIN&gt;;
while (@strings) {
    print <A
CLASS="indexterm"
NAME="appa-idx-178711-0"
></A
>pop @strings;
}</PRE
><P
CLASS="para"
>First, this program asks for the strings. These strings are saved in the array variable <CODE
CLASS="literal"
>@strings</CODE
>, one per element.</P
><P
CLASS="para"
>The control expression of the <CODE
CLASS="literal"
>while</CODE
> loop is <CODE
CLASS="literal"
>@strings</CODE
>. The control expression is looking for a single value (<EM
CLASS="emphasis"
>true</EM
> or <EM
CLASS="emphasis"
>false</EM
>), and is therefore computing the expression in a scalar context. The name of an array (such as <CODE
CLASS="literal"
>@strings</CODE
>) when used in a scalar context is the number of elements currently in the array. As long as the array is not empty, this number is nonzero and therefore true. This is a very common Perl idiom for "do this while the array is nonempty."</P
><P
CLASS="para"
>The body of the loop prints a value, obtained by <CODE
CLASS="literal"
>pop</CODE
>'ing off the rightmost element of the array. Thus, because that element has been popped, each time through the loop the array is one element shorter.</P
><P
CLASS="para"
>You may have considered using subscripts for this problem. As we say, there's more than one way to do it. However, you'll rarely see subscripts in true Perl Hackers' programs because there's almost always a better way.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-178888"
></A
>Here's a way to do it without a list:</P
><PRE
CLASS="programlisting"
><A
CLASS="indexterm"
NAME="appa-idx-178712-0"
></A
>for ($number = 0; $number &lt;= 32; $number++) {
    $square = $number * $number;
    <A
CLASS="indexterm"
NAME="appa-idx-178714-0"
></A
>printf &quot;%5g %8g\n&quot;, $number, $square;
}</PRE
><P
CLASS="para"
>And here's how to do it <EM
CLASS="emphasis"
>with</EM
> a list:</P
><PRE
CLASS="programlisting"
><A
CLASS="indexterm"
NAME="appa-idx-178713-0"
></A
>foreach $number (0..32) {
    $square = $number * $number;
    printf &quot;%5g %8g\n&quot;, $number, $square;
}</PRE
><P
CLASS="para"
>These solutions both involve loops, using the <CODE
CLASS="literal"
>for</CODE
> and <CODE
CLASS="literal"
>foreach</CODE
> statements. The body of the loops are identical, because for both solutions, the value of <CODE
CLASS="literal"
>$number</CODE
> proceeds from 0 to 32 on each iteration.</P
><P
CLASS="para"
>The first solution uses a traditional C-like <CODE
CLASS="literal"
>for</CODE
> statement. The three expressions respectively: set <CODE
CLASS="literal"
>$number</CODE
> to 0, test to see if <CODE
CLASS="literal"
>$number</CODE
> is less than or equal to 32, and increment <CODE
CLASS="literal"
>$number</CODE
> on each iteration.</P
><P
CLASS="para"
>The second solution uses a C-shell-like <CODE
CLASS="literal"
>foreach</CODE
> statement. A list of <CODE
CLASS="literal"
>33</CODE
> elements (0 to 32) is created, using the list contructor. The variable <CODE
CLASS="literal"
>$number</CODE
> is then set to each element in turn.</P
></LI
></OL
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_02.htm"
TITLE="A.2 Chapter 3, Arrays and List Data"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: A.2 Chapter 3, Arrays and List Data"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_04.htm"
TITLE="A.4 Chapter 5, Hashes"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: A.4 Chapter 5, Hashes"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>A.2 Chapter 3, Arrays and List Data</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>A.4 Chapter 5, Hashes</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
