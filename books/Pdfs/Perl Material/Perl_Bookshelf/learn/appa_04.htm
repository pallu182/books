<HTML
><HEAD
>
<TITLE>[Appendix A] A.4 Chapter 5, Hashes</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:36:48Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="appa_01.htm"
TITLE="A. Exercise Answers"><LINK
REL="prev"
HREF="appa_03.htm"
TITLE="A.3 Chapter 4, Control Structures"><LINK
REL="next"
HREF="appa_05.htm"
TITLE="A.5 Chapter 6, Basic I/O"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_03.htm"
TITLE="A.3 Chapter 4, Control Structures"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: A.3 Chapter 4, Control Structures"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="appendix"
REL="up"
HREF="appa_01.htm"
TITLE="A. Exercise Answers"
>Appendix A<BR>Exercise Answers</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_05.htm"
TITLE="A.5 Chapter 6, Basic I/O"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: A.5 Chapter 6, Basic I/O"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="appa-30451"
>A.4 Chapter 5, Hashes</A
></H2
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-178870"
></A
>Here is one way to do it:</P
><PRE
CLASS="programlisting"
>%map = qw(red apple green leaves blue ocean);
print &quot;A string please: &quot;; chomp($some_string = &lt;STDIN&gt;);
print &quot;The value for $some_string is $map{$some_string}\n&quot;;</PRE
><P
CLASS="para"
>The first line creates the hash, giving it the desired key-value pairs. The second line fetches a string, removing the pesky newline. The third line prints the entered value and its mapped value.</P
><P
CLASS="para"
>You can also create the hash through a series of separate assignments, like so:</P
><PRE
CLASS="programlisting"
>$map{'red'} = 'apple';
$map{'green'} = 'leaves';
$map{'blue'} = 'ocean';</PRE
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-178906"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>chomp(@words = &lt;STDIN&gt;);               # read the words, minus newlines
<A
CLASS="indexterm"
NAME="appa-idx-178715-0"
></A
>foreach $word (@words) {
    $count{$word} = $count{$word} + 1; # or $count{$word}++
}
foreach $word (keys %count) {
    print &quot;$word was seen $count{$word} times\n&quot;;
}</PRE
><P
CLASS="para"
>The first line reads the lines into the <CODE
CLASS="literal"
>@words</CODE
> array. Recall that this will cause each line to end up as a separate element of the array, with the newline character still intact.</P
><P
CLASS="para"
>The next four lines step through the array, setting <CODE
CLASS="literal"
>$word</CODE
> equal to each line in turn. The newline is discarded with <CODE
CLASS="literal"
>chomp</CODE
>, and then the magic comes. Each word is used as a key into a hash. The value of the element selected by the key (the word) is a count of the number of times we've seen that word so far. Initially, there are no elements in the hash, so if the word <CODE
CLASS="literal"
>wild</CODE
> is seen on the first line, we have <CODE
CLASS="literal"
>$count{&quot;wild&quot;}</CODE
>, which is <CODE
CLASS="literal"
>undef</CODE
>. The <CODE
CLASS="literal"
>undef</CODE
> value plus one turns out to be zero plus one, or one. (Recall that <CODE
CLASS="literal"
>undef</CODE
> looks like a zero if used as a number.) The next time through, we'll have one plus one, or two, and so on.</P
><P
CLASS="para"
>Another common way to write the increment is given in the comments. Fluent Perl programmers tend to be lazy (we call it "concise") and would never go for writing the same hash reference on both sides of the assignment when a simple autoincrement will do.</P
><P
CLASS="para"
>After the words have been counted, the last few lines step through the hash by looking at each of its keys one at a time. The key and the corresponding value are printed after having been interpolated into the string.</P
><P
CLASS="para"
>The extra challenge answer looks like this answer, with the <CODE
CLASS="literal"
>sort</CODE
> operator inserted just before the word <CODE
CLASS="literal"
>keys</CODE
> on the third-to-last line. Without the sorting, the resulting output is seemingly random and unpredictable. However, once sorted, the output is predictable and consistent. (Personally, I rarely use the <CODE
CLASS="literal"
>keys</CODE
> operator without also adding a sort immediately in front of it; this ensures that reruns over the same or similar data generate comparable results.)</P
></LI
></OL
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_03.htm"
TITLE="A.3 Chapter 4, Control Structures"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: A.3 Chapter 4, Control Structures"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_05.htm"
TITLE="A.5 Chapter 6, Basic I/O"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: A.5 Chapter 6, Basic I/O"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>A.3 Chapter 4, Control Structures</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>A.5 Chapter 6, Basic I/O</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
