<HTML
><HEAD
>
<TITLE>[Appendix A] A.9 Chapter 10, Filehandles and File Tests</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:36:57Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="appa_01.htm"
TITLE="A. Exercise Answers"><LINK
REL="prev"
HREF="appa_08.htm"
TITLE="A.8 Chapter 9, Miscellaneous Control Structures"><LINK
REL="next"
HREF="appa_10.htm"
TITLE="A.10 Chapter 11, Formats"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_08.htm"
TITLE="A.8 Chapter 9, Miscellaneous Control Structures"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: A.8 Chapter 9, Miscellaneous Control Structures"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="appendix"
REL="up"
HREF="appa_01.htm"
TITLE="A. Exercise Answers"
>Appendix A<BR>Exercise Answers</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_10.htm"
TITLE="A.10 Chapter 11, Formats"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: A.10 Chapter 11, Formats"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="appa-34915"
>A.9 Chapter 10, Filehandles and File Tests</A
></H2
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-178802"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>print &quot;What file? &quot;;
chomp($filename = &lt;STDIN&gt;);
<A
CLASS="indexterm"
NAME="appa-idx-178729-0"
></A
>open(THATFILE, &quot;$filename&quot;) ||
    die &quot;cannot open $filename: $!&quot;;
while (&lt;THATFILE&gt;) {
    print &quot;$filename: $_&quot;; # presume $_ ends in \n
}</PRE
><P
CLASS="para"
>The first two lines prompt for a filename, which is then opened with the filehandle <CODE
CLASS="literal"
>THATFILE</CODE
>. The contents of the file are read using the filehandle and printed to <CODE
CLASS="literal"
>STDOUT</CODE
>.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-178956"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>print &quot;Input file name: &quot;;
chomp($infilename = &lt;STDIN&gt;);
print &quot;Output file name: &quot;;
chomp($outfilename = &lt;STDIN&gt;);
print &quot;Search string: &quot;;
chomp($search = &lt;STDIN&gt;);
print &quot;Replacement string: &quot;;
chomp($replace = &lt;STDIN&gt;);
open(IN,$infilename) ||
    die &quot;cannot open $infilename for reading: $!&quot;;
## optional test for overwrite...
die &quot;will not overwrite $outfilename&quot; if -e $outfilename;
open(OUT,&quot;&gt;$outfilename&quot;) ||
    die &quot;cannot create $outfilename: $!&quot;;
while (&lt;IN&gt;) {    # read a line from file IN into $_
    <A
CLASS="indexterm"
NAME="appa-idx-178730-0"
></A
>s/$search/$replace/g; # change the lines
    print OUT $_; # print that line to file OUT
}
close(IN);
close(OUT);</PRE
><P
CLASS="para"
>This program is based on the file-copying program presented earlier in the chapter. New features here include prompting for the strings  and the substitute command in the middle of the <CODE
CLASS="literal"
>while</CODE
> loop, as well as the test for overwriting a file.</P
><P
CLASS="para"
>Note that backreferences in the regular expression do work, but referencing memory in the replacement string does not.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-179421"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>while (<A
CLASS="indexterm"
NAME="appa-idx-178731-0"
></A
>&lt;&gt;) {
    chomp; # eliminate the newline
    print &quot;$_ is readable\n&quot; if -r;
    print &quot;$_ is writable\n&quot; if -w;
    print &quot;$_ is executable\n&quot; if -x;
    print &quot;$_ does not exist\n&quot; unless -e;
}</PRE
><P
CLASS="para"
>This <CODE
CLASS="literal"
>while</CODE
> loop reads a filename each time through. After discarding the newline, the series of statements tests the file for the various permissions.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-179430"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>while (&lt;&gt;) {
    chomp;
    $age = -M;
    if ($oldest_age &lt; $age) {
        $oldest_name = $_;
        $oldest_age = $age;
    }
}
print &quot;The oldest file is $oldest_name &quot;,
    &quot;and is $oldest_age days old.\n&quot;;</PRE
><P
CLASS="para"
>First, we loop on each filename being read in. The newline is discarded, and then the age in days gets computed with the <CODE
CLASS="literal"
>-M</CODE
> operator. If the age for this file exceeds the oldest file we've seen so far, we remember the filename and its corresponding age. Initially, <CODE
CLASS="literal"
>$oldest_age</CODE
> will be <CODE
CLASS="literal"
>0</CODE
>, so we're counting on there being at least one file that is more than <CODE
CLASS="literal"
>0</CODE
> days old.</P
><P
CLASS="para"
>The final <CODE
CLASS="literal"
>print</CODE
> statement generates the report when we're done.</P
></LI
></OL
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_08.htm"
TITLE="A.8 Chapter 9, Miscellaneous Control Structures"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: A.8 Chapter 9, Miscellaneous Control Structures"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_10.htm"
TITLE="A.10 Chapter 11, Formats"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: A.10 Chapter 11, Formats"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>A.8 Chapter 9, Miscellaneous Control Structures</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>A.10 Chapter 11, Formats</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
