<HTML
><HEAD
>
<TITLE>[Chapter 4] 4.6 The foreach Statement</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl on Win32 Systems"><META
NAME="DC.creator"
CONTENT="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:33:11Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-324-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. Control Structures"><LINK
REL="prev"
HREF="ch04_05.htm"
TITLE="4.5 The for Statement"><LINK
REL="next"
HREF="ch04_07.htm"
TITLE="4.7 Exercises"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl on Win32 Systems"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl on Win32 Systems"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/wsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_05.htm"
TITLE="4.5 The for Statement"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.5 The for Statement"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. Control Structures"
>Chapter 4<BR>Control Structures</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_07.htm"
TITLE="4.7 Exercises"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.7 Exercises"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch04-29786"
>4.6 The foreach Statement</A
></H2
><P
CLASS="para"
>Yet another iteration construct is the <A
CLASS="indexterm"
NAME="ch04-idx-437544-0"
></A
><CODE
CLASS="literal"
>foreach</CODE
> statement. This statement takes a list of values and assigns them one at a time to a scalar variable, executing a block of code with each successive assignment. It looks like this:</P
><PRE
CLASS="programlisting"
>foreach <CODE
CLASS="replaceable"
><I
>$i</I
></CODE
> (<CODE
CLASS="replaceable"
><I
>@some_list</I
></CODE
>) {
        <CODE
CLASS="replaceable"
><I
>statement_1</I
></CODE
>;
        <CODE
CLASS="replaceable"
><I
>statement_2</I
></CODE
>;
        <CODE
CLASS="replaceable"
><I
>statement_3</I
></CODE
>;
}</PRE
><P
CLASS="para"
>The original value of the scalar variable is automatically restored when the loop exits; another way to say this is that the <A
CLASS="indexterm"
NAME="ch04-idx-437545-0"
></A
>scalar variable is <EM
CLASS="emphasis"
>local</EM
> to the loop.</P
><P
CLASS="para"
>Here's an example of a <CODE
CLASS="literal"
>foreach</CODE
>:</P
><PRE
CLASS="programlisting"
>@a = (1,2,3,4,5);
foreach $b (reverse @a) {
        print $b;
}</PRE
><P
CLASS="para"
>This program snippet prints <CODE
CLASS="literal"
>54321</CODE
>. Note that the list used by the <CODE
CLASS="literal"
>foreach</CODE
> can be an arbitrary <A
CLASS="indexterm"
NAME="ch04-idx-437547-0"
></A
>list expression, not just an <A
CLASS="indexterm"
NAME="ch04-idx-437546-0"
></A
>array variable. (This flexibility is typical of all Perl constructs that require a list.)</P
><P
CLASS="para"
>You can omit the name of the scalar variable, in which case Perl pretends you have specified the <A
CLASS="indexterm"
NAME="ch04-idx-437548-0"
></A
><CODE
CLASS="literal"
>$_</CODE
> variable name instead. You'll find that the <CODE
CLASS="literal"
>$_</CODE
> variable is used as a default for many of Perl's operations, so you can think of it as a scratch area.[<A
CLASS="footnote"
HREF="#ch04-pgfId-621"
>4</A
>] (All operations that use <CODE
CLASS="literal"
>$_</CODE
> by default can also use a normal scalar variable as well.) For example, the <A
CLASS="indexterm"
NAME="ch04-idx-437549-0"
></A
><CODE
CLASS="literal"
>print</CODE
> function prints the value of <CODE
CLASS="literal"
>$_</CODE
> if no other value is specified, so the following example works like the previous one:</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch04-pgfId-621"
>[4]</A
> Which means you'd better localize it in functions when we learn about them.</P
></DIV
></BLOCKQUOTE
><PRE
CLASS="programlisting"
>@a = (1,2,3,4,5);
foreach (reverse @a) {
        print;
}</PRE
><P
CLASS="para"
>See how using the implied <CODE
CLASS="literal"
>$_</CODE
> variable makes it easier? After you've learned more functions and operators that default to <CODE
CLASS="literal"
>$_</CODE
>, this construct will become even more useful. This is one case where the shorter construct is more legible than the longer one. </P
><P
CLASS="para"
>If the list you are iterating over is made of real variables rather than some function returning a list value, then the variable being used for iteration is in fact an alias for each variable in the list instead of being merely a copy of the values. Consequently, if you change the scalar variable, you are also changing that particular element in the list that the variable is standing in for. For example:</P
><PRE
CLASS="programlisting"
>@a = (3,5,7,9);
foreach $one (@a) {
        $one *= 3;
    $x = 17;
    @a = (3,5,7,9);
    @b = (10,20,30);
    foreach $one (@a, @b, $x) {
    $one *= 3;
    }
    # $x is now 51
    # @a is now (9,15,21,27)
    # @b is now (30,60,90);
}
# @a is now (9,15,21,27)</PRE
><P
CLASS="para"
>Notice how altering <CODE
CLASS="literal"
>$one</CODE
> in fact altered each element of <CODE
CLASS="literal"
>@a</CODE
>.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_05.htm"
TITLE="4.5 The for Statement"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.5 The for Statement"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl on Win32 Systems"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch04_07.htm"
TITLE="4.7 Exercises"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.7 Exercises"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.5 The for Statement</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.7 Exercises</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
