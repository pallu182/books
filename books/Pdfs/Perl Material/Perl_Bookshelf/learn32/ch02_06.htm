<HTML
><HEAD
>
<TITLE>[Chapter 2] 2.6 Scalar Operators and Functions</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl on Win32 Systems"><META
NAME="DC.creator"
CONTENT="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:32:13Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-324-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Scalar Data"><LINK
REL="prev"
HREF="ch02_05.htm"
TITLE="2.5 Scalar Variables"><LINK
REL="next"
HREF="ch02_07.htm"
TITLE="2.7 &lt;STDIN&gt; as a Scalar Value"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl on Win32 Systems"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl on Win32 Systems"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/wsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_05.htm"
TITLE="2.5 Scalar Variables"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.5 Scalar Variables"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. Scalar Data"
>Chapter 2<BR>Scalar Data</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_07.htm"
TITLE="2.7 &lt;STDIN&gt; as a Scalar Value"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.7 &lt;STDIN&gt; as a Scalar Value"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch02-32461"
>2.6 Scalar Operators and Functions</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-768616-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-768616-1"
></A
>The most common operation on a scalar variable is <EM
CLASS="emphasis"
>assignment</EM
><A
CLASS="indexterm"
NAME="ch02-idx-768617-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-768617-1"
></A
>, which is the way to give a value to a variable. The Perl assignment operator is the <A
CLASS="indexterm"
NAME="ch02-idx-768618-0"
></A
>equal sign (as in C or FORTRAN), which takes a variable name on the left side and gives it the value of the expression on the right, like so:</P
><PRE
CLASS="programlisting"
>$a = 17;     # give $a the value of 17
$b = $a + 3; # give $b the current value of $a plus 3 (20)
$b = $b * 2; # give $b the value of $b multiplied by 2 (40)</PRE
><P
CLASS="para"
>Notice that the last line uses the <CODE
CLASS="literal"
>$b</CODE
> variable twice: once to get its value (on the right side of the <CODE
CLASS="literal"
>=</CODE
>), and once to define where to put the computed expression (on the left side of the <CODE
CLASS="literal"
>=</CODE
>). This is legal, safe, and in fact, rather common. In fact, the practice is so common that we'll see in a minute that we can write this expression using a convenient shorthand.</P
><P
CLASS="para"
>You may have noticed that scalar variables are always specified with the leading <CODE
CLASS="literal"
>$</CODE
>. In batch files, Java, or C, you don't need the <CODE
CLASS="literal"
>$</CODE
> at all. If you bounce back and forth a lot, you'll find yourself typing the wrong things occasionally. This is expected. (Our solution was to stop writing batch files and C programs, but that may not work for you.)</P
><P
CLASS="para"
>You may use a <A
CLASS="indexterm"
NAME="ch02-idx-768530-0"
></A
>scalar assignment as a value as well as an operation, as in C. In other words, <CODE
CLASS="literal"
>$a=3</CODE
> has a value, just as <CODE
CLASS="literal"
>$a+3</CODE
> has a value. The value is the value assigned, so the value of <CODE
CLASS="literal"
>$a=3</CODE
> is <CODE
CLASS="literal"
>3</CODE
>. Although this usage may seem odd at first glance, using an assignment as a value is useful if you wish to assign an intermediate value in an expression to a variable, or if you simply wish to copy the same value to more than one variable. For example:</P
><PRE
CLASS="programlisting"
>$b = 4 + ($a = 3);      # assign 3 to $a, then add 4 to that
                        # resulting in $b getting 7
$d = ($c = 5);          # copy 5 into $c, and then also into $d
$d = $c = 5;            # the same thing without parentheses</PRE
><P
CLASS="para"
>That last example works because assignment is right-associative.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-pgfId-768737"
>2.6.1 Binary Assignment Operators</A
></H3
><P
CLASS="para"
>Expressions like <CODE
CLASS="literal"
>$a = $a + 5</CODE
> (in which the same variable appears on both sides of an assignment) occur so frequently that Perl has a shorthand for the operation of <EM
CLASS="emphasis"
>altering a variable</EM
>: the <A
CLASS="indexterm"
NAME="ch02-idx-1490-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-1490-1"
></A
><EM
CLASS="emphasis"
>binary assignment operator</EM
>. Nearly all binary operators that compute a value have a corresponding binary assignment form with an appended equal sign. For example, the following two lines are equivalent:</P
><PRE
CLASS="programlisting"
>$a = $a + 5;  # without the binary assignment operator
$a <A
CLASS="indexterm"
NAME="ch02-idx-1492-0"
></A
>+= 5;      # with the binary assignment operator</PRE
><P
CLASS="para"
>And so are these:</P
><PRE
CLASS="programlisting"
>$b = $b * 3;
$b *= 3;</PRE
><P
CLASS="para"
>In each case, the operator causes the existing value of the variable to be altered in some way, not simply overwriting the value with the result of some new expression.</P
><P
CLASS="para"
>Another common assignment operator is the string concatenate operator:</P
><PRE
CLASS="programlisting"
>$str = $str . &quot; &quot;;  # append a space to $str
$str <A
CLASS="indexterm"
NAME="ch02-idx-1497-0"
></A
>.= &quot; &quot;;        # same thing with assignment operator</PRE
><P
CLASS="para"
>Nearly all binary operators are valid in this way. For example, a <EM
CLASS="emphasis"
>raise to the power of</EM
> operator is written as <A
CLASS="indexterm"
NAME="ch02-idx-768622-0"
></A
><CODE
CLASS="literal"
>**=</CODE
>. So, <CODE
CLASS="literal"
>$a **= 3</CODE
> means "raise the number in <CODE
CLASS="literal"
>$a</CODE
> to the third power, placing the result back in <CODE
CLASS="literal"
>$a</CODE
>."</P
><P
CLASS="para"
>Like the simple assignment operator, each of these operators has a value as well: the new value of the variable. For example:</P
><PRE
CLASS="programlisting"
>$a = 3;
$b = ($a += 4); # $a and $b are both now 7</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-pgfId-768738"
>2.6.2 Autoincrement and Autodecrement</A
></H3
><P
CLASS="para"
>As if it weren't already easy enough to add one to <CODE
CLASS="literal"
>$a</CODE
> by saying <CODE
CLASS="literal"
>$a += 1</CODE
>, Perl goes one step further and shortens even this method. The <A
CLASS="indexterm"
NAME="ch02-idx-768625-0"
></A
><CODE
CLASS="literal"
>++</CODE
> operator (called the <A
CLASS="indexterm"
NAME="ch02-idx-768624-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-768624-1"
></A
><EM
CLASS="emphasis"
>autoincrement</EM
> operator) adds one to its operand, and returns the incremented value, like so:</P
><PRE
CLASS="programlisting"
>$a += 1;   # with assignment operator
++$a;      # with prefix autoincrement
$d = 17;
$e = ++$d; # $e and $d are both 18 now</PRE
><P
CLASS="para"
>Here, the <CODE
CLASS="literal"
>++</CODE
> operator is being used as a <EM
CLASS="emphasis"
>prefix</EM
> operator&nbsp;- that is, the operator appears to the left of its operand. You may also use the autoincrement in a <EM
CLASS="emphasis"
>suffix</EM
> form (to the right of its operand). In this case, the result of the expression is the old value of the variable <EM
CLASS="emphasis"
>before</EM
> the variable is incremented. For example:</P
><PRE
CLASS="programlisting"
>$c = 17;
$d = $c++; # $d is 17, but $c is now 18</PRE
><P
CLASS="para"
>Because the value of the operand changes, the operand must be a real scalar variable, not just an expression. You cannot say <CODE
CLASS="literal"
>++16</CODE
> to get <CODE
CLASS="literal"
>17</CODE
>, nor can you say <CODE
CLASS="literal"
>++($a+$b)</CODE
> to somehow get one more than the sum of <CODE
CLASS="literal"
>$a</CODE
> and <CODE
CLASS="literal"
>$b</CODE
>.</P
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch02-idx-768626-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-768626-1"
></A
>autodecrement operator (<A
CLASS="indexterm"
NAME="ch02-idx-768627-0"
></A
><CODE
CLASS="literal"
>--</CODE
>) is similar to the autoincrement operator, but subtracts one rather than adding one. Like the autoincrement operator, the autodecrement operator has a prefix and suffix form. For example:</P
><PRE
CLASS="programlisting"
>$x = 12;
--$x; # $x is now 11
$y = $x--; # $y is 11, and $x is now 10</PRE
><P
CLASS="para"
>The autoincrement and autodecrement operators also work on floating-point values. So autoincrementing a variable with the value <CODE
CLASS="literal"
>4.2</CODE
> yields <CODE
CLASS="literal"
>5.2</CODE
> as expected.[<A
CLASS="footnote"
HREF="#ch02-pgfId-1513"
>10</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch02-pgfId-1513"
>[10]</A
> Autoincrement even works on strings. See <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> or <EM
CLASS="emphasis"
>perlop</EM
> for related information.</P
></DIV
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-pgfId-768739"
>2.6.3 The chop( ) and chomp( ) Functions</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-768629-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-768629-1"
></A
>A useful built-in function is <A
CLASS="indexterm"
NAME="ch02-idx-768628-0"
></A
><CODE
CLASS="literal"
>chop()</CODE
>. This prefix function takes a single argument within its parentheses&nbsp;- the name of a scalar variable&nbsp;- and removes the last character from the string value of that variable. For example:</P
><PRE
CLASS="programlisting"
>$x = &quot;hello world&quot;;
chop($x); # $x is now &quot;hello worl&quot;</PRE
><P
CLASS="para"
>Note that the value of the argument is altered here, hence the requirement for a scalar variable, rather than simply a scalar value. It would not make sense, for example, to write <CODE
CLASS="literal"
>chop('suey')</CODE
> to change it to <CODE
CLASS="literal"
>'sue'</CODE
>, because there is no place in which to save the value. Besides, you could have just written <CODE
CLASS="literal"
>'sue'</CODE
> instead.</P
><P
CLASS="para"
>The value returned is the discarded character (the letter <CODE
CLASS="literal"
>d</CODE
> in <CODE
CLASS="literal"
>world</CODE
> above). As a result, the following code is probably wrong:</P
><PRE
CLASS="programlisting"
>$x = chop($x);  # WRONG: replaces $x with its last character
chop($x);       # RIGHT: as above, removes the last character</PRE
><P
CLASS="para"
>If you give <CODE
CLASS="literal"
>chop()</CODE
> an empty string, it does nothing, returns nothing, and doesn't raise an error or even whimper a bit.[<A
CLASS="footnote"
HREF="#ch02-pgfId-1535"
>11</A
>] Most operations in Perl have sensible boundary conditions; in other words, you can use them right up to the edges (and beyond), frequently without complaint. Some have argued that this is one of Perl's fundamental flaws, while others write screaming programs without having to worry about the fringes. You decide which camp you wish to join.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch02-pgfId-1535"
>[11]</A
> Unless you are using the sanity-saving <CODE
CLASS="literal"
>-w</CODE
> switch.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>When you chop a string that has already been chopped, another character disappears off into "bit heaven." For example:</P
><PRE
CLASS="programlisting"
>$a = &quot;hello world\n&quot;;
chop $a; # $a is now &quot;hello world&quot;
chop $a; # oops! $a is now &quot;hello worl&quot;</PRE
><P
CLASS="para"
>If you're not sure whether the variable has a newline on the end, you can use the slightly safer <CODE
CLASS="literal"
>chomp()</CODE
> function, which removes only a newline character,[<A
CLASS="footnote"
HREF="#ch02-pgfId-1001"
>12</A
>] like so:</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch02-pgfId-1001"
>[12]</A
> Or whatever the input record separator <CODE
CLASS="literal"
>$\</CODE
> is set to.</P
></DIV
></BLOCKQUOTE
><PRE
CLASS="programlisting"
>$a = &quot;hello world\n&quot;;
chomp ($a); # $a is now &quot;hello world&quot;
chomp ($a); # aha! no change in $a</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-pgfId-768694"
>2.6.4 Interpolation of Scalars into Strings</A
></H3
><P
CLASS="para"
>When a string literal is <A
CLASS="indexterm"
NAME="ch02-idx-768631-0"
></A
>double quoted, it is subject to <A
CLASS="indexterm"
NAME="ch02-idx-768630-0"
></A
><EM
CLASS="emphasis"
>variable interpolation</EM
> (besides being checked for backslash escapes). This means that the string is scanned for possible scalar variable[<A
CLASS="footnote"
HREF="#ch02-pgfId-768769"
>13</A
>] names&nbsp;- namely, a dollar sign followed by letters, digits, and underscores. When a variable reference is found, it is replaced with its current value (or an empty string if the variable has not yet been assigned a value). For example:</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch02-pgfId-768769"
>[13]</A
> The string is actually scanned for array variables as well, but we won't know about those until <A
CLASS="xref"
HREF="ch03_01.htm"
TITLE="Arrays and List Data"
>Chapter 3, <CITE
CLASS="chapter"
>Arrays and List Data</CITE
></A
><EM
CLASS="emphasis"
>.</EM
></P
></DIV
></BLOCKQUOTE
><PRE
CLASS="programlisting"
>$a = &quot;fred&quot;;
$b = &quot;some text $a&quot;;             # $b is now &quot;some text fred&quot;
$c = &quot;no such variable $what&quot;;   # $c is &quot;no such variable &quot;</PRE
><P
CLASS="para"
>The text that replaces the variable is not rescanned; even if there are dollar signs in the replaced value, no further replacement occurs:</P
><PRE
CLASS="programlisting"
>$x = '$fred';  # literally a dollar sign followed by &quot;fred&quot;
$y = &quot;hey $x&quot;; # value is 'hey $fred': no double substitution</PRE
><P
CLASS="para"
>To prevent the substitution of a variable with its value, you must either alter that part of the string so that it appears in single quotes, or precede the <A
CLASS="indexterm"
NAME="ch02-idx-768632-0"
></A
>dollar sign with a backslash, which turns off the dollar sign's special significance:</P
><PRE
CLASS="programlisting"
>$fred    = 'hi';
$barney  = &quot;a test of &quot; . '$fred';# literally: 'a test of $fred'
$barney2 = &quot;a test of \$fred&quot;;    # same thing</PRE
><P
CLASS="para"
>The variable name will be the longest possible variable name that makes sense at that part of the string. This can be a problem if you want to follow the replaced value immediately with some constant text that begins with a letter, digit, or underscore. As Perl scans for variable names, it would consider those characters to be additional name characters, and this result is not what you want. Perl provides a delimiter for the variable name. Simply enclose the <EM
CLASS="emphasis"
>name</EM
> of the variable in a pair of <A
CLASS="indexterm"
NAME="ch02-idx-768529-0"
></A
>curly braces. Or, you can end that part of the string and start another part of the string with a concatenation operator:</P
><PRE
CLASS="programlisting"
>$fred = &quot;pay&quot;; $fredday = &quot;wrong!&quot;;
$barney = &quot;It's $fredday&quot;;          # not payday, but &quot;It's wrong!&quot;
$barney = &quot;It's ${fred}day&quot;;        # now, $barney gets &quot;It's payday&quot;
$barney2 = &quot;It's $fred&quot;.&quot;day&quot;;      # another way to do it
$barney3 = &quot;It's &quot; . $fred . &quot;day&quot;; # and another way</PRE
><P
CLASS="para"
>You can use the case-shifting string escapes to alter the case of letters that are brought in with variable interpolation.[<A
CLASS="footnote"
HREF="#ch02-pgfId-1269"
>14</A
>] For example:</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch02-pgfId-1269"
>[14]</A
> You may find the <CODE
CLASS="literal"
>uc</CODE
>, <CODE
CLASS="literal"
>ucfirst</CODE
>, <CODE
CLASS="literal"
>lc</CODE
>, and <CODE
CLASS="literal"
>lcfirst</CODE
> operators easier to use.</P
></DIV
></BLOCKQUOTE
><PRE
CLASS="programlisting"
>$bigfred = &quot;\Ufred&quot;;                  # $bigfred is &quot;FRED&quot;
$fred = &quot;fred&quot;; $bigfred = &quot;\U$fred&quot;; # same thing
$capfred = &quot;\u$fred&quot;;                 # $capfred is &quot;Fred&quot;
$barney = &quot;\LBARNEY&quot;;                 # $barney is now &quot;barney&quot;
$capbarney = &quot;\u\LBARNEY&quot;;            # $capbarney is now &quot;Barney&quot;
$bigbarney = &quot;BARNEY&quot;; $capbarney = &quot;\u\L$bigbarney&quot;; # same</PRE
><P
CLASS="para"
>As you can see, the case-shifting string escapes are remembered within a string until they are used, so even though the first letter of <CODE
CLASS="literal"
>BARNEY</CODE
> doesn't follow the <CODE
CLASS="literal"
>\u</CODE
>, it remains uppercase because of the <CODE
CLASS="literal"
>\u</CODE
>.</P
><P
CLASS="para"
>The term <EM
CLASS="emphasis"
>variable interpolation</EM
> is often used interchangeably with <A
CLASS="indexterm"
NAME="ch02-idx-768634-0"
></A
><EM
CLASS="emphasis"
>double-quote interpolation</EM
>, because strings that are double quoted are subject to variable interpolation. So too, are backquoted strings, as described in <A
CLASS="xref"
HREF="ch14_01.htm"
TITLE="Process Management"
>Chapter 14</A
>.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_05.htm"
TITLE="2.5 Scalar Variables"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.5 Scalar Variables"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl on Win32 Systems"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_07.htm"
TITLE="2.7 &lt;STDIN&gt; as a Scalar Value"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.7 &lt;STDIN&gt; as a Scalar Value"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.5 Scalar Variables</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.7 &lt;STDIN&gt; as a Scalar Value</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
