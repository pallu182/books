<HTML
><HEAD
>
<TITLE>[Chapter 2] 2.3 Strings</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl on Win32 Systems"><META
NAME="DC.creator"
CONTENT="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:31:50Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-324-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. Scalar Data"><LINK
REL="prev"
HREF="ch02_02.htm"
TITLE="2.2 Numbers"><LINK
REL="next"
HREF="ch02_04.htm"
TITLE="2.4 Scalar Operators"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl on Win32 Systems"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl on Win32 Systems"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/wsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_02.htm"
TITLE="2.2 Numbers"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.2 Numbers"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. Scalar Data"
>Chapter 2<BR>Scalar Data</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_04.htm"
TITLE="2.4 Scalar Operators"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.4 Scalar Operators"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch02-33395"
>2.3 Strings</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-768563-0"
></A
>Strings are sequences of characters (like <CODE
CLASS="literal"
>hello</CODE
>). Each character is an 8-bit value from the entire 256-character set (there's nothing special about the NUL character, as in some languages).</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch02-idx-768564-0"
></A
>The shortest possible string has no characters. The longest string fills all of your available memory (although you wouldn't be able to do much with that). This is in accordance with the principle of "no built-in limits" that Perl follows at every opportunity. Typical strings are printable sequences of letters, digits, and punctuation in the ASCII 32 to ASCII 126 range. However, the ability to have any character from 0 to 255 in a string means that you can create, scan, and manipulate raw <A
CLASS="indexterm"
NAME="ch02-idx-768565-0"
></A
>binary data as strings&nbsp;- a task with which most other utilities would have great difficulty. (For example, you can patch your operating system by reading it into a Perl string, making the change, and writing the result back out.)</P
><P
CLASS="para"
>Like numbers, strings have a literal representation (the way you represent the string in a Perl program). <A
CLASS="indexterm"
NAME="ch02-idx-768566-0"
></A
>Literal strings come in two different flavors: <EM
CLASS="emphasis"
>single-quoted strings</EM
> and <EM
CLASS="emphasis"
>double-quoted strings</EM
>.[<A
CLASS="footnote"
HREF="#ch02-pgfId-1278"
>5</A
>] Another form that looks rather like these two is the back-quoted string (`like this`). This form isn't so much a literal string as a way to run external commands and get back their output. This form is covered in <A
CLASS="xref"
HREF="ch14_01.htm"
TITLE="Process Management"
>Chapter 14, <CITE
CLASS="chapter"
>Process Management</CITE
></A
>.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch02-pgfId-1278"
>[5]</A
> Perl also has <A
CLASS="indexterm"
NAME="ch02-idx-1277-0"
></A
><EM
CLASS="emphasis"
>here</EM
> strings, which we'll touch on in <A
CLASS="xref"
HREF="ch18_01.htm"
TITLE="CGI Programming"
>Chapter 18, <CITE
CLASS="chapter"
>CGI Programming</CITE
></A
>.</P
></DIV
></BLOCKQUOTE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-pgfId-768729"
>2.3.1 Single-Quoted Strings</A
></H3
><P
CLASS="para"
>A <A
CLASS="indexterm"
NAME="ch02-idx-768567-0"
></A
><EM
CLASS="emphasis"
>single-quoted string</EM
> is a sequence of characters enclosed in single quotes. The single quotes are not part of the string itself; they're just there to let Perl identify the beginning and the ending of the string. Any character between the quote marks (including newline characters, if the string continues onto successive lines) is legal inside a string. There are two exceptions: to get a single quote into a single-quoted string, precede it by a <A
CLASS="indexterm"
NAME="ch02-idx-768568-0"
></A
>backslash; and, to get a backslash into a single-quoted string, precede the backslash by a backslash. In other pictures:</P
><PRE
CLASS="programlisting"
>'hello'     # five characters: h, e, l, l, o
'don\'t'    # five characters: d, o, n, single quote, t
''          # the null string (no characters)
'silly\\me' # silly, followed by backslash, followed by me
'hello\n'   # hello followed by backslash followed by n
'hello
there'      # hello, newline, there (11 characters in all)</PRE
><P
CLASS="para"
>Note that the <A
CLASS="indexterm"
NAME="ch02-idx-768569-0"
></A
><CODE
CLASS="literal"
>\n</CODE
> within a single-quoted string is not interpreted as a newline, but as the two characters backslash and <CODE
CLASS="literal"
>n</CODE
>. (Only when the backslash is followed by another backslash or a single quote does it have special meaning.)</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch02-pgfId-768730"
>2.3.2 Double-Quoted Strings</A
></H3
><P
CLASS="para"
>A <A
CLASS="indexterm"
NAME="ch02-idx-768570-0"
></A
><EM
CLASS="emphasis"
>double-quoted string</EM
> acts a lot like a C string. Once again, it's a sequence of characters, although this time enclosed in double quotes. But now the backslash takes on its full power to specify certain control characters, or even any character at all through octal and hex representations. Here are some double-quoted strings:</P
><PRE
CLASS="programlisting"
>&quot;hello world\n&quot;# hello world, and a newline
&quot;new \007&quot;     # new, space, and the bell character (octal 007)
&quot;coke\tsprite&quot; # a <A
CLASS="indexterm"
NAME="ch02-idx-768650-0"
></A
>coke, a <A
CLASS="indexterm"
NAME="ch02-idx-768651-0"
></A
>tab, and a <A
CLASS="indexterm"
NAME="ch02-idx-768652-0"
></A
>sprite
&quot;c:\\temp&quot;     # c:, backslash, and temp</PRE
><P
CLASS="para"
>The backslash can precede many different characters to mean different things (typically called a <A
CLASS="indexterm"
NAME="ch02-idx-768571-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-768571-1"
></A
><EM
CLASS="emphasis"
>backslash escape</EM
>). The complete list of double-quoted string escapes is given in <A
CLASS="xref"
HREF="ch02_03.htm#ch02-20004"
TITLE="Double-Quoted String Representations"
>Table 2.1</A
>.</P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="ch02-20004"
>Table 2.1: Double-Quoted String Representations</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Construct</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Meaning</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<P
CLASS="para"
><CODE
CLASS="literal"
>\n</CODE
></P
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Newline</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<P
CLASS="para"
><CODE
CLASS="literal"
>\r</CODE
></P
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Return</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<P
CLASS="para"
><CODE
CLASS="literal"
>\t</CODE
></P
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Tab</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
><CODE
CLASS="literal"
>\f</CODE
></PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Formfeed</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<P
CLASS="para"
><CODE
CLASS="literal"
>\b</CODE
></P
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Backspace</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<P
CLASS="para"
><CODE
CLASS="literal"
>\v</CODE
></P
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Vertical tab</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<P
CLASS="para"
><CODE
CLASS="literal"
>\a</CODE
></P
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Bell</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<P
CLASS="para"
><CODE
CLASS="literal"
>\e</CODE
></P
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Escape</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<P
CLASS="para"
><CODE
CLASS="literal"
>\007</CODE
></P
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Any octal ASCII value (here, 007 = bell)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<P
CLASS="para"
><CODE
CLASS="literal"
>\x7f</CODE
></P
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Any hex ASCII value (here, 7f = delete)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<P
CLASS="para"
><CODE
CLASS="literal"
>\cC</CODE
></P
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Any "control" character (here, control C)</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<P
CLASS="para"
><CODE
CLASS="literal"
>\\</CODE
></P
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Backslash</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<P
CLASS="para"
><CODE
CLASS="literal"
>\&quot;</CODE
></P
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Doublequote</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<P
CLASS="para"
><CODE
CLASS="literal"
>\l</CODE
></P
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Lowercase next letter</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<P
CLASS="para"
><CODE
CLASS="literal"
>\L</CODE
></P
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Lowercase all following letters until <CODE
CLASS="literal"
>\E</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<P
CLASS="para"
><CODE
CLASS="literal"
>\u</CODE
></P
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Uppercase next letter</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<P
CLASS="para"
><CODE
CLASS="literal"
>\U</CODE
></P
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Uppercase all following letters until <CODE
CLASS="literal"
>\E</CODE
></P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><PRE
CLASS="programlisting"
><CODE
CLASS="literal"
>\Q</CODE
></PRE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Backslash quote all nonalphanumerics</P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>&#13;<P
CLASS="para"
><CODE
CLASS="literal"
>\E</CODE
></P
>
</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Terminate <CODE
CLASS="literal"
>\L</CODE
> , <CODE
CLASS="literal"
>\U</CODE
> or <CODE
CLASS="literal"
>\Q</CODE
></P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Another feature of double-quoted strings is that they are <A
CLASS="indexterm"
NAME="ch02-idx-1379-0"
></A
><EM
CLASS="emphasis"
>variable interpolated</EM
>, meaning that scalar and array variables within the strings are replaced with their current values when the strings are used. We haven't formally been introduced to what a variable looks like yet (except in the stroll), so I'll get back to this later.</P
><P
CLASS="para"
>A quick note here about using DOS/Win32 <A
CLASS="indexterm"
NAME="ch02-idx-861823-0"
></A
><A
CLASS="indexterm"
NAME="ch02-idx-861823-1"
></A
>pathnames in double-quoted strings: while Perl accepts either backslashes or forward slashes in path names, backslashes need to be escaped. So, you need to write one of the following:</P
><PRE
CLASS="programlisting"
>&quot;c:\\temp&quot;  # use an escaped backslash
&quot;c:/temp&quot;   # use a  Unix-style forward slash</PRE
><P
CLASS="para"
>If you forget to escape the backslash, you'll end up with strange results:</P
><PRE
CLASS="programlisting"
>&quot;c:\temp&quot;  # WRONG - this string contains a c:, a TAB, and emp</PRE
><P
CLASS="para"
>If you're already used to using pathnames in C/C++, this notation will be second nature to you. Otherwise, beware: pathnames seem to bite each and every Perl-for-Win32 programmer from time to time.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_02.htm"
TITLE="2.2 Numbers"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.2 Numbers"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl on Win32 Systems"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch02_04.htm"
TITLE="2.4 Scalar Operators"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.4 Scalar Operators"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.2 Numbers</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.4 Scalar Operators</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
