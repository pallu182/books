<HTML
><HEAD
>
<TITLE>[Chapter 3] 3.2.154 splice</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:54:26Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_02.htm"
TITLE="3.2 Perl Functions in Alphabetical Order"><LINK
REL="prev"
HREF="ch03_153.htm"
TITLE="3.2.153 sort"><LINK
REL="next"
HREF="ch03_155.htm"
TITLE="3.2.155 split"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_153.htm"
TITLE="3.2.153 sort"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.153 sort"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. Functions"
>Chapter 3<BR>Functions</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_155.htm"
TITLE="3.2.155 split"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.155 split"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CMD-SPLICE"
>3.2.154 splice</A
></H3
><PRE
CLASS="programlisting"
>splice <CODE
CLASS="replaceable"
><I
>ARRAY</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>OFFSET</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>LENGTH</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
>
splice <CODE
CLASS="replaceable"
><I
>ARRAY</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>OFFSET</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>LENGTH</I
></CODE
>
splice <CODE
CLASS="replaceable"
><I
>ARRAY</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>OFFSET</I
></CODE
></PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-13042"
></A
><A
CLASS="indexterm"
NAME="AUTOID-13044"
></A
><A
CLASS="indexterm"
NAME="AUTOID-13047"
></A
><A
CLASS="indexterm"
NAME="AUTOID-13050"
></A
><A
CLASS="indexterm"
NAME="AUTOID-13052"
></A
>This function removes the elements designated by <CODE
CLASS="replaceable"
><I
>OFFSET</I
></CODE
> and
<CODE
CLASS="replaceable"
><I
>LENGTH</I
></CODE
>
from an array, and replaces them with the elements of <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
>, if any.
The function returns the elements removed from the array.  The array
grows or shrinks as necessary.
If <CODE
CLASS="replaceable"
><I
>LENGTH</I
></CODE
> is omitted, the function removes everything from
<CODE
CLASS="replaceable"
><I
>OFFSET</I
></CODE
>
onward.  The following equivalences hold (assuming <B
CLASS="emphasis.bold"
>$[</B
> is 0):</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Direct Method</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Splice Equivalent</TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>push(@a, $x, $y)</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>splice(@a, $#a+1, 0, $x, $y)</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>pop(@a)</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>splice(@a, -1)</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>shift(@a)</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>splice(@a, 0, 1)</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>unshift(@a, $x, $y)</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>splice(@a, 0, 0, $x, $y)</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>$a[$x] = $y</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>splice(@a, $x, 1, $y);</CODE
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The <A
CLASS="xref"
HREF="ch03_154.htm"
TITLE="splice"
><B
CLASS="xref.cmd"
>splice</B
></A
> function is also handy for
carving up the argument list passed to a subroutine.  For example, assuming list
lengths are passed before lists:</P
><PRE
CLASS="programlisting"
>sub list_eq {       # compare two list values
    my @a = splice(@_, 0, shift);
    my @b = splice(@_, 0, shift);
    return 0 unless @a == @b;       # same len?
    while (@a) {
        return 0 if pop(@a) ne pop(@b);
    }
    return 1;
}
if (list_eq($len, @foo[1..$len], scalar(@bar), @bar)) { ... }</PRE
><P
CLASS="para"
>It would probably be cleaner just to use references for this, however.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_153.htm"
TITLE="3.2.153 sort"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.153 sort"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_155.htm"
TITLE="3.2.155 split"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.155 split"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.2.153 sort</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.2.155 split</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
