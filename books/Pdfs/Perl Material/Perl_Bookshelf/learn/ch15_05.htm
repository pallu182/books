<HTML
><HEAD
>
<TITLE>[Chapter 15] 15.5 Transliteration</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:35:24Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch15_01.htm"
TITLE="15. Other Data Transformation"><LINK
REL="prev"
HREF="ch15_04.htm"
TITLE="15.4 Advanced Sorting"><LINK
REL="next"
HREF="ch15_06.htm"
TITLE="15.6 Exercises"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_04.htm"
TITLE="15.4 Advanced Sorting"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.4 Advanced Sorting"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch15_01.htm"
TITLE="15. Other Data Transformation"
>Chapter 15<BR>Other Data Transformation</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_06.htm"
TITLE="15.6 Exercises"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.6 Exercises"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch15-40004"
>15.5 Transliteration</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch15-idx-403343-0"
></A
>When you want to take a string and replace every instance of some character with some new character, or delete every instance of some character, you can already do that with carefully selected <CODE
CLASS="literal"
>s///</CODE
> commands. But suppose you had to change all of the <CODE
CLASS="literal"
>a</CODE
>'s into <CODE
CLASS="literal"
>b</CODE
>'s, and all of the <CODE
CLASS="literal"
>b</CODE
>'s into <CODE
CLASS="literal"
>a</CODE
>'s? You can't do that with two <CODE
CLASS="literal"
>s///</CODE
> commands because the second one would undo all of the changes the first one made.</P
><P
CLASS="para"
>From the UNIX shell, however, such a data transformation is simple: just use the standard <EM
CLASS="emphasis"
>tr </EM
><A
CLASS="indexterm"
NAME="ch15-idx-403344-0"
></A
>(1) command:</P
><PRE
CLASS="programlisting"
>tr ab ba &lt;indata &gt;outdata</PRE
><P
CLASS="para"
>(If you don't know anything about the <EM
CLASS="emphasis"
>tr</EM
> command, please look at the <EM
CLASS="emphasis"
>tr </EM
>(1) manpage; it's a useful tool for your bag of tricks.) Similarly, Perl provides a <EM
CLASS="emphasis"
></EM
><A
CLASS="indexterm"
NAME="ch15-idx-403345-0"
></A
><CODE
CLASS="literal"
>tr</CODE
> operator that works in much the same way:</P
><PRE
CLASS="programlisting"
>tr/ab/ba/;<A
CLASS="indexterm"
NAME="ch15-idx-403358-0"
></A
></PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>tr</CODE
> operator takes two arguments: an <EM
CLASS="emphasis"
>old string</EM
> and a <EM
CLASS="emphasis"
>new string</EM
>. These arguments work like the two arguments to <CODE
CLASS="literal"
>s///</CODE
>; in other words, there's some <A
CLASS="indexterm"
NAME="ch15-idx-403346-0"
></A
>delimiter that appears immediately after the <CODE
CLASS="literal"
>tr</CODE
> keyword that separates and terminates the two arguments (in this case, a slash, but nearly any character will do).</P
><P
CLASS="para"
>The arguments to the <CODE
CLASS="literal"
>tr</CODE
> operator are similar to the arguments to the <EM
CLASS="emphasis"
>tr  </EM
>(1) command. The <CODE
CLASS="literal"
>tr</CODE
> operator modifies the contents of the <CODE
CLASS="literal"
>$_</CODE
> variable (just like    <CODE
CLASS="literal"
>s///</CODE
>), looking for characters of the old string within the <CODE
CLASS="literal"
>$_</CODE
> variable. All such characters found are replaced with the corresponding characters in the new string. Here are some examples:</P
><PRE
CLASS="programlisting"
>$_ = &quot;fred and barney&quot;;
tr/fb/bf/;        # $_ is now &quot;bred and farney&quot;
tr/abcde/ABCDE/;  # $_ is now &quot;BrED AnD fArnEy&quot;
tr/a-z/A-Z/;      # $_ is now &quot;BRED AND FARNEY&quot;</PRE
><P
CLASS="para"
>Notice how a range of characters can be indicated by two characters separated by a dash. If you need a literal dash in either string, precede it with a backslash.</P
><P
CLASS="para"
>If the new string is shorter than the old string, the last character of the new string is repeated enough times to make the strings equal length, like so:</P
><PRE
CLASS="programlisting"
>$_ = &quot;fred and barney&quot;;
tr/a-z/x/; # $_ is now &quot;xxxx xxx xxxxxx&quot;</PRE
><P
CLASS="para"
>To prevent this behavior, append a <A
CLASS="indexterm"
NAME="ch15-idx-403348-0"
></A
><CODE
CLASS="literal"
>d</CODE
> to the end of the <CODE
CLASS="literal"
>tr///</CODE
> operator, meaning <EM
CLASS="emphasis"
>delete</EM
>. In this case, the last character is not replicated. Any character that matches in the old string without a corresponding character in the new string is simply <A
CLASS="indexterm"
NAME="ch15-idx-403349-0"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-403349-1"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-403349-2"
></A
>removed from the string.</P
><PRE
CLASS="programlisting"
>$_ = &quot;fred and barney&quot;;
tr/a-z/ABCDE/d; # $_ is now &quot;ED AD BAE&quot;</PRE
><P
CLASS="para"
>Notice how any letter after <CODE
CLASS="literal"
>e</CODE
> disappears because there's no corresponding letter in the new list, and that spaces are unaffected because they don't appear in the old list. This is similar in operation to the <CODE
CLASS="literal"
>-d</CODE
> option of the <EM
CLASS="emphasis"
>tr</EM
> command.</P
><P
CLASS="para"
>If the new list is empty and there's no <CODE
CLASS="literal"
>d</CODE
> option, the new list is the same as the old list. This may seem silly, as in why replace an <A
CLASS="indexterm"
NAME="ch15-idx-403359-0"
></A
>I for an I and a 2 for a 2, but it actually does something useful. The <A
CLASS="indexterm"
NAME="ch15-idx-403350-0"
></A
>return value of the <CODE
CLASS="literal"
>tr///</CODE
> operator is the number of characters matched by the old string, and by changing characters into themselves, you can get the <A
CLASS="indexterm"
NAME="ch15-idx-403351-0"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-403351-1"
></A
>count of that kind of character within the string.[<A
CLASS="footnote"
HREF="#ch15-pgfId-403714"
>3</A
>] For example:<PRE
CLASS="programlisting"
>$_ = &quot;fred and barney&quot;;
$count = tr/a-z//;      # $_ unchanged, but $count is 13
$count2 = tr/a-z/A-Z/;  # $_ is uppercased, and $count2 is 13</PRE
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch15-pgfId-403714"
>[3]</A
> This works only for single characters. To count strings, use the <CODE
CLASS="literal"
>/g</CODE
> flag to a pattern match:</P
><PRE
CLASS="programlisting"
>while<CODE
CLASS="literal"
> (/pattern/g)</CODE
> <CODE
CLASS="literal"
>{</CODE
>
<CODE
CLASS="literal"
>    $count++;</CODE
>
<CODE
CLASS="literal"
>}</CODE
></PRE
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>If you append a <A
CLASS="indexterm"
NAME="ch15-idx-403352-0"
></A
><CODE
CLASS="literal"
>c</CODE
> (like appending the <CODE
CLASS="literal"
>d</CODE
>), it means to complement the old string with respect to all 256 characters. Any character you list in the old string is removed from the set of all possible characters; the remaining characters, taken in sequence from lowest to highest, form the resulting old string. So, a way to count or change the nonletters in our string could be:</P
><PRE
CLASS="programlisting"
>$_ = &quot;fred and barney&quot;;
$count = tr/a-z//c; # $_ unchanged, but $count is 2
tr/a-z/_/c;         # $_ is now &quot;fred_and_barney&quot; (non-letters =&gt; _)
tr/a-z//cd;         # $_ is now &quot;fredandbarney&quot; (delete non-letters)</PRE
><P
CLASS="para"
>Notice that the options can be combined, as shown in that last example, where we first complement the set (the list of letters become the list of all nonletters) and then use the <CODE
CLASS="literal"
>d</CODE
> option to delete any character in that set.</P
><P
CLASS="para"
>The final option for <CODE
CLASS="literal"
>tr///</CODE
> is <A
CLASS="indexterm"
NAME="ch15-idx-403353-0"
></A
><CODE
CLASS="literal"
>s</CODE
>, which squeezes multiple consecutive copies of the same resulting translated letter into one copy. As an example, look at this:</P
><PRE
CLASS="programlisting"
>$_ = &quot;aaabbbcccdefghi&quot;;
tr/defghi/abcddd/s; # $_ is now &quot;aaabbbcccabcd&quot;</PRE
><P
CLASS="para"
>Note that the <CODE
CLASS="literal"
>def</CODE
> became <CODE
CLASS="literal"
>abc</CODE
>, and <CODE
CLASS="literal"
>ghi</CODE
> (which would have become <CODE
CLASS="literal"
>ddd</CODE
> without the <CODE
CLASS="literal"
>s</CODE
> option) becomes a single <CODE
CLASS="literal"
>d</CODE
>. Also note that the consecutive letters at the first part of the string are not squeezed because they didn't result from a translation. Here are some more examples:</P
><PRE
CLASS="programlisting"
>$_ = &quot;fred and barney, wilma and betty&quot;;
tr/a-z/X/s;  # $_ is now &quot;X X X, X X X&quot;
$_ = &quot;fred and barney, wilma and betty&quot;;
tr/a-z/_/cs; # $_ is now &quot;fred_and_barney_wilma_and_betty&quot;</PRE
><P
CLASS="para"
>In the first example, each word (consecutive letters) was squeezed down to a single letter <CODE
CLASS="literal"
>X</CODE
>. In the second example, all chunks of consecutive nonletters became a single underscore.</P
><P
CLASS="para"
>Like <CODE
CLASS="literal"
>s///</CODE
>, the <CODE
CLASS="literal"
>tr</CODE
> operator can be targeted at another string besides <CODE
CLASS="literal"
>$_</CODE
> using the <A
CLASS="indexterm"
NAME="ch15-idx-404932-0"
></A
><CODE
CLASS="literal"
>=~</CODE
> operator:</P
><PRE
CLASS="programlisting"
>$names = &quot;fred and barney&quot;;
$names =~ tr/aeiou/X/; # $names now &quot;frXd Xnd bXrnXy&quot;</PRE
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_04.htm"
TITLE="15.4 Advanced Sorting"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.4 Advanced Sorting"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_06.htm"
TITLE="15.6 Exercises"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.6 Exercises"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>15.4 Advanced Sorting</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>15.6 Exercises</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
