<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.2.35 Getopt::Long&nbsp;- Extended Processing of Command-Line Options</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T02:02:36Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_02.htm"
TITLE="7.2 Library Modules"><LINK
REL="prev"
HREF="ch07_034.htm"
TITLE="7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library"><LINK
REL="next"
HREF="ch07_036.htm"
TITLE="7.2.36 Getopt::Std&nbsp;- Process Single-Character Options with Option Clustering"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_034.htm"
TITLE="7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. The Standard Perl Library"
>Chapter 7<BR>The Standard Perl Library</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_036.htm"
TITLE="7.2.36 Getopt::Std&nbsp;- Process Single-Character Options with Option Clustering"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.36 Getopt::Std&nbsp;- Process Single-Character Options with Option Clustering"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="AUTOID-22751"
>7.2.35 Getopt::Long&nbsp;- Extended Processing of Command-Line Options</A
></H3
><PRE
CLASS="programlisting"
>use Getopt::Long;
$result = GetOptions(<CODE
CLASS="replaceable"
><I
>option-descriptions</I
></CODE
>);</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH07.LONG1"
></A
><A
CLASS="indexterm"
NAME="CH07.LONG2"
></A
><A
CLASS="indexterm"
NAME="CH07.LONG3"
></A
><A
CLASS="indexterm"
NAME="CH07.LONG4"
></A
>The Getopt::Long module implements an extended function called
<CODE
CLASS="literal"
>GetOptions()</CODE
>.  This function retrieves and processes the
command-line options with which your Perl program was invoked, based on the
description of valid options that you provide.</P
><P
CLASS="para"
><CODE
CLASS="literal"
>GetOptions()</CODE
> adheres to the POSIX syntax for command-line
options, with GNU extensions.  In general, this means that options have long
names instead of single letters, and are introduced with a double hyphen
<CODE
CLASS="literal"
>--</CODE
>.  (A single hyphen can also be used,
but implies restrictions on functionality.  See later in the chapter.)  There is
no bundling of command-line options, as was the case with the more traditional
single-letter approach.  For example, the UNIX
<EM
CLASS="emphasis"
>ps</EM
>(1) command can be given the command-line
argument:</P
><PRE
CLASS="programlisting"
>-vax</PRE
><P
CLASS="para"
>which means the combination of <CODE
CLASS="literal"
>-v</CODE
>, <CODE
CLASS="literal"
>-a</CODE
> and <CODE
CLASS="literal"
>-x</CODE
>.
With the Getopt::Long syntax, <CODE
CLASS="literal"
>-vax</CODE
> would be a single option.</P
><P
CLASS="para"
>Command-line options can be used to set values.  These values can be
specified in one of two ways:</P
><PRE
CLASS="programlisting"
>--size 24
--size=24</PRE
><P
CLASS="para"
><CODE
CLASS="literal"
>GetOptions()</CODE
> is called with a list of option descriptions, each of which
consists of two elements:  the option specifier and the option linkage.
The option specifier defines the name of the option and, optionally,
the value it can take.  The option linkage is usually a reference to a
variable that will be set when the option is used.  For example, the
following call to <CODE
CLASS="literal"
>GetOptions()</CODE
>:</P
><PRE
CLASS="programlisting"
>&amp;GetOptions(&quot;size=i&quot; =&gt; \$offset);</PRE
><P
CLASS="para"
>will accept a command-line option &quot;<CODE
CLASS="literal"
>size</CODE
>&quot; that must have an
integer value.  With a command line of <CODE
CLASS="literal"
>--size
24</CODE
> this will cause the variable <CODE
CLASS="literal"
>$offset</CODE
> to be
assigned the value 24.</P
><P
CLASS="para"
>Alternatively, the first argument to GetOptions may be a reference to
a hash describing the linkage for the options.  The following call is
equivalent to the example above:</P
><PRE
CLASS="programlisting"
>%optctl = (size =&gt; \$offset);
&amp;GetOptions(\%optctl, &quot;size=i&quot;);</PRE
><P
CLASS="para"
>Linkage may be specified using either of the above methods, or both.
The linkage specified in the argument list takes precedence over the
linkage specified in the hash.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-22789"
></A
>The command-line options are implicitly taken from array <CODE
CLASS="literal"
>@ARGV</CODE
>.  Upon completion
of <CODE
CLASS="literal"
>GetOptions()</CODE
>, <CODE
CLASS="literal"
>@ARGV</CODE
> will contain only the command-line
arguments that were not options.  (But see below for a way to process
non-option arguments.)  Each option specifier handed to
<CODE
CLASS="literal"
>GetOptions()</CODE
> designates the name of an option, possibly
followed by an argument specifier.  Values for argument specifiers are:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>&lt;none&gt;</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Option does not take an argument.  If the user invokes the option,
the option variable will be set to 1.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>!   </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-22806"
></A
>Option does not take an argument and may be negated, that is, prefixed by
&quot;<CODE
CLASS="literal"
>no</CODE
>&quot;.  For example, <CODE
CLASS="literal"
>foo!</CODE
> will allow <CODE
CLASS="literal"
>--foo</CODE
> (with value 1
being assigned to the option variable) and
<CODE
CLASS="literal"
>-nofoo</CODE
>
(with value 0).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>=s   </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Option takes a mandatory string argument.
This string will be assigned to the option variable.
Even if the string argument starts with <CODE
CLASS="literal"
>-</CODE
> or <CODE
CLASS="literal"
>--</CODE
>, it
will be assigned to the option variable rather than taken as a separate
option.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>:s   </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Option takes an optional string argument.
This string will be assigned to the option variable.  If the string is
omitted from the command invocation, <CODE
CLASS="literal"
>&quot;&quot;</CODE
> (an empty string) will be
assigned to the option variable.
If the string argument starts with <CODE
CLASS="literal"
>-</CODE
> or <CODE
CLASS="literal"
>--</CODE
>, it
will be taken as another option rather than assigned to the option variable.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>=i   </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Option takes a mandatory integer argument.
This value will be assigned to the option variable.
Note that the value may start with <CODE
CLASS="literal"
>-</CODE
> to indicate a negative
value.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>:i   </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Option takes an optional integer argument.
This integer value will be assigned to the option variable.
If the optional argument is omitted, the value 0 will be assigned to the
option variable.  The value may start with <CODE
CLASS="literal"
>-</CODE
> to indicate a negative
value.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>=f   </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Option takes a mandatory floating-point argument.
This value will be assigned to the option variable.
Note that the value may start with <CODE
CLASS="literal"
>-</CODE
> to indicate a negative
value.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>:f   </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Option takes an optional floating-point argument.
This value will be assigned to the option variable.
If the optional argument is omitted, the value 0 will be assigned to the
option variable.
The value may start with <CODE
CLASS="literal"
>-</CODE
> to indicate a negative value.</P
></DD
></DL
><P
CLASS="para"
>A lone hyphen <CODE
CLASS="literal"
>-</CODE
> is considered an option; the corresponding option
name is the empty string.</P
><P
CLASS="para"
>A lone double hyphen <CODE
CLASS="literal"
>--</CODE
> terminates the
processing of options and arguments.  Any options following the double hyphen
will remain in <CODE
CLASS="literal"
>@ARGV</CODE
> when <CODE
CLASS="literal"
>GetOptions()</CODE
>
returns.</P
><P
CLASS="para"
>If an argument specifier concludes with <CODE
CLASS="literal"
>@</CODE
> (as in <CODE
CLASS="literal"
>=s@</CODE
>),
then the option is treated as an array.  That is, multiple invocations of
the same option, each with a particular value, will result in the list of
values being assigned to the option variable, which is an array.  See the
following section for an example.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.41"
>7.2.35.1 Linkage specification</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-22864"
></A
>The linkage specifier is optional.  If no linkage is explicitly
specified but a hash reference is passed, <CODE
CLASS="literal"
>GetOptions()</CODE
>
will place the value in the hash.  For example:</P
><PRE
CLASS="programlisting"
>%optctl = ();
&amp;GetOptions (\%optctl, &quot;size=i&quot;);</PRE
><P
CLASS="para"
>will perform the equivalent of the assignment:</P
><PRE
CLASS="programlisting"
>$optctl{&quot;size&quot;} = 24;</PRE
><P
CLASS="para"
>For array options, a reference to an anonymous array is generated.  For example:</P
><PRE
CLASS="programlisting"
>%optctl = ();
&amp;GetOptions (\%optctl, &quot;sizes=i@&quot;);</PRE
><P
CLASS="para"
>with command-line arguments:</P
><PRE
CLASS="programlisting"
>-sizes 24 -sizes 48</PRE
><P
CLASS="para"
>will perform the equivalent of the assignment:</P
><PRE
CLASS="programlisting"
>$optctl{&quot;sizes&quot;} = [24, 48];</PRE
><P
CLASS="para"
>If no linkage is explicitly specified and no hash reference is passed,
<CODE
CLASS="literal"
>GetOptions()</CODE
> will put the value in a global variable named
after the option, prefixed by <CODE
CLASS="literal"
>opt_</CODE
>.  To yield a usable Perl
variable, characters that are not part of the syntax for variables are
translated to underscores.  For example,
<CODE
CLASS="literal"
>--fpp-struct-return</CODE
> will set the variable
<CODE
CLASS="literal"
>$opt_fpp_struct_return</CODE
>.  (Note that this variable resides in
the namespace of the calling program, not necessarily main.)  For example:</P
><PRE
CLASS="programlisting"
>&amp;GetOptions (&quot;size=i&quot;, &quot;sizes=i@&quot;);</PRE
><P
CLASS="para"
>with command line:</P
><PRE
CLASS="programlisting"
>-size 10 -sizes 24 -sizes 48</PRE
><P
CLASS="para"
>will perform the
equivalent of the assignments:</P
><PRE
CLASS="programlisting"
>$opt_size = 10;
@opt_sizes = (24, 48);</PRE
><P
CLASS="para"
>A lone hyphen (<CODE
CLASS="literal"
>-</CODE
>) is considered an option; the corresponding
identifier is <CODE
CLASS="literal"
>$opt_</CODE
> .</P
><P
CLASS="para"
>The linkage specifier can be a reference to a scalar, a reference to
an array, or a reference to a subroutine:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>If a scalar reference is supplied, the new value is stored in the referenced
variable.  If the option occurs more than once, the previous value is
overwritten.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If an array reference is supplied, the new value is appended (pushed) to the
referenced array.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>If a code reference is supplied, the referenced subroutine is called with
two arguments: the option name and the option value.
The option name is always the true name, not an abbreviation or alias.</P
></LI
></UL
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.42"
>7.2.35.2 Aliases and abbreviations</A
></H4
><P
CLASS="para"
>The option specifier may actually include a &quot;<CODE
CLASS="literal"
>|</CODE
>&quot;-separated list of option names:<A
CLASS="indexterm"
NAME="AUTOID-22902"
></A
><A
CLASS="indexterm"
NAME="AUTOID-22905"
></A
><A
CLASS="indexterm"
NAME="AUTOID-22908"
></A
></P
><PRE
CLASS="programlisting"
>foo|bar|blech=s</PRE
><P
CLASS="para"
>In this example, <CODE
CLASS="literal"
>foo</CODE
> is the true name of the option.  If no
linkage is specified, options <CODE
CLASS="literal"
>-foo</CODE
>, <CODE
CLASS="literal"
>-bar</CODE
> and
<CODE
CLASS="literal"
>-blech</CODE
> all will set <CODE
CLASS="literal"
>$opt_foo</CODE
>.</P
><P
CLASS="para"
>Options may be invoked as unique abbreviations, depending on
configuration variable <CODE
CLASS="literal"
>$Getopt::Long::autoabbrev</CODE
>.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.43"
>7.2.35.3 Non-option callback routine</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-22923"
></A
>A special option specifier <CODE
CLASS="literal"
>&lt;&gt;</CODE
> can be used to designate a subroutine
to handle non-option arguments.  For example:</P
><PRE
CLASS="programlisting"
>&amp;GetOptions(...&quot;&lt;&gt;&quot;, \&amp;mysub...);</PRE
><P
CLASS="para"
>In this case <CODE
CLASS="literal"
>GetOptions()</CODE
> will immediately call
<CODE
CLASS="literal"
>&amp;mysub</CODE
> for every non-option it encounters in the options
list.  This subroutine gets the name of the non-option passed.  This feature
requires <CODE
CLASS="literal"
>$Getopt::Long::order</CODE
> to have the value of the
predefined and exported variable, <CODE
CLASS="literal"
>$PERMUTE</CODE
>.  See also the
examples.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.44"
>7.2.35.4 Option starters</A
></H4
><P
CLASS="para"
>On the command line, options can start with <CODE
CLASS="literal"
>-</CODE
> (traditional),
<CODE
CLASS="literal"
>--</CODE
> (POSIX), and <CODE
CLASS="literal"
>+</CODE
> (GNU,
now being phased out).  The latter is not allowed if the environment variable
<CODE
CLASS="literal"
>POSIXLY_CORRECT</CODE
> has been defined.</P
><P
CLASS="para"
>Options that start with <CODE
CLASS="literal"
>--</CODE
> may have an
argument appended, following an equals sign (<CODE
CLASS="literal"
>=</CODE
>). For
example: <CODE
CLASS="literal"
>--foo=bar</CODE
>.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.45"
>7.2.35.5 Return value</A
></H4
><P
CLASS="para"
>A return status of <CODE
CLASS="literal"
>0</CODE
> (false) indicates that the function detected
one or more errors.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.46"
>7.2.35.6 Configuration variables</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-22951"
></A
><A
CLASS="indexterm"
NAME="AUTOID-22954"
></A
>The following variables can be set to change the default behavior of
<CODE
CLASS="literal"
>GetOptions()</CODE
>:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>$Getopt::Long::autoabbrev</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>If true, then allow option names to be invoked with unique abbreviations.
Default is <CODE
CLASS="literal"
>1</CODE
> unless environment variable
<CODE
CLASS="literal"
>POSIXLY_CORRECT</CODE
> has been set.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>$Getopt::Long::getopt_compat</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>If true, then allow &quot;<CODE
CLASS="literal"
>+</CODE
>&quot; to start options.
Default is 1 unless environment variable
<CODE
CLASS="literal"
>POSIXLY_CORRECT</CODE
> has been set.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>$Getopt::Long::order</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>If set to <CODE
CLASS="literal"
>$PERMUTE</CODE
>, then non-options are allowed to be mixed with
options on the command line.  If set to <CODE
CLASS="literal"
>$REQUIRE_ORDER</CODE
>, then
mixing is not allowed.  Default is <CODE
CLASS="literal"
>$REQUIRE_ORDER</CODE
> if environment
variable <CODE
CLASS="literal"
>POSIXLY_CORRECT</CODE
> has been set, <CODE
CLASS="literal"
>$PERMUTE</CODE
> otherwise.
Both <CODE
CLASS="literal"
>$PERMUTE</CODE
> and <CODE
CLASS="literal"
>$REQUIRE_ORDER</CODE
> are defined in the library
module and automatically exported.

<CODE
CLASS="literal"
>$PERMUTE</CODE
> means that:</P
><PRE
CLASS="programlisting"
>-foo arg1 -bar arg2 arg3</PRE
><P
CLASS="para"
>is equivalent to:</P
><PRE
CLASS="programlisting"
>-foo -bar arg1 arg2 arg3</PRE
><P
CLASS="para"
>If a non-option callback routine is specified, <CODE
CLASS="literal"
>@ARGV</CODE
> will always be
empty upon successful return of <CODE
CLASS="literal"
>GetOptions()</CODE
> since all options have been
processed, except when <CODE
CLASS="literal"
>--</CODE
> is used.  So, for example:</P
><PRE
CLASS="programlisting"
>-foo arg1 -bar arg2 -- arg3</PRE
><P
CLASS="para"
>will call the callback routine for <CODE
CLASS="literal"
>arg1</CODE
> and
<CODE
CLASS="literal"
>arg2</CODE
>, and then terminate, leaving <CODE
CLASS="literal"
>arg3</CODE
> in
<CODE
CLASS="literal"
>@ARGV</CODE
>.  If <CODE
CLASS="literal"
>$Getopt::Long::order</CODE
> is
<CODE
CLASS="literal"
>$REQUIRE_ORDER</CODE
>, option processing terminates when the first
non-option is encountered.</P
><PRE
CLASS="programlisting"
>-foo arg1 -bar arg2 arg3</PRE
><P
CLASS="para"
>is equivalent to:</P
><PRE
CLASS="programlisting"
>-foo -- arg1 -bar arg2 arg3</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>$Getopt::Long::ignorecase</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>If true, then ignore case when matching options.  Default is <CODE
CLASS="literal"
>1</CODE
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>$Getopt::Long::VERSION</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The version number of this Getopt::Long implementation is in the format
<CODE
CLASS="literal"
>major.minor</CODE
>. This can be used to have Exporter check the
version. Example:</P
><PRE
CLASS="programlisting"
>use Getopt::Long 2.00;</PRE
><P
CLASS="para"
><CODE
CLASS="literal"
>$Getopt::Long::major_version</CODE
> and
<CODE
CLASS="literal"
>$Getopt::Long::minor_version</CODE
> may be inspected for the
individual components.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>$Getopt::Long::error</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Internal error flag.  May be incremented from a callback routine to
cause options parsing to fail.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>$Getopt::Long::debug</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Enable copious debugging output.  Default is <CODE
CLASS="literal"
>0</CODE
>.</P
></DD
></DL
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.47"
>7.2.35.7 Examples</A
></H4
><P
CLASS="para"
>If the option specifier is <CODE
CLASS="literal"
>one:i</CODE
> (which takes an optional integer
argument), then the following situations are handled:</P
><PRE
CLASS="programlisting"
>-one -two            # $opt_one = &quot;&quot;, -two is next option
-one -2              # $opt_one = -2</PRE
><P
CLASS="para"
>Also, assume specifiers <CODE
CLASS="literal"
>foo=s</CODE
> and <CODE
CLASS="literal"
>bar:s</CODE
>:</P
><PRE
CLASS="programlisting"
>-bar -xxx            # $opt_bar = &quot;&quot;, -xxx is next option
-foo -bar            # $opt_foo = '-bar'
-foo --              # $opt_foo = '--'</PRE
><P
CLASS="para"
>In GNU or POSIX format, option names and values can be combined:</P
><PRE
CLASS="programlisting"
>+foo=blech           # $opt_foo = 'blech'
--bar=               # $opt_bar = &quot;&quot;
--bar=--             # $opt_bar = '--'</PRE
><P
CLASS="para"
>Example using variable references:</P
><PRE
CLASS="programlisting"
>$ret = &amp;GetOptions ('foo=s', \$foo, 'bar=i', 'ar=s', \@ar);</PRE
><P
CLASS="para"
>With command-line options <CODE
CLASS="literal"
>-foo blech -bar 24 -ar xx -ar yy</CODE
>
this will result in:</P
><PRE
CLASS="programlisting"
>$opt_foo = 'blech'
$opt_bar = 24
@ar = ('xx', 'yy')</PRE
><P
CLASS="para"
>Example of using the <CODE
CLASS="literal"
>&lt;&gt;</CODE
> option specifier:</P
><PRE
CLASS="programlisting"
>@ARGV = qw(-foo 1 bar -foo 2 blech);
&amp;GetOptions(&quot;foo=i&quot;, \$myfoo, &quot;&lt;&gt;&quot;, \&amp;mysub);</PRE
><P
CLASS="para"
>Results:</P
><PRE
CLASS="programlisting"
>&amp;mysub(&quot;bar&quot;) <EM
CLASS="emphasis"
>will be called (with</EM
> $myfoo <EM
CLASS="emphasis"
>being</EM
> 1<EM
CLASS="emphasis"
>)</EM
>
&amp;mysub(&quot;blech&quot;) <EM
CLASS="emphasis"
>will be called (with</EM
> $myfoo <EM
CLASS="emphasis"
>being</EM
> 2<EM
CLASS="emphasis"
>)</EM
></PRE
><P
CLASS="para"
>Compare this with:</P
><PRE
CLASS="programlisting"
>@ARGV = qw(-foo 1 bar -foo 2 blech);
&amp;GetOptions(&quot;foo=i&quot;, \$myfoo);</PRE
><P
CLASS="para"
>This will leave the non-options in <CODE
CLASS="literal"
>@ARGV:</CODE
></P
><PRE
CLASS="programlisting"
>$myfoo <EM
CLASS="emphasis"
>becomes</EM
> 2
@ARGV  <EM
CLASS="emphasis"
>becomes</EM
> qw(bar blech)</PRE
><P
CLASS="para"
>If you're using the <CODE
CLASS="literal"
>use strict</CODE
> pragma, which requires you to employ
only lexical variables or else globals that are fully declared, you 
will have to use the double-colon package delimiter or else the 
<CODE
CLASS="literal"
>use vars</CODE
> pragma.  For example:</P
><PRE
CLASS="programlisting"
>use strict;
use vars qw($opt_rows $opt_cols);
use Getopt::Long;</PRE
><A
CLASS="indexterm"
NAME="AUTOID-23070"
></A
><A
CLASS="indexterm"
NAME="AUTOID-23071"
></A
><A
CLASS="indexterm"
NAME="AUTOID-23072"
></A
><A
CLASS="indexterm"
NAME="AUTOID-23073"
></A
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_034.htm"
TITLE="7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_036.htm"
TITLE="7.2.36 Getopt::Std&nbsp;- Process Single-Character Options with Option Clustering"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.36 Getopt::Std&nbsp;- Process Single-Character Options with Option Clustering"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.2.36 Getopt::Std&nbsp;- Process Single-Character Options with Option Clustering</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
