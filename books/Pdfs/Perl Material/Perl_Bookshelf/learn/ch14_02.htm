<HTML
><HEAD
>
<TITLE>[Chapter 14] 14.2 Using Backquotes</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:35:01Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch14_01.htm"
TITLE="14. Process Management"><LINK
REL="prev"
HREF="ch14_01.htm"
TITLE="14.1 Using system and exec"><LINK
REL="next"
HREF="ch14_03.htm"
TITLE="14.3 Using Processes as Filehandles"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_01.htm"
TITLE="14.1 Using system and exec"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.1 Using system and exec"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch14_01.htm"
TITLE="14. Process Management"
>Chapter 14<BR>Process Management</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_03.htm"
TITLE="14.3 Using Processes as Filehandles"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.3 Using Processes as Filehandles"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch14-23211"
>14.2 Using Backquotes</A
></H2
><P
CLASS="para"
>Another way to launch a process is to put a <EM
CLASS="emphasis"
>/bin/sh</EM
> shell command line between <A
CLASS="indexterm"
NAME="ch14-idx-744329-0"
></A
>backquotes. Like the shell, this fires off a command and waits for its completion, capturing the standard output as it goes along:</P
><PRE
CLASS="programlisting"
>$now = &quot;the time is now &quot;.`date`; # gets text and date output</PRE
><P
CLASS="para"
>The value of <CODE
CLASS="literal"
>$now</CODE
> winds up with the text <CODE
CLASS="literal"
>the</CODE
> <CODE
CLASS="literal"
>time</CODE
> <CODE
CLASS="literal"
>is</CODE
> <CODE
CLASS="literal"
>now</CODE
> along with the result of the <EM
CLASS="emphasis"
>date  </EM
>(1) command (including the trailing newline), so it looks something like this:</P
><PRE
CLASS="programlisting"
>the time is now Fri Aug 13 23:59:59 PDT 1993</PRE
><P
CLASS="para"
>If the backquoted command is used in a list context rather than a scalar context, you get a list of strings, each one being a line (terminated in a newline[<A
CLASS="footnote"
HREF="#ch14-pgfId-744396"
>2</A
>]) from the command's output. For the <EM
CLASS="emphasis"
>date</EM
> example, we'd have just one element because it generated only one line of text. The output of <A
CLASS="indexterm"
NAME="ch14-idx-746385-0"
></A
><EM
CLASS="emphasis"
>who</EM
> looks like this:<PRE
CLASS="programlisting"
>merlyn     tty42    Dec  7 19:41
fred       tty1A    Aug 31 07:02
barney     tty1F    Sep  1 09:22</PRE
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch14-pgfId-744396"
>[2]</A
> Or whatever you've set <A
CLASS="indexterm"
NAME="ch14-idx-746350-0"
></A
><CODE
CLASS="literal"
>$/</CODE
> to.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Here's how to grab this output in a list context:</P
><PRE
CLASS="programlisting"
>foreach $_ (`who`) { # once per text line from who
    ($who,$where,$when) = /(\S+)\s+(\S+)\s+(.*)/;
    print &quot;$who on $where at $when\n&quot;;
}</PRE
><P
CLASS="para"
>Each pass through the loop works on a separate line of the output of <EM
CLASS="emphasis"
>who</EM
>, because the backquoted command is evaluated within a list context.</P
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch14-idx-744332-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-744332-1"
></A
>standard input and <A
CLASS="indexterm"
NAME="ch14-idx-744333-0"
></A
>standard error of the command within backquotes are inherited from the Perl process.[<A
CLASS="footnote"
HREF="#ch14-pgfId-744779"
>3</A
>] This means that you normally get just the standard output of the commands within the backquotes as the value of the backquoted-string. One common thing to do is to merge the <A
CLASS="indexterm"
NAME="ch14-idx-744334-0"
></A
>standard error into the standard output so that the backquoted command picks up both, using the <CODE
CLASS="literal"
>2&gt;&amp;1</CODE
> construct of the shell:</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch14-pgfId-744779"
>[3]</A
> Actually, it's a bit more complicated that this. See the question in Section 8 of the Perl FAQ on "How can I capture <CODE
CLASS="literal"
>STDERR</CODE
> from an external command?" If you're running Perl version 5.004, the FAQ is distributed as a normal manpage&nbsp;- <EM
CLASS="emphasis"
>perlfaq8 </EM
>(1) in this case.</P
></DIV
></BLOCKQUOTE
><PRE
CLASS="programlisting"
>die &quot;rm spoke!&quot; if `rm fred 2&gt;&amp;1`;</PRE
><P
CLASS="para"
>Here, the Perl process is terminated if <EM
CLASS="emphasis"
>rm</EM
> says anything, either to standard output or standard error, because the result will no longer be an empty string (an empty string would be false).</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_01.htm"
TITLE="14.1 Using system and exec"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.1 Using system and exec"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_03.htm"
TITLE="14.3 Using Processes as Filehandles"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.3 Using Processes as Filehandles"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>14.1 Using system and exec</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>14.3 Using Processes as Filehandles</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
