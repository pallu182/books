<HTML
><HEAD
>
<TITLE>[Chapter 9] Miscellaneous Control Structures</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:33:42Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Learning Perl"><LINK
REL="prev"
HREF="ch08_08.htm"
TITLE="8.8 Exercises"><LINK
REL="next"
HREF="ch09_02.htm"
TITLE="9.2 The next Statement"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_08.htm"
TITLE="8.8 Exercises"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.8 Exercises"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 9</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_02.htm"
TITLE="9.2 The next Statement"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.2 The next Statement"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="ch09-27678"
>9. Miscellaneous Control Structures</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch09-12775"
TITLE="9.1 The last Statement"
>The last Statement</A
><BR><A
CLASS="sect1"
HREF="ch09_02.htm"
TITLE="9.2 The next Statement"
>The next Statement</A
><BR><A
CLASS="sect1"
HREF="ch09_03.htm"
TITLE="9.3 The redo Statement"
>The redo Statement</A
><BR><A
CLASS="sect1"
HREF="ch09_04.htm"
TITLE="9.4 Labeled Blocks"
>Labeled Blocks</A
><BR><A
CLASS="sect1"
HREF="ch09_05.htm"
TITLE="9.5 Expression Modifiers"
>Expression Modifiers</A
><BR><A
CLASS="sect1"
HREF="ch09_06.htm"
TITLE="9.6 &amp;&amp; and || as Control Structures"
>&amp;&amp; and || as Control Structures</A
><BR><A
CLASS="sect1"
HREF="ch09_07.htm"
TITLE="9.7 Exercises"
>Exercises</A
></P
><P
></P
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch09-12775"
>9.1 The last Statement</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-462-0"
></A
>In some of the previous exercises you may have thought, "If I just had a C <CODE
CLASS="literal"
>break</CODE
><A
CLASS="indexterm"
NAME="ch09-idx-464-0"
></A
> statement here, I'd be done." Even if you didn't think that, let me tell you about Perl's equivalent for getting out of a <A
CLASS="indexterm"
NAME="ch09-idx-465-0"
></A
>loop early: the <CODE
CLASS="literal"
>last</CODE
> statement.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>last</CODE
> statement breaks out of the innermost enclosing loop block,[<A
CLASS="footnote"
HREF="#ch09-pgfId-475"
>1</A
>] causing execution to continue with the statement immediately following the block. For example:<PRE
CLASS="programlisting"
><A
CLASS="indexterm"
NAME="ch09-idx-903233-0"
></A
>while (<CODE
CLASS="replaceable"
><I
>something</I
></CODE
>) {
    <CODE
CLASS="replaceable"
><I
>something</I
></CODE
>;
    <CODE
CLASS="replaceable"
><I
>something</I
></CODE
>;
    <CODE
CLASS="replaceable"
><I
>something</I
></CODE
>;
    if (<CODE
CLASS="replaceable"
><I
>somecondition</I
></CODE
>) {
        <CODE
CLASS="replaceable"
><I
>somethingorother</I
></CODE
>;
        <CODE
CLASS="replaceable"
><I
>somethingorother</I
></CODE
>;
        last; # break out of the while loop
    }
    <CODE
CLASS="replaceable"
><I
>morethings</I
></CODE
>;
    <CODE
CLASS="replaceable"
><I
>morethings</I
></CODE
>;
}
# last comes here</PRE
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch09-pgfId-475"
>[1]</A
> Note that the <CODE
CLASS="literal"
>do</CODE
> <CODE
CLASS="literal"
>{}</CODE
> <CODE
CLASS="literal"
>while/until</CODE
> construct does not count as a loop for purposes of <CODE
CLASS="literal"
>next</CODE
>, <CODE
CLASS="literal"
>last</CODE
>, and <CODE
CLASS="literal"
>redo</CODE
>.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>If <CODE
CLASS="replaceable"
><I
>somecondition</I
></CODE
> is true, the <CODE
CLASS="replaceable"
><I
>somethingorother</I
></CODE
>'s are executed, and then <CODE
CLASS="literal"
>last</CODE
> forces the <CODE
CLASS="literal"
>while</CODE
> loop to terminate.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>last</CODE
> statement counts only <A
CLASS="indexterm"
NAME="ch09-idx-903231-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-903231-1"
></A
>looping blocks, not other blocks that are needed to make up some syntactic construct. This means that the blocks for the <CODE
CLASS="literal"
>if</CODE
> and <CODE
CLASS="literal"
>else</CODE
> statements, as well as the ones for <CODE
CLASS="literal"
>do</CODE
> <CODE
CLASS="literal"
>{}</CODE
> <CODE
CLASS="literal"
>while/until</CODE
>, do not count; only the blocks that make up the <CODE
CLASS="literal"
>for</CODE
>, <CODE
CLASS="literal"
>foreach</CODE
>, <CODE
CLASS="literal"
>while</CODE
>, <CODE
CLASS="literal"
>until</CODE
>, and "naked" blocks count. (A <A
CLASS="indexterm"
NAME="ch09-idx-903254-0"
></A
><A
CLASS="indexterm"
NAME="ch09-idx-903254-1"
></A
>naked block is a block that is not part of a larger construct such as a loop, subroutine, or an <CODE
CLASS="literal"
>if</CODE
>/<CODE
CLASS="literal"
>then</CODE
>/<CODE
CLASS="literal"
>else</CODE
> statement.)</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch09-idx-903234-0"
></A
>Suppose we wanted to see whether a mail message that had been saved in a file was from merlyn. Such a message might look like this:</P
><PRE
CLASS="programlisting"
>From: merlyn@stonehenge.com (Randal L. Schwartz)
To: stevet@ora.com
Date: 01-DEC-94 08:16:24 PM PDT -0700
Subject: A sample mail message

Here's the body of the mail message. And
here is some more.</PRE
><P
CLASS="para"
>We'd have to look through the message for a line that begins with <CODE
CLASS="literal"
>From:</CODE
> and then notice whether the line also contains the login name, <CODE
CLASS="literal"
>merlyn</CODE
>.</P
><P
CLASS="para"
>We could do it like this:</P
><PRE
CLASS="programlisting"
>while (<A
CLASS="indexterm"
NAME="ch09-idx-903256-0"
></A
>&lt;STDIN&gt;) { # read the input lines
    if (<A
CLASS="indexterm"
NAME="ch09-idx-903255-0"
></A
>/^From: /) { # does it begin with From:? If yes...
        if (/merlyn/) { # it's from merlyn!
            print &quot;Email from Randal! It's about time!\n&quot;;
        }
        last; # no need to keep looking for From:, so exit
    } # end &quot;if from:&quot;
    if (/^$/) { # blank line?
        last; # if so, don't check any more lines
    }
} # end while</PRE
><P
CLASS="para"
>Once the line starting with <CODE
CLASS="literal"
>From:</CODE
> is found, we exit the main loop because we want to see only the first <CODE
CLASS="literal"
>From:</CODE
> line. Also because a mail message header ends at the first blank line, we can exit the main loop there as well.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_08.htm"
TITLE="8.8 Exercises"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.8 Exercises"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch09_02.htm"
TITLE="9.2 The next Statement"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 9.2 The next Statement"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.8 Exercises</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>9.2 The next Statement</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
