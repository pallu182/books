<HTML
><HEAD
>
<TITLE>[Chapter 12] 12.2 Globbing</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl on Win32 Systems"><META
NAME="DC.creator"
CONTENT="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:35:14Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-324-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch12_01.htm"
TITLE="12. Directory Access"><LINK
REL="prev"
HREF="ch12_01.htm"
TITLE="12.1 Moving Around the Directory Tree"><LINK
REL="next"
HREF="ch12_03.htm"
TITLE="12.3 Directory Handles"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl on Win32 Systems"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl on Win32 Systems"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/wsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_01.htm"
TITLE="12.1 Moving Around the Directory Tree"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.1 Moving Around the Directory Tree"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch12_01.htm"
TITLE="12. Directory Access"
>Chapter 12<BR>Directory Access</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_03.htm"
TITLE="12.3 Directory Handles"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.3 Directory Handles"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch12-34003"
>12.2 Globbing</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch12-idx-871079-0"
></A
>The command prompt usually takes a solitary asterisk (<CODE
CLASS="literal"
>*</CODE
>) command-line argument and turns it into a list of all of the filenames in the current directory. So, when you say <EM
CLASS="emphasis"
>del *</EM
>, you'll remove all of the files from the current directory. (Don't try this unless you like restoring the current directory from your backup device.) Similarly, <EM
CLASS="emphasis"
>*.c</EM
> as a command-line argument turns into a list of all filenames in the current directory that end in <EM
CLASS="emphasis"
>.c</EM
>, and <EM
CLASS="emphasis"
>c:\temp\backup*</EM
> is a list of all filenames in the directory <EM
CLASS="emphasis"
>c:\temp</EM
> that begin with <EM
CLASS="emphasis"
>backup</EM
>. (If this information is new to you, you probably want to read some more about using the command line somewhere else before proceeding.)</P
><P
CLASS="para"
>The expansion of arguments like <EM
CLASS="emphasis"
>*</EM
> or <EM
CLASS="emphasis"
>*.c</EM
> into the list of matching filenames is called <EM
CLASS="emphasis"
>globbing</EM
>. Perl supports globbing through a very simple mechanism&nbsp;- just put the globbing pattern between <A
CLASS="indexterm"
NAME="ch12-idx-871080-0"
></A
>angle brackets or use the more mnemonically named <CODE
CLASS="literal"
>glob</CODE
> function, like this:</P
><PRE
CLASS="programlisting"
>@a = &lt;*.plx&gt;;
@a = glob(&quot;*.plx&quot;);</PRE
><P
CLASS="para"
>In a list context, as demonstrated here, the glob returns a list of all names that match the pattern or an empty list if none match. In a scalar context, the next name that matches is returned, or <A
CLASS="indexterm"
NAME="ch12-idx-871529-0"
></A
><CODE
CLASS="literal"
>undef</CODE
> is returned if there are no more matches; this process is very similar to reading from a filehandle. For example, to look at one name at a time:</P
><PRE
CLASS="programlisting"
>while (defined($nextname = &lt;c:/scripts/*.plx&gt;)) {
        print &quot;one of the files is $nextname\n&quot;;
}</PRE
><P
CLASS="para"
>Here the returned filenames begin with <EM
CLASS="emphasis"
>c:\scripts\</EM
>, so that if you want just the last part of the name, you'll have to whittle it down yourself, like so:</P
><PRE
CLASS="programlisting"
>while ($nextname = &lt;c:/scripts/*.plx&gt;) {
    $nextname =~ <A
CLASS="indexterm"
NAME="ch12-idx-871563-0"
></A
>s#.*/##; # remove part before last slash
    print &quot;one of the files is $nextname\n&quot;;
}</PRE
><P
CLASS="para"
>Multiple patterns are permitted inside the file glob argument; the lists are constructed separately and then concatenated as if they were one big list:</P
><PRE
CLASS="programlisting"
>@fred_barney_files = &lt;fred* barney*&gt;;</PRE
><P
CLASS="para"
>In other words, the glob returns the same values that an equivalent <A
CLASS="indexterm"
NAME="ch12-idx-871081-0"
></A
><EM
CLASS="emphasis"
>dir /B </EM
>command with the same parameters would return.</P
><P
CLASS="para"
>Although <A
CLASS="indexterm"
NAME="ch12-idx-871082-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-871082-1"
></A
>file globbing and regular-expression matching function similarly, the meanings of their various special characters are quite different. Don't confuse the two, or you'll be wondering why <CODE
CLASS="literal"
>&lt;\.c$&gt;</CODE
> doesn't find all of the files that end in <CODE
CLASS="literal"
>.c</CODE
>!</P
><P
CLASS="para"
>The argument to glob is <A
CLASS="indexterm"
NAME="ch12-idx-871083-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-871083-1"
></A
>variable interpolated before expansion. You can use Perl variables to select a wildcard based on a string computed at runtime:</P
><PRE
CLASS="programlisting"
>if (-d &quot;c:/tmp&quot;) {
        $where = &quot;c:/tmp&quot;;
} else {
        $where = &quot;c:/temp&quot;;
}
@files = &lt;$where/*&gt;;</PRE
><P
CLASS="para"
>Here we set <CODE
CLASS="literal"
>$where</CODE
> to be one of two different directory names, based on whether or not the directory <EM
CLASS="emphasis"
>c:\tmp</EM
> exists.[<A
CLASS="footnote"
HREF="#ch12-pgfId-872502"
>3</A
>] We then get a list of files in the selected directory. Note that the <CODE
CLASS="literal"
>$where</CODE
> variable is expanded, which means the wildcard to be globbed is either <EM
CLASS="emphasis"
>c:\tmp\*</EM
> or <EM
CLASS="emphasis"
>c:\temp\*</EM
>.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch12-pgfId-872502"
>[3]</A
> If we were really trying to find where the temporary directory was, we'd be checking the <CODE
CLASS="literal"
>ENV</CODE
> hash for the <CODE
CLASS="literal"
>TEMP</CODE
> variable:</P
><PRE
CLASS="programlisting"
>my $tmp = $ENV{'TEMP'} || $ENV{'TMP'};</PRE
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>There's one exception to this rule: the pattern <CODE
CLASS="literal"
>&lt;$var&gt;</CODE
> (meaning to use the variable <CODE
CLASS="literal"
>$var</CODE
> as the entire glob expression) must be written as <CODE
CLASS="literal"
>&lt;${var}&gt;</CODE
> for reasons we'd rather not get into at this point.[<A
CLASS="footnote"
HREF="#ch12-pgfId-871199"
>4</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch12-pgfId-871199"
>[4]</A
> The construct <CODE
CLASS="literal"
>&lt;$fred&gt;</CODE
> reads a line from the filehandle named by the contents of the scalar variable <CODE
CLASS="literal"
>$fred</CODE
>. Together with some other features not covered in this book, this construct enables you to use i<A
CLASS="indexterm"
NAME="ch12-idx-871085-0"
></A
><A
CLASS="indexterm"
NAME="ch12-idx-871085-1"
></A
>ndirect filehandles in which the name of a handle is passed around and manipulated as if it were data.</P
></DIV
></BLOCKQUOTE
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_01.htm"
TITLE="12.1 Moving Around the Directory Tree"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.1 Moving Around the Directory Tree"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl on Win32 Systems"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_03.htm"
TITLE="12.3 Directory Handles"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 12.3 Directory Handles"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>12.1 Moving Around the Directory Tree</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>12.3 Directory Handles</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
