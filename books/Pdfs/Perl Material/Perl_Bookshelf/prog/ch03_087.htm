<HTML
><HEAD
>
<TITLE>[Chapter 3] 3.2.87 local</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:51:12Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_02.htm"
TITLE="3.2 Perl Functions in Alphabetical Order"><LINK
REL="prev"
HREF="ch03_086.htm"
TITLE="3.2.86 listen"><LINK
REL="next"
HREF="ch03_088.htm"
TITLE="3.2.88 localtime"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_086.htm"
TITLE="3.2.86 listen"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.86 listen"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. Functions"
>Chapter 3<BR>Functions</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_088.htm"
TITLE="3.2.88 localtime"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.88 localtime"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CMD-LOCAL"
>3.2.87 local</A
></H3
><PRE
CLASS="programlisting"
>local <CODE
CLASS="replaceable"
><I
>EXPR</I
></CODE
></PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11075"
></A
><A
CLASS="indexterm"
NAME="AUTOID-11077"
></A
><A
CLASS="indexterm"
NAME="AUTOID-11080"
></A
><A
CLASS="indexterm"
NAME="AUTOID-11083"
></A
>This operator declares one or more global variables to have locally scoped
values within the innermost enclosing block, subroutine, <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
>, or file.
If more than one variable is listed, the list must be placed in parentheses,
because the operator binds more tightly than comma.
All the listed variables must be legal lvalues, that is, something
you could assign to.  This operator works by
saving the current values of those variables on a hidden stack
and restoring them upon exiting the block, subroutine, or <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
>,
or file.
After the <A
CLASS="xref"
HREF="ch03_087.htm"
TITLE="local"
><B
CLASS="xref.cmd"
>local</B
></A
> is executed, but before the scope is exited, any
called subroutines will see the local, inner value, not the previous, outer
value, because the variable is still a global variable, despite
having a localized value.  The technical term for this is &quot;dynamic scoping&quot;.</P
><P
CLASS="para"
>The <CODE
CLASS="replaceable"
><I
>EXPR</I
></CODE
> may be assigned to if desired, which allows you to initialize
your local variables.  (If no initializer is given, all scalars are
initialized to the undefined value and all arrays and hashes
to empty.)  Commonly, this is used to name the
formal arguments to a subroutine.  As with ordinary assignment, if you
use parentheses around the variables on the left (or if the variable is
an array or hash), the expression on
the right is evaluated in list context.  Otherwise the expression
on the right is evaluated in scalar context.</P
><P
CLASS="para"
>Here is a routine that executes some random piece of code that depends
on <CODE
CLASS="literal"
>$i</CODE
> running through a range of numbers.  Note that the scope
of <CODE
CLASS="literal"
>$i</CODE
> propagates into the <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
> code.</P
><PRE
CLASS="programlisting"
>&amp;RANGEVAL(20, 30, '$foo[$i] = $i');

sub RANGEVAL {
    local($min, $max, $thunk) = @_;
    local $result = &quot;&quot;;
    local $i;

    # Presumably $thunk makes reference to $i

    for ($i = $min; $i &lt; $max; $i++) {
        $result .= eval $thunk;
    }

    $result;
}</PRE
><P
CLASS="para"
>This code demonstrates how to make a temporary modification to
a global array:</P
><PRE
CLASS="programlisting"
>if ($sw eq '-v') {
    # init local array with global array
    local @ARGV = @ARGV;
    unshift @ARGV, 'echo';
    system @ARGV;
}
# @ARGV restored</PRE
><P
CLASS="para"
>You can also temporarily modify hashes:</P
><PRE
CLASS="programlisting"
># temporarily add a couple of entries to the %digits hash
if ($base12) {
    # (NOTE: not claiming this is efficient!)
    local(%digits) = (%digits, T =&gt; 10, E =&gt; 11);
    parse_num();
}</PRE
><P
CLASS="para"
>But you probably want to be using <A
CLASS="xref"
HREF="ch03_097.htm"
TITLE="my"
><B
CLASS="xref.cmd"
>my</B
></A
> instead, because
<A
CLASS="xref"
HREF="ch03_087.htm"
TITLE="local"
><B
CLASS="xref.cmd"
>local</B
></A
> isn't really what most people think of as local.
See the section on <A
CLASS="xref"
HREF="ch03_097.htm"
TITLE="my"
><B
CLASS="xref.cmd"
>my</B
></A
> later.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_086.htm"
TITLE="3.2.86 listen"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.86 listen"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_088.htm"
TITLE="3.2.88 localtime"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.88 localtime"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.2.86 listen</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.2.88 localtime</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
