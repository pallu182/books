<HTML
><HEAD
>
<TITLE>[Chapter 13] File and Directory Manipulation</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:34:41Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Learning Perl"><LINK
REL="prev"
HREF="ch12_06.htm"
TITLE="12.6 Exercises"><LINK
REL="next"
HREF="ch13_02.htm"
TITLE="13.2 Renaming a File"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_06.htm"
TITLE="12.6 Exercises"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.6 Exercises"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 13</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_02.htm"
TITLE="13.2 Renaming a File"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.2 Renaming a File"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="ch13-29814"
>13. File and Directory Manipulation</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch13-26411"
TITLE="13.1 Removing a File"
>Removing a File</A
><BR><A
CLASS="sect1"
HREF="ch13_02.htm"
TITLE="13.2 Renaming a File"
>Renaming a File</A
><BR><A
CLASS="sect1"
HREF="ch13_03.htm"
TITLE="13.3 Creating Alternate Names for a File: Linking"
>Creating Alternate Names for a File: Linking</A
><BR><A
CLASS="sect1"
HREF="ch13_04.htm"
TITLE="13.4 Making and Removing Directories"
>Making and Removing Directories</A
><BR><A
CLASS="sect1"
HREF="ch13_05.htm"
TITLE="13.5 Modifying Permissions"
>Modifying Permissions</A
><BR><A
CLASS="sect1"
HREF="ch13_06.htm"
TITLE="13.6 Modifying Ownership"
>Modifying Ownership</A
><BR><A
CLASS="sect1"
HREF="ch13_07.htm"
TITLE="13.7 Modifying Timestamps"
>Modifying Timestamps</A
><BR><A
CLASS="sect1"
HREF="ch13_08.htm"
TITLE="13.8 Exercises"
>Exercises</A
></P
><P
></P
></DIV
><P
CLASS="para"
>This chapter shows you how to manipulate the files themselves, not merely the data contained in them. We'll use the UNIX (and POSIX and Linux) semantics for demonstrating access to files and directories. Not all filesystems access mechanisms, but these are the standard ones for reasonably support-rich filesystem models.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch13-26411"
>13.1 Removing a File</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch13-idx-350-0"
></A
><A
CLASS="indexterm"
NAME="ch13-idx-350-1"
></A
>Earlier, you learned how to create a file from within Perl by opening it for output with a filehandle. Now, we'll get dangerous and learn how to remove a file (very appropriate for <A
CLASS="xref"
HREF="ch13_01.htm"
TITLE="File and Directory Manipulation"
>Chapter 13, <CITE
CLASS="chapter"
>File and Directory Manipulation</CITE
></A
>, don't you think?).</P
><P
CLASS="para"
>The Perl <A
CLASS="indexterm"
NAME="ch13-idx-352-0"
></A
><CODE
CLASS="literal"
>unlink</CODE
> function (named for the POSIX system call) deletes one name for a file (which could possibly have other names). When the last name for a file is deleted, and no processes have it open, the file itself is removed. This is exactly what the UNIX <A
CLASS="indexterm"
NAME="ch13-idx-354-0"
></A
><EM
CLASS="emphasis"
>rm</EM
> command does. Because a file typically has just one name (unless you've created hard links), for the most part, you can think of removing a name as removing the file. Given that, here's how to remove a file called <EM
CLASS="emphasis"
>fred</EM
> and then remove a file specified during program execution:</P
><PRE
CLASS="programlisting"
>unlink (&quot;fred&quot;); # say goodbye to fred
print &quot;what file do you want to delete? &quot;;
chomp($name = &lt;STDIN&gt;);
unlink ($name);</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>unlink</CODE
> function can take a list of names to be unlinked as well:</P
><PRE
CLASS="programlisting"
>unlink (&quot;cowbird&quot;,&quot;starling&quot;); # kill two birds
unlink &lt;*.o&gt;;                  # just like &quot;rm *.o&quot; in the shell</PRE
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch13-idx-363-0"
></A
>glob is evaluated in a list context, creating a list of filenames that match the pattern. This is exactly what we need to feed <CODE
CLASS="literal"
>unlink</CODE
>.</P
><P
CLASS="para"
>The return value of <CODE
CLASS="literal"
>unlink</CODE
> is the number of files successfully deleted. If there's one argument, and it is deleted, the result is one, otherwise it is zero. If there are three filenames but only two could be deleted, the result is two. You can't tell which two, so if you need to figure out which deletion failed, you must do them one at a time. Here's how to delete all of the object files (ending in <CODE
CLASS="literal"
>.o</CODE
>) while reporting an error for any file that cannot be deleted:</P
><PRE
CLASS="programlisting"
>foreach $file (&lt;*.o&gt;) { # step through a list of .o files
    unlink($file) || warn &quot;having trouble deleting $file: $!&quot;;
}</PRE
><P
CLASS="para"
>If the <CODE
CLASS="literal"
>unlink</CODE
> returns <CODE
CLASS="literal"
>1</CODE
> (meaning the one file specified was indeed deleted), the true result skips the <CODE
CLASS="literal"
>warn</CODE
> function. If the filename cannot be deleted, the <CODE
CLASS="literal"
>0</CODE
> result is false, so the <CODE
CLASS="literal"
>warn</CODE
> is executed. Once again, this can be read abstractly as "unlink this file or tell me about it."</P
><P
CLASS="para"
>If the <CODE
CLASS="literal"
>unlink</CODE
> function is given no arguments, the <CODE
CLASS="literal"
>$_</CODE
> variable is once again used as a default. Thus, we could have written the loop above as:</P
><PRE
CLASS="programlisting"
>foreach (&lt;*.o&gt;) { # step through a list of .o files
    unlink || warn &quot;having trouble deleting $_: $!&quot;;
}</PRE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch12_06.htm"
TITLE="12.6 Exercises"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 12.6 Exercises"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch13_02.htm"
TITLE="13.2 Renaming a File"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 13.2 Renaming a File"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>12.6 Exercises</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>13.2 Renaming a File</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
