<HTML
><HEAD
>
<TITLE>[Chapter 17] 17.5 Variable-Length ( Text) Databases</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:35:55Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch17_01.htm"
TITLE="17. User Database Manipulation"><LINK
REL="prev"
HREF="ch17_04.htm"
TITLE="17.4 Fixed-Length Random Access Databases"><LINK
REL="next"
HREF="ch17_06.htm"
TITLE="17.6 Exercises"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_04.htm"
TITLE="17.4 Fixed-Length Random Access Databases"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.4 Fixed-Length Random Access Databases"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch17_01.htm"
TITLE="17. User Database Manipulation"
>Chapter 17<BR>User Database Manipulation</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_06.htm"
TITLE="17.6 Exercises"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.6 Exercises"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch17-30926"
>17.5 Variable-Length ( Text) Databases</A
></H2
><P
CLASS="para"
>Many UNIX system databases (and quite a few user-created databases) are a series of <A
CLASS="indexterm"
NAME="ch17-idx-86107-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-86107-1"
></A
>human-readable text lines, with one record per line. For example, the password file consists of one line per user on the system, and the hosts file contains one line per hostname.</P
><P
CLASS="para"
>Most often, these databases are updated with simple <A
CLASS="indexterm"
NAME="ch17-idx-86108-0"
></A
><A
CLASS="indexterm"
NAME="ch17-idx-86108-1"
></A
>text editors. Updating such a database consists of reading it all into a temporary area (either memory or another disk file), making the necessary changes, and then either writing the result back to the original file or creating a new file with the same name after deleting or renaming the old version. You can think of this as a <A
CLASS="indexterm"
NAME="ch17-idx-86109-0"
></A
><EM
CLASS="emphasis"
>copy pass</EM
>: the data is copied from the original database to a new version of the database, making changes during the copy.</P
><P
CLASS="para"
>Perl supports a copy-pass-style edit on line-oriented databases using <A
CLASS="indexterm"
NAME="ch17-idx-86110-0"
></A
><EM
CLASS="emphasis"
>inplace editing</EM
>. Inplace editing is a modification of the way the <A
CLASS="indexterm"
NAME="ch17-idx-86111-0"
></A
>diamond operator (<A
CLASS="indexterm"
NAME="ch17-idx-86112-0"
></A
><CODE
CLASS="literal"
>&lt;&gt;</CODE
>) reads data from the list of files specified on the command line. Most often, this editing mode is accessed by setting the <A
CLASS="indexterm"
NAME="ch17-idx-86113-0"
></A
><EM
CLASS="emphasis"
>-i</EM
> command-line argument, but we can also trigger the inplace editing mode from within a program, as shown in the examples that follow.</P
><P
CLASS="para"
>To trigger the inplace editing mode, set a value into the <A
CLASS="indexterm"
NAME="ch17-idx-87590-0"
></A
><CODE
CLASS="literal"
>$^I</CODE
> scalar variable. The value of this variable is important and will be discussed in a moment.</P
><P
CLASS="para"
>When the <CODE
CLASS="literal"
>&lt;&gt;</CODE
> construct is used and <CODE
CLASS="literal"
>$^I</CODE
> has a value other than <A
CLASS="indexterm"
NAME="ch17-idx-86115-0"
></A
><CODE
CLASS="literal"
>undef</CODE
>, the steps marked <CODE
CLASS="literal"
>##INPLACE##</CODE
> in the following code are added to the list of implicit actions the diamond operator takes:</P
><PRE
CLASS="programlisting"
>$ARGV = shift @ARGV;
open(ARGV,&quot;&lt;$ARGV&quot;);
rename($ARGV,&quot;$ARGV$^I&quot;); ## INPLACE ##
unlink($ARGV);            ## INPLACE ##
open(ARGVOUT,&quot;&gt;$ARGV&quot;);   ## INPLACE ##
select(ARGVOUT);          ## INPLACE ##</PRE
><P
CLASS="para"
>The effect is that reads from the diamond operator come from the old file, and writes to the default filehandle go to a new copy of the file. The old file remains in a backup file, which is the filename with a suffix equal to the value of the <CODE
CLASS="literal"
>$^I</CODE
> variable. (There's also a bit of magic to copy the permission bits from the old file to the new file.) These steps are repeated each time a new file is taken from the <CODE
CLASS="literal"
>@ARGV</CODE
> array.</P
><P
CLASS="para"
>Typical values for <CODE
CLASS="literal"
>$^I</CODE
> are things like <CODE
CLASS="literal"
>.bak</CODE
> or <CODE
CLASS="literal"
>~</CODE
>, to create <A
CLASS="indexterm"
NAME="ch17-idx-86116-0"
></A
>backup files much like the editor creates. A strange and useful value for <CODE
CLASS="literal"
>$^I</CODE
> is the empty string, <CODE
CLASS="literal"
>&quot;&quot;</CODE
>, which causes the old file to be neatly eliminated after the edit is complete. Unfortunately, if the system or program crashes during the execution of your program, you lose all of your old data, so this is recommended only for brave, foolish, or trusting souls.</P
><P
CLASS="para"
>Here's a way to change everyone's <A
CLASS="indexterm"
NAME="ch17-idx-86117-0"
></A
>login shell to <EM
CLASS="emphasis"
>/bin/sh</EM
> by editing the password file:</P
><PRE
CLASS="programlisting"
>@ARGV = (&quot;/etc/passwd&quot;); # prime the diamond operator
$^I = &quot;.bak&quot;;            # write /etc/passwd.bak for safety
while (&lt;&gt;) {             # main loop, once for each line of /etc/passwd
    s#:[^:]*$#:/bin/sh#; # change the shell to /bin/sh
    print;               # send output to ARGVOUT: the new /etc/passwd
}</PRE
><P
CLASS="para"
>As you can see, this program is pretty simple. In fact, the same program can be generated entirely with a few command-line arguments, as in:</P
><PRE
CLASS="programlisting"
>perl -p -i.bak -e 's#:[^:]*$#:/bin/sh#' /etc/passwd</PRE
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch17-idx-86070-0"
></A
><CODE
CLASS="literal"
>-p</CODE
> switch brackets your program with a <CODE
CLASS="literal"
>while</CODE
> loop that includes a <CODE
CLASS="literal"
>print</CODE
> statement. The <A
CLASS="indexterm"
NAME="ch17-idx-87610-0"
></A
><CODE
CLASS="literal"
>-i</CODE
> switch sets a value into the <CODE
CLASS="literal"
>$^I</CODE
> variable. The <A
CLASS="indexterm"
NAME="ch17-idx-86072-0"
></A
><CODE
CLASS="literal"
>-e</CODE
> switch defines the following argument as a piece of Perl code for the loop body, and the final argument gives an initial value to <CODE
CLASS="literal"
>@ARGV</CODE
>.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch17-idx-86073-0"
></A
>Command-line arguments are discussed in greater detail in <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> and the <EM
CLASS="emphasis"
>perlrun</EM
> manpage.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_04.htm"
TITLE="17.4 Fixed-Length Random Access Databases"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 17.4 Fixed-Length Random Access Databases"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch17_06.htm"
TITLE="17.6 Exercises"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 17.6 Exercises"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>17.4 Fixed-Length Random Access Databases</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>17.6 Exercises</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
