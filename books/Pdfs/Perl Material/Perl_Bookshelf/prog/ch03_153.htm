<HTML
><HEAD
>
<TITLE>[Chapter 3] 3.2.153 sort</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:54:24Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_02.htm"
TITLE="3.2 Perl Functions in Alphabetical Order"><LINK
REL="prev"
HREF="ch03_152.htm"
TITLE="3.2.152 socketpair"><LINK
REL="next"
HREF="ch03_154.htm"
TITLE="3.2.154 splice"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_152.htm"
TITLE="3.2.152 socketpair"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.152 socketpair"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. Functions"
>Chapter 3<BR>Functions</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_154.htm"
TITLE="3.2.154 splice"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.154 splice"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CMD-SORT"
>3.2.153 sort</A
></H3
><PRE
CLASS="programlisting"
>sort <CODE
CLASS="replaceable"
><I
>SUBNAME</I
></CODE
> <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
>
sort <CODE
CLASS="replaceable"
><I
>BLOCK</I
></CODE
> <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
>
sort <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
></PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-12975"
></A
><A
CLASS="indexterm"
NAME="AUTOID-12977"
></A
><A
CLASS="indexterm"
NAME="AUTOID-12980"
></A
><A
CLASS="indexterm"
NAME="AUTOID-12983"
></A
><A
CLASS="indexterm"
NAME="AUTOID-12986"
></A
><A
CLASS="indexterm"
NAME="AUTOID-12988"
></A
>This function sorts the <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
> and returns the sorted
list value.  By default, it sorts in standard string comparison order (undefined
values sorting before defined null strings, which sort before everything else).
<CODE
CLASS="replaceable"
><I
>SUBNAME</I
></CODE
>, if given, is the name of a subroutine that
returns an integer less than, equal to, or greater than 0, depending on how the
elements of the list are to be ordered.  (The handy <CODE
CLASS="literal"
>&lt;=&gt;</CODE
>
and <CODE
CLASS="literal"
>cmp</CODE
> operators can be used to perform three-way numeric
and string comparisons.)  In the interests of efficiency, the normal calling
code for subroutines is bypassed, with the following effects: the subroutine may
not be a recursive subroutine, and the two elements to be compared are passed
into the subroutine not via <CODE
CLASS="literal"
>@_</CODE
> but as <B
CLASS="emphasis.bold"
>$a</B
> and <B
CLASS="emphasis.bold"
>$b</B
> (see the examples
below).  The variables <B
CLASS="emphasis.bold"
>$a</B
> and <B
CLASS="emphasis.bold"
>$b</B
> are passed by reference, so don't modify them in the
subroutine.  <CODE
CLASS="replaceable"
><I
>SUBNAME</I
></CODE
> may be a scalar variable name
(unsubscripted), in which case the value provides the name of (or a reference
to) the actual subroutine to use.  In place of a
<CODE
CLASS="replaceable"
><I
>SUBNAME</I
></CODE
>, you can provide a
<CODE
CLASS="replaceable"
><I
>BLOCK</I
></CODE
> as an anonymous, in-line sort subroutine.</P
><P
CLASS="para"
>To do an ordinary numeric sort, say this:</P
><PRE
CLASS="programlisting"
>sub numerically { $a &lt;=&gt; $b; }
@sortedbynumber = sort numerically 53,29,11,32,7;</PRE
><P
CLASS="para"
>To sort in descending order, simply reverse the <CODE
CLASS="literal"
>$a</CODE
>
and <CODE
CLASS="literal"
>$b</CODE
>. To sort a list value by some associated value, use a hash
lookup in the sort routine:</P
><PRE
CLASS="programlisting"
>sub byage {
    $age{$a} &lt;=&gt; $age{$b};
}
@sortedclass = sort byage @class;</PRE
><P
CLASS="para"
>As an extension of that notion, you can cascade several different
comparisons using the handy comparison operators, which work nicely for
this because when they return <CODE
CLASS="literal"
>0</CODE
> they fall through to the next
case.  The routine below sorts to the front of the list those people who are
first richer, then taller, then younger, then less alphabetically
challenged.  We also put a final comparison between <CODE
CLASS="literal"
>$a</CODE
> and
<CODE
CLASS="literal"
>$b</CODE
> to make sure the ordering is always well defined.</P
><PRE
CLASS="programlisting"
>sub prospects {
    $money{$b} &lt;=&gt; $money{$a}
       or
    $height{$b} &lt;=&gt; $height{$a}
       or
    $age{$a} &lt;=&gt; $age{$b}
       or
    $lastname{$a} cmp $lastname{$b}
       or
    $a cmp $b;
}
@sortedclass = sort prospects @class;</PRE
><P
CLASS="para"
>To sort fields without regard to case, say:</P
><PRE
CLASS="programlisting"
>@sorted = sort { lc($a) cmp lc($b) } @unsorted;</PRE
><P
CLASS="para"
>And finally, note the equivalence of the two ways to sort in
reverse:</P
><PRE
CLASS="programlisting"
>sub backwards { $b cmp $a; }
@harry = qw(dog cat x Cain Abel);
@george = qw(gone chased yz Punished Axed);
print sort @harry;                   # prints AbelCaincatdogx
print sort backwards @harry;         # prints xdogcatCainAbel
print reverse sort @harry;           # prints xdogcatCainAbel
print sort @george, &quot;to&quot;, @harry;    # Remember, it's one LIST.
        # prints AbelAxedCainPunishedcatchaseddoggonetoxyz</PRE
><P
CLASS="para"
>Do not declare <B
CLASS="emphasis.bold"
>$a</B
> and <B
CLASS="emphasis.bold"
>$b</B
> as lexical
variables (with <A
CLASS="xref"
HREF="ch03_097.htm"
TITLE="my"
><B
CLASS="xref.cmd"
>my</B
></A
>). They are package
globals (though they're exempt from the usual restrictions on globals when
you're using <CODE
CLASS="literal"
>use strict</CODE
>).  You do need to make sure your sort
routine is in the same package though, or qualify <CODE
CLASS="literal"
>$a</CODE
> and
<CODE
CLASS="literal"
>$b</CODE
> with the package name of the caller.</P
><P
CLASS="para"
>One last caveat. Perl's <A
CLASS="xref"
HREF="ch03_153.htm"
TITLE="sort"
><B
CLASS="xref.cmd"
>sort</B
></A
> is
implemented in terms of C's <EM
CLASS="emphasis"
>qsort</EM
>(3) function.
Some <EM
CLASS="emphasis"
>qsort</EM
>(3) versions will dump core if your
sort subroutine provides inconsistent ordering of values.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_152.htm"
TITLE="3.2.152 socketpair"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.152 socketpair"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_154.htm"
TITLE="3.2.154 splice"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.154 splice"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.2.152 socketpair</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.2.154 splice</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
