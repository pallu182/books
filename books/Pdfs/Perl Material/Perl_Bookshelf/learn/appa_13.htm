<HTML
><HEAD
>
<TITLE>[Appendix A] A.13 Chapter 14, Process Management</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:37:02Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="appa_01.htm"
TITLE="A. Exercise Answers"><LINK
REL="prev"
HREF="appa_12.htm"
TITLE="A.12 Chapter 13, File and Directory Manipulation"><LINK
REL="next"
HREF="appa_14.htm"
TITLE="A.14 Chapter 15, Other Data Transformation"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_12.htm"
TITLE="A.12 Chapter 13, File and Directory Manipulation"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: A.12 Chapter 13, File and Directory Manipulation"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="appendix"
REL="up"
HREF="appa_01.htm"
TITLE="A. Exercise Answers"
>Appendix A<BR>Exercise Answers</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_14.htm"
TITLE="A.14 Chapter 15, Other Data Transformation"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: A.14 Chapter 15, Other Data Transformation"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="appa-21303"
>A.13 Chapter 14, Process Management</A
></H2
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-179214"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>if (`<A
CLASS="indexterm"
NAME="appa-idx-178752-0"
></A
>date` =~ /^S/) {
    print &quot;Go play!\n&quot;;
} else {
    print &quot;Get to work!\n&quot;;
}</PRE
><P
CLASS="para"
>It just so happens that the first output character of the <EM
CLASS="emphasis"
>date</EM
> command is an <CODE
CLASS="literal"
>S</CODE
> only on the weekend (<CODE
CLASS="literal"
>Sat</CODE
> or <CODE
CLASS="literal"
>Sun</CODE
>), which makes this program trivial. We invoke <EM
CLASS="emphasis"
>date</EM
>, then use a regular expression to see if the first character is an <CODE
CLASS="literal"
>S</CODE
>. Based on that, we print one message or the other.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-179220"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>open(PW,&quot;/etc/passwd&quot;);
while (&lt;PW&gt;) {
    chomp;
    ($user,$gcos) = <A
CLASS="indexterm"
NAME="appa-idx-178753-0"
></A
>(split /:/)[0,4];
    ($real) = split(/,/, $gcos);
    $real{$user} = $real;
}
close(PW);

open(WHO,&quot;who|&quot;) || die &quot;cannot open who pipe&quot;;
while (&lt;WHO&gt;) {
    ($login, $rest) = /^(\S+)\s+(.*)/;
    $login = $real{$login} if $real{$login};
    <A
CLASS="indexterm"
NAME="appa-idx-178754-0"
></A
>printf &quot;%-30s %s\n&quot;,$login,$rest;
}</PRE
><P
CLASS="para"
>The first loop creates a hash <CODE
CLASS="literal"
>%real</CODE
> that has login names for keys and the corresponding real names as values. This hash is used in the following loop to change the login name into a real name.</P
><P
CLASS="para"
>The second loop scans through the output resulting from opening the <EM
CLASS="emphasis"
>who</EM
> command as a filehandle. Each line of <EM
CLASS="emphasis"
>who</EM
>'s output is broken apart using a regular expression match in a list context. The first word of the line (the login name) is replaced with the real name from the hash, but only if it exists. When that's all done, a nice <CODE
CLASS="literal"
>printf</CODE
> puts the result onto <CODE
CLASS="literal"
>STDOUT</CODE
>.</P
><P
CLASS="para"
>You can replace the filehandle <CODE
CLASS="literal"
>open</CODE
> and the beginning of the loop with just</P
><PRE
CLASS="programlisting"
>foreach $_ (<A
CLASS="indexterm"
NAME="appa-idx-178755-0"
></A
>`who`) {</PRE
><P
CLASS="para"
>to accomplish the same result. The only difference is that the version with the filehandle can begin operating as soon as <EM
CLASS="emphasis"
>who</EM
> starts spitting out characters, while the version with <CODE
CLASS="replaceable"
><I
>who</I
></CODE
> in backquotes must wait for <EM
CLASS="emphasis"
>who</EM
> to finish.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-179237"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>open(PW,&quot;/etc/passwd&quot;);
while (&lt;PW&gt;) {
    chomp;
    ($user,$gcos) = (split /:/)[0,4];
    ($real) = split(/,/, $gcos);
    $real{$user} = $real;
}
close(PW);

open(LPR,&quot;|lpr&quot;) || die &quot;cannot open LPR pipe&quot;;
open(WHO,&quot;who|&quot;) || die &quot;cannot open who pipe&quot;;
while (&lt;WHO&gt;) {
# or replace previous two lines with: foreach $_ (`who`) {
    ($login, $rest) = /^(\S+)\s+(.*)/;
    $login = $real{$login} if $real{$login};
    printf LPR &quot;%-30s %s\n&quot;,$login,$rest;
}</PRE
><P
CLASS="para"
>The difference between this program and the program from the previous exercise is that we've added an <CODE
CLASS="literal"
>LPR</CODE
> filehandle opened onto an <EM
CLASS="emphasis"
>lpr</EM
> process, and modified the <CODE
CLASS="literal"
>printf</CODE
> statement to send the data there instead of <CODE
CLASS="literal"
>STDOUT</CODE
>.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-179266"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>sub mkdir {
    <A
CLASS="indexterm"
NAME="appa-idx-178757-0"
></A
>!<A
CLASS="indexterm"
NAME="appa-idx-178756-0"
></A
>system &quot;/bin/mkdir&quot;, @_;
}</PRE
><P
CLASS="para"
>Here, the <EM
CLASS="emphasis"
>mkdir</EM
> command is given the arguments directly from the arguments to the subroutine. The return value must be logically negated, however, because a nonzero exit status from <CODE
CLASS="literal"
>system</CODE
> must translate into a false value for the Perl caller.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-179270"
></A
> Here's one way to do it:</P
><PRE
CLASS="programlisting"
>sub mkdir {
    my($dir, $mode) = @_;
    (!system &quot;/bin/mkdir&quot;, $dir) &amp;&amp; chmod($mode, $dir);
}</PRE
><P
CLASS="para"
>First, the arguments to this routine are named as <CODE
CLASS="literal"
>$dir</CODE
> and <CODE
CLASS="literal"
>$mode</CODE
>. Next, we invoke <EM
CLASS="emphasis"
>mkdir</EM
> on the directory named by <CODE
CLASS="literal"
>$dir</CODE
>. If that succeeds, the <CODE
CLASS="literal"
>chmod</CODE
> operator gives the proper mode to the directory.</P
></LI
></OL
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_12.htm"
TITLE="A.12 Chapter 13, File and Directory Manipulation"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: A.12 Chapter 13, File and Directory Manipulation"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_14.htm"
TITLE="A.14 Chapter 15, Other Data Transformation"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: A.14 Chapter 15, Other Data Transformation"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>A.12 Chapter 13, File and Directory Manipulation</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>A.14 Chapter 15, Other Data Transformation</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
