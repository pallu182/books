<HTML
><HEAD
>
<TITLE>[Chapter 15] Other Data Transformation</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:35:17Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Learning Perl"><LINK
REL="prev"
HREF="ch14_07.htm"
TITLE="14.7 Exercises"><LINK
REL="next"
HREF="ch15_02.htm"
TITLE="15.2 Extracting and Replacing a Substring"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_07.htm"
TITLE="14.7 Exercises"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.7 Exercises"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 15</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_02.htm"
TITLE="15.2 Extracting and Replacing a Substring"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.2 Extracting and Replacing a Substring"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="ch15-40082"
>15. Other Data Transformation</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch15-26471"
TITLE="15.1 Finding a Substring"
>Finding a Substring</A
><BR><A
CLASS="sect1"
HREF="ch15_02.htm"
TITLE="15.2 Extracting and Replacing a Substring"
>Extracting and Replacing a Substring</A
><BR><A
CLASS="sect1"
HREF="ch15_03.htm"
TITLE="15.3 Formatting Data with sprintf( )"
>Formatting Data with sprintf( )</A
><BR><A
CLASS="sect1"
HREF="ch15_04.htm"
TITLE="15.4 Advanced Sorting"
>Advanced Sorting</A
><BR><A
CLASS="sect1"
HREF="ch15_05.htm"
TITLE="15.5 Transliteration"
>Transliteration</A
><BR><A
CLASS="sect1"
HREF="ch15_06.htm"
TITLE="15.6 Exercises"
>Exercises</A
></P
><P
></P
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch15-26471"
>15.1 Finding a Substring</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch15-idx-403319-0"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-403319-1"
></A
>Finding a substring depends on where you have lost it. If you happen to have lost it within a bigger string, you're in luck, because <A
CLASS="indexterm"
NAME="ch15-idx-403320-0"
></A
><CODE
CLASS="literal"
>index</CODE
> can help you out. Here's how it looks:</P
><PRE
CLASS="programlisting"
>$x = index(<CODE
CLASS="replaceable"
><I
>$string</I
></CODE
>,<CODE
CLASS="replaceable"
><I
>$substring</I
></CODE
>);</PRE
><P
CLASS="para"
>Perl locates the first occurrence of <CODE
CLASS="replaceable"
><I
>substring</I
></CODE
> within <CODE
CLASS="replaceable"
><I
>string</I
></CODE
>, returning an integer location of the first character. The index value returned is zero-based; if the <CODE
CLASS="replaceable"
><I
>substring</I
></CODE
> is found at the beginning of the <CODE
CLASS="replaceable"
><I
>string</I
></CODE
>, you get a <CODE
CLASS="literal"
>0</CODE
>. If it's one character later, you get a <CODE
CLASS="literal"
>1</CODE
>, and so on. If the <CODE
CLASS="replaceable"
><I
>substring</I
></CODE
> can't be found in <CODE
CLASS="replaceable"
><I
>string</I
></CODE
>, you get <CODE
CLASS="literal"
>-1</CODE
>.</P
><P
CLASS="para"
>Take a look at these:</P
><PRE
CLASS="programlisting"
>$where   = index(&quot;hello&quot;,&quot;e&quot;);                 # $where gets 1
$person  = &quot;barney&quot;;
$where   = index(&quot;fred barney&quot;,$person);       # $where gets 5
@rockers = (&quot;fred&quot;,&quot;barney&quot;);
$where   = index(join(&quot; &quot;,@rockers),$person);  # same thing</PRE
><P
CLASS="para"
>Notice that both the string being searched and the string being searched for can be a literal string, a scalar variable containing a string, or even an expression that has a string value. Here are some more examples:</P
><PRE
CLASS="programlisting"
>$which = index(&quot;a very long string&quot;,&quot;long&quot;); # $which gets 7
$which = index(&quot;a very long string&quot;,&quot;lame&quot;); # $which gets -1</PRE
><P
CLASS="para"
>If the string contains the substring at more than one location, the <CODE
CLASS="literal"
>index </CODE
>function returns the leftmost location. To find later locations, you can give <CODE
CLASS="literal"
>index</CODE
><A
CLASS="indexterm"
NAME="ch15-idx-403321-0"
></A
> a third parameter. This parameter is the minimum value that will be returned by <CODE
CLASS="literal"
>index</CODE
>, allowing you to look for the next occurrence of the substring that follows a selected position. It looks like this:</P
><PRE
CLASS="programlisting"
>$x = index(<CODE
CLASS="replaceable"
><I
>$bigstring</I
></CODE
>,<CODE
CLASS="replaceable"
><I
>$littlestring</I
></CODE
>,<CODE
CLASS="replaceable"
><I
>$skip</I
></CODE
>);</PRE
><P
CLASS="para"
>Here are some examples of how this third parameter works:</P
><PRE
CLASS="programlisting"
>$where = index(&quot;hello world&quot;,&quot;l&quot;);   # returns 2 (first l)
$where = index(&quot;hello world&quot;,&quot;l&quot;,0); # same thing
$where = index(&quot;hello world&quot;,&quot;l&quot;,1); # still same
$where = index(&quot;hello world&quot;,&quot;l&quot;,3); # now returns 3
                        # (3 is the first place greater than or equal to 3)
$where = index(&quot;hello world&quot;,&quot;o&quot;,5); # returns 7 (second o)
$where = index(&quot;hello world&quot;,&quot;o&quot;,8); # returns -1 (none after 8)</PRE
><P
CLASS="para"
>Going the other way, you can <A
CLASS="indexterm"
NAME="ch15-idx-403323-0"
></A
>scan from the right to get the rightmost occurrence using <A
CLASS="indexterm"
NAME="ch15-idx-403322-0"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-403322-1"
></A
><A
CLASS="indexterm"
NAME="ch15-idx-403322-2"
></A
><CODE
CLASS="literal"
>rindex</CODE
>. The return value is still the number of characters between the left end of the string and the start of the substring, as before, but you'll get the rightmost occurrence instead of the leftmost occurrence if there are more than one. The <CODE
CLASS="literal"
>rindex</CODE
> function also takes a third parameter like <CODE
CLASS="literal"
>index</CODE
> does, so that you can get an occurrence that is less than or equal to a selected position. Here are some examples of what you get:</P
><PRE
CLASS="programlisting"
>$w = rindex(&quot;hello world&quot;,&quot;he&quot;);  # $w gets 0
$w = rindex(&quot;hello world&quot;,&quot;l&quot;);   # $w gets 9 (rightmost l)
$w = rindex(&quot;hello world&quot;,&quot;o&quot;);   # $w gets 7
$w = rindex(&quot;hello world&quot;,&quot;o &quot;);  # now $w gets 4
$w = rindex(&quot;hello world&quot;,&quot;xx&quot;);  # $w gets -1 (not found)
$w = rindex(&quot;hello world&quot;,&quot;o&quot;,6); # $w gets 4 (first before 6)
$w = rindex(&quot;hello world&quot;,&quot;o&quot;,3); # $w gets -1 (not found before 3)</PRE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_07.htm"
TITLE="14.7 Exercises"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.7 Exercises"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_02.htm"
TITLE="15.2 Extracting and Replacing a Substring"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 15.2 Extracting and Replacing a Substring"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>14.7 Exercises</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>15.2 Extracting and Replacing a Substring</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
