<HTML
><HEAD
>
<TITLE>[Appendix A] A.6 Chapter 7, Regular Expressions</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:36:51Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="appa_01.htm"
TITLE="A. Exercise Answers"><LINK
REL="prev"
HREF="appa_05.htm"
TITLE="A.5 Chapter 6, Basic I/O"><LINK
REL="next"
HREF="appa_07.htm"
TITLE="A.7 Chapter 8, Functions"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_05.htm"
TITLE="A.5 Chapter 6, Basic I/O"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: A.5 Chapter 6, Basic I/O"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="appendix"
REL="up"
HREF="appa_01.htm"
TITLE="A. Exercise Answers"
>Appendix A<BR>Exercise Answers</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_07.htm"
TITLE="A.7 Chapter 8, Functions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: A.7 Chapter 8, Functions"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="appa-23983"
>A.6 Chapter 7, Regular Expressions</A
></H2
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-179370"
></A
>Here are some possible answers:</P
><OL
CLASS="orderedlist"
TYPE="a"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-178963"
></A
><CODE
CLASS="literal"
>/a+b*/</CODE
> </P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-179374"
></A
><CODE
CLASS="literal"
>/\\*\**/</CODE
> (Remember that the backslash cancels the meaning of the special character following.)</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-180828"
></A
><CODE
CLASS="literal"
>/($whatever){3}/</CODE
> (You must have the parentheses, or else the multiplier applies only to the last character of <CODE
CLASS="literal"
>$whatever</CODE
>; this also fails if <CODE
CLASS="literal"
>$whatever</CODE
> has special characters.)</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-180829"
></A
><CODE
CLASS="literal"
>/[\000-\377]{5}/</CODE
> or <CODE
CLASS="literal"
>/(.|\n){5}/</CODE
> (You can't use dot alone here, because dot doesn't match newline.)</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-179377"
></A
><CODE
CLASS="literal"
>/(^|\s)(\S+)(\s+\2)+(\s|$)/</CODE
> (<CODE
CLASS="literal"
>\S</CODE
> is nonwhitespace, and <CODE
CLASS="literal"
>\2</CODE
> is a reference to whatever the "word" is; the caret or whitespace alternative ensures that the <CODE
CLASS="literal"
>\S+</CODE
> begins at a whitespace boundary.)</P
></LI
></OL
></LI
><LI
CLASS="listitem"
><OL
CLASS="orderedlist"
TYPE="a"
><LI
CLASS="listitem"
><P
CLASS="para"
>One way to do this is:</P
><PRE
CLASS="programlisting"
>while (&lt;STDIN&gt;) {
    if (/a/i &amp;&amp; /e/i &amp;&amp; /i/i &amp;&amp; /o/i &amp;&amp; /u/i) {
        print;
    }
}</PRE
><P
CLASS="para"
>Here, we have an expression consisting of five match operators. These operators are all looking at the contents of the <CODE
CLASS="literal"
>$_</CODE
> variable, which is where the control expression of the <CODE
CLASS="literal"
>while</CODE
> loop is putting each line. The match operator expression will be true only when all five vowels are found.</P
><P
CLASS="para"
>Note that as soon as any of the five vowels are not found, the remainder of the expression is skipped, because the <CODE
CLASS="literal"
>&amp;&amp;</CODE
> operator doesn't evaluate its right argument if the left argument is false.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-179378"
></A
>Another way to do this is:</P
><PRE
CLASS="programlisting"
>while (&lt;STDIN&gt;) {
    if (/a.*e.*i.*o.*u/i) {
        print;
    }
}</PRE
><P
CLASS="para"
>This answer turns out to be easier than the other part of this exercise. Here we have a simple regular expression that looks for the five vowels in sequence, separated by any number of characters.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-181103"
></A
>One way to do this is:</P
><PRE
CLASS="programlisting"
>while (&lt;&gt;) {
    print if
        (/^[^aeiou]*a[^eiou]*e[^aiou]*i[^aeou]*o[^aeiu]*u[^aeio]*$ );
    }</PRE
><P
CLASS="para"
>Ugly, but it works. To construct this, just think "What can go between the beginning of the line, and the first a?," and then "What can go between the first a and the first e?" Eventually, it all works itself out, with a little assistance from you.</P
></LI
></OL
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-180844"
></A
>One way to do this is:</P
><PRE
CLASS="programlisting"
><A
CLASS="indexterm"
NAME="appa-idx-180845-0"
></A
>while (&lt;STDIN&gt;) {
    chomp;
    ($user, $gcos) = (split /:/)[0,4];
    ($real) = split(/,/, $gcos);
    print &quot;$user is $real\n&quot;;
}</PRE
><P
CLASS="para"
>The outer <CODE
CLASS="literal"
>while</CODE
> loop reads one line at a time from the password-format file into the <CODE
CLASS="literal"
>$_</CODE
> variable, terminating when there are no more lines to be read.</P
><P
CLASS="para"
>The second line of the <CODE
CLASS="literal"
>while</CODE
> loop body breaks the line apart by colons, saving two of the seven values into individual scalar variables with hopefully meaningful names.</P
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="appa-idx-178722-0"
></A
>GCOS field (the fifth field) is then split apart by commas, with the resulting list assigned to a single scalar variable enclosed in parentheses. The parentheses are important: they make this assignment an array assignment rather than a scalar assignment. The scalar variable <CODE
CLASS="literal"
>$real</CODE
> gets the first element of the list, and the remaining elements are discarded.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>print</CODE
> statement then displays the results.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-178982"
></A
>One way to do this is:</P
><PRE
CLASS="programlisting"
>while (&lt;STDIN&gt;) {
    chomp;
    ($gcos) = (split /:/)[4];
    ($real) = split(/,/, $gcos);
    ($first) = split(/\s+/, $real);
    $seen{$first}++;
}
foreach (keys %seen) {
    if ($seen{$_} &gt; 1) {
        print &quot;$_ was seen $seen{$_} times\n&quot;;
    }
}</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>while</CODE
> loop works a lot like the <CODE
CLASS="literal"
>while</CODE
> loop from the previous exercise. In addition to splitting the line apart into fields and the GCOS field apart into the real name (and other parts), this loop also splits apart the real name into a first name (and the rest). Once the first name is known, a hash element in <CODE
CLASS="literal"
>%seen</CODE
> is incremented, noting that we've seen a particular first name. Note that this loop doesn't do any <CODE
CLASS="literal"
>print</CODE
>'ing.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>foreach</CODE
> loop steps through all of the keys of <CODE
CLASS="literal"
>%seen</CODE
> (the first names from the password file), assigning each one to <CODE
CLASS="literal"
>$_</CODE
> in turn. If the value stored in <CODE
CLASS="literal"
>%seen</CODE
> at a given key is greater than 1, we've seen the first name more than once. The <CODE
CLASS="literal"
>if</CODE
> statement tests for this, and prints a message if so.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-178994"
></A
>One way to do this is:</P
><PRE
CLASS="programlisting"
>while (&lt;STDIN&gt;) {
    chomp;
    ($user, $gcos) = (split /:/)[0,4];
    ($real) = split /,/, $gcos;
    ($first) = split /\s+/, $real;
    $names{$first} .= &quot; $user&quot;;
}
foreach (keys %names) {
    $this = $names{$_};
    if ($this =~ /. /) {
        print &quot;$_ is used by:$this\n&quot;;
    }
}</PRE
><P
CLASS="para"
>This program is like the previous exercise answer, but instead of merely keeping a count, we append the login name of the user to the <CODE
CLASS="literal"
>%names</CODE
> element that has a key of the first name. Thus, for Fred Rogers (login <CODE
CLASS="literal"
>mrrogers</CODE
>), <CODE
CLASS="literal"
>$names{&quot;Fred&quot;}</CODE
> becomes <CODE
CLASS="literal"
>&quot;</CODE
> <CODE
CLASS="literal"
>mrrogers&quot;</CODE
>, and when Fred Flintstone (login <CODE
CLASS="literal"
>fred</CODE
>) comes along, we get <CODE
CLASS="literal"
>$names{&quot;Fred&quot;}</CODE
> as <CODE
CLASS="literal"
>&quot;</CODE
> <CODE
CLASS="literal"
>mrrogers</CODE
> <CODE
CLASS="literal"
>fred&quot;</CODE
>. After the loop is complete, we have a mapping of all of the first names to all of the users that have them.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>foreach</CODE
> loop, like the previous exercise answer, then steps through the resulting hash. However, rather than testing a hash element value for a number greater than one, we must see now if there is more than one login name in the value. We do this by saving the value into a scalar variable <CODE
CLASS="literal"
>$this</CODE
> and then seeing if the value has a space after any character. If so, the first name is shared, and the resulting message tells which logins share that first name.</P
></LI
></OL
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_05.htm"
TITLE="A.5 Chapter 6, Basic I/O"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: A.5 Chapter 6, Basic I/O"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_07.htm"
TITLE="A.7 Chapter 8, Functions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: A.7 Chapter 8, Functions"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>A.5 Chapter 6, Basic I/O</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>A.7 Chapter 8, Functions</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
