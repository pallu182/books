<HTML
><HEAD
>
<TITLE>[Chapter 1] 1.6 Control Structures</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:29:40Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. An Overview of Perl"><LINK
REL="prev"
HREF="ch01_05.htm"
TITLE="1.5 Operators"><LINK
REL="next"
HREF="ch01_07.htm"
TITLE="1.7 Regular Expressions"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch01_05.htm"
TITLE="1.5 Operators"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.5 Operators"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. An Overview of Perl"
>Chapter 1<BR>An Overview of Perl</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch01_07.htm"
TITLE="1.7 Regular Expressions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.7 Regular Expressions"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="PERL2-CH-1-SECT-6"
>1.6 Control Structures</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH01.CONTROL"
></A
>So far, except for our one large example, all of our examples have been
completely linear; we executed each command in order.  We've seen a few
examples of using the short circuit operators to cause a single command
to be (or not to be) executed.  While you can write some very useful
linear programs (a lot of CGI scripts fall into this category), you can
write much more powerful programs if you have conditional expressions
and looping mechanisms.  Collectively, these are known as control structures.
So you can also think of Perl as a control language.</P
><P
CLASS="para"
>But to have control, you have to be able to decide things, and to decide
things, you have to know the difference between what's true and what's false.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-1-SECT-6.1"
>1.6.1 What Is Truth?</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1252"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1255"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1258"
></A
>We've bandied about the term truth,[<A
CLASS="footnote"
HREF="#AUTOID-1261"
>23</A
>]
and we've mentioned that certain operators return a true or a false
value.  Before we go any further, we really ought to explain exactly
what we mean by that.  Perl treats truth a little differently than most
computer languages, but after you've worked with it awhile it will
make a lot of sense.  (Actually, we're hoping it'll make a lot of sense
after you've read the following.)</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-1261"
>[23]</A
> Strictly speaking, this is not true.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Basically, Perl holds truths to be self-evident.  That's a glib way of
saying that you can evaluate almost anything for its truth value.  Perl
uses practical definitions of truth that depend on the type of thing
you're evaluating.  As it happens, there are many more kinds of truth
than there are of nontruth.</P
><P
CLASS="para"
>Truth in Perl is always evaluated in a scalar context.  (Other than
that, no type coercion is done.)  So here are the rules for the various
kinds of values that a scalar can hold:</P
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Any string is true except for <CODE
CLASS="literal"
>&quot;&quot;</CODE
> and <CODE
CLASS="literal"
>&quot;0&quot;</CODE
>.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Any number is true except for 0.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Any reference is true.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Any undefined value is false.</P
></LI
></OL
><P
CLASS="para"
>Actually, the last two rules can be derived from the first two.  Any
reference (rule 3) points to something with an address, and would
evaluate to a number or string containing that address, which is never
0.  And any undefined value (rule 4) would always evaluate to 0 or the
null string.</P
><P
CLASS="para"
>And in a way, you can derive rule 2 from rule 1 if you pretend that
everything is a string.  Again, no coercion is actually done to evaluate
truth, but if a coercion to string <EM
CLASS="emphasis"
>were</EM
> done, then any numeric value
of 0 would simply turn into the string <CODE
CLASS="literal"
>&quot;0&quot;</CODE
>, and be false.  Any other
number would not turn into the string <CODE
CLASS="literal"
>&quot;0&quot;</CODE
>, and so would be true.  Let's
look at some examples so we can understand this better:</P
><PRE
CLASS="programlisting"
>0          # would become the string &quot;0&quot;, so false
1          # would become the string &quot;1&quot;, so true
10 - 10    # 10-10 is 0, would convert to string &quot;0&quot;, so false
0.00       # becomes 0, would convert to string &quot;0&quot;, so false
&quot;0&quot;        # the string &quot;0&quot;, so false
&quot;&quot;         # a null string, so false
&quot;0.00&quot;     # the string &quot;0.00&quot;, neither empty nor exactly &quot;0&quot;, so true
&quot;0.00&quot; + 0 # the number 0 (coerced by the +), so false.
\$a        # a reference to $a, so true, even if $a is false
undef()    # a function returning the undefined value, so false</PRE
><P
CLASS="para"
>Since we mumbled something earlier about truth being evaluated in a
scalar context, you might be wondering what the truth value of a list
is.  Well, the simple fact is, there <EM
CLASS="emphasis"
>is</EM
> no operation in Perl that will
return a list in a scalar context.  They all return a scalar value
instead, and then you apply the rules of truth to that scalar.  So
there's no problem, as long as you can figure out what any given
operator will return in a scalar context.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-1-SECT-6.1.1"
>1.6.1.1 The if and unless statements</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1287"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1289"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1292"
></A
>We saw earlier how a logic operator could function as a conditional.
A slightly more complex form of the logic operators is the <B
CLASS="emphasis.bold"
>if</B
>
statement.  The <B
CLASS="emphasis.bold"
>if</B
> statement evaluates a truth condition, and
executes a block if the condition is true.</P
><P
CLASS="para"
>A block is one or more statements grouped together by a set of
braces.  Since the <B
CLASS="emphasis.bold"
>if</B
> statement executes a block, the braces are
required by definition.  If you know a language like C, you'll notice
that this is different.  Braces are optional in C if you only have a
single line of code, but they are not optional in Perl.</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>if ($debug_level &gt; 0) {
    # Something has gone wrong.  Tell the user.
    print &quot;Debug: Danger, Will Robinson, danger!\n&quot;;
    print &quot;Debug: Answer was '54', expected '42'.\n&quot;;
}</PRE
></P
><P
CLASS="para"
>Sometimes, just executing a block when a condition is met isn't enough.
You may also want to execute a different block if that condition <EM
CLASS="emphasis"
>isn't</EM
>
met.  While you could certainly use two <B
CLASS="emphasis.bold"
>if</B
> statements, one the
negation of the other, Perl provides a more elegant solution.  After
the block, <B
CLASS="emphasis.bold"
>if</B
> can take an optional second condition, called <B
CLASS="emphasis.bold"
>else</B
>,
to be executed only if the truth condition is false.  (Veteran computer
programmers will not be surprised at this point.)</P
><P
CLASS="para"
>Other times, you may even have more than two possible choices.  In this
case, you'll want to add an <B
CLASS="emphasis.bold"
>elsif</B
> truth condition for the other
possible choices.  (Veteran computer programmers may well be surprised
by the spelling of &quot;elsif&quot;, for which nobody here is going to apologize.
Sorry.)</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>if ($city eq &quot;New York&quot;) {
    print &quot;New York is northeast of Washington, D.C.\n&quot;;
}
elsif ($city eq &quot;Chicago&quot;) {
    print &quot;Chicago is northwest of Washington, D.C.\n&quot;;
}
elsif ($city eq &quot;Miami&quot;) {
    print &quot;Miami is south of Washington, D.C.  And much warmer!\n&quot;;
}
else {
    print &quot;I don't know where $city is, sorry.\n&quot;;
}</PRE
></P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1311"
></A
>The <B
CLASS="emphasis.bold"
>if</B
> and <B
CLASS="emphasis.bold"
>elsif</B
> clauses are each computed in turn, until one
is found to be true or the <B
CLASS="emphasis.bold"
>else</B
> condition is reached.  When one of the
conditions is found to be true, its block is executed and all the
remaining branches are skipped.
Sometimes, you don't want to do anything if the condition is true, only if
it is false.  Using an empty <B
CLASS="emphasis.bold"
>if</B
> with an <B
CLASS="emphasis.bold"
>else</B
> may be messy, and
a negated <B
CLASS="emphasis.bold"
>if</B
> may be illegible; it sounds weird to say &quot;do something
if not this is true&quot;.  In these situations, you would use the <B
CLASS="emphasis.bold"
>unless</B
>
statement.</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>unless ($destination eq $home) {
    print &quot;I'm not going home.\n&quot;;
}</PRE
></P
><P
CLASS="para"
>There is no &quot;elsunless&quot; though.  This is generally construed as a feature.</P
></DIV
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-1-SECT-6.2"
>1.6.2 Iterative (Looping) Constructs</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1327"
></A
>Perl has four main iterative statement types: <B
CLASS="emphasis.bold"
>while</B
>, <B
CLASS="emphasis.bold"
>until</B
>,
<B
CLASS="emphasis.bold"
>for</B
>, and <B
CLASS="emphasis.bold"
>foreach</B
>. These statements allow a Perl program to
repeatedly execute the same code for different values.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-1-SECT-6.2.1"
>1.6.2.1 The while and until statements</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1336"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1338"
></A
>The <B
CLASS="emphasis.bold"
>while</B
> and <B
CLASS="emphasis.bold"
>until</B
> statements function similarly to the
<B
CLASS="emphasis.bold"
>if</B
> and <B
CLASS="emphasis.bold"
>unless</B
> statements, in a looping fashion.  First, the
conditional part of the statement is checked.  If the condition is met
(if it is true for a <B
CLASS="emphasis.bold"
>while</B
> or false for an <B
CLASS="emphasis.bold"
>until</B
>) the block of
the statement is executed.</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>while ($tickets_sold &lt; 10000) {
    $available = 10000 - $tickets_sold;
    print &quot;$available tickets are available.  How many would you like: &quot;;
    $purchase = &lt;STDIN&gt;;
    chomp($purchase);
    $tickets_sold += $purchase;
}</PRE
></P
><P
CLASS="para"
>Note that if the original condition is never met, the loop will never be
entered at all.  For example, if we've already sold 10,000 tickets, we
might want to have the next line of the program say something like:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>print &quot;This show is sold out, please come back later.\n&quot;;</PRE
></P
><P
CLASS="para"
>In our grade example earlier, line 4 reads:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>while ($line = &lt;GRADES&gt;) {</PRE
></P
><P
CLASS="para"
>This assigns the next line to the variable <CODE
CLASS="literal"
>$line</CODE
>, and as we explained
earlier, returns the value of <CODE
CLASS="literal"
>$line</CODE
> so that the condition of the
<B
CLASS="emphasis.bold"
>while</B
> statement can evaluate <CODE
CLASS="literal"
>$line</CODE
> for truth.  You might wonder
whether Perl will get a false negative on blank lines and exit the
loop prematurely.  The answer is that it won't.  The reason is clear, if
you think about everything we've said.  The line input operator leaves the
newline on the end of the string, so a blank line has the value <CODE
CLASS="literal"
>&quot;\n&quot;</CODE
>.
And you know that <CODE
CLASS="literal"
>&quot;\n&quot;</CODE
> is not one of the canonical false values.  So
the condition is true, and the loop continues even on blank lines.</P
><P
CLASS="para"
>On the other hand, when we finally do reach the end of the file, the
line input operator returns the undefined value, which always evaluates to
false.  And the loop terminates, just when we wanted it to.  There's no
need for an explicit test against the <A
CLASS="xref"
HREF="ch03_031.htm"
TITLE="eof"
><B
CLASS="xref.cmd"
>eof</B
></A
> function in Perl, because the
input operators are designed to work smoothly in a conditional context.</P
><P
CLASS="para"
>In fact, almost everything is designed to work smoothly in a conditional
context.  For instance, an array in a scalar context returns its length.
So you often see:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>while (@ARGV) {
    process(shift @ARGV);
}</PRE
></P
><P
CLASS="para"
>The loop automatically exits when <CODE
CLASS="literal"
>@ARGV</CODE
> is exhausted.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-1-SECT-6.2.2"
>1.6.2.2 The for statement</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1372"
></A
>Another iterative statement is the <B
CLASS="emphasis.bold"
>for</B
> loop.  A <B
CLASS="emphasis.bold"
>for</B
> loop
runs exactly like the <B
CLASS="emphasis.bold"
>while</B
> loop, but looks a good deal different.
(C programmers will find it very familiar though.)</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>for ($sold = 0; $sold &lt; 10000; $sold += $purchase) {
    $available = 10000 - $sold;
    print &quot;$available tickets are available.  How many would you like: &quot;;
    $purchase = &lt;STDIN&gt;;
    chomp($purchase);
}</PRE
></P
><P
CLASS="para"
>The <B
CLASS="emphasis.bold"
>for</B
> loop takes three expressions within the loop's parentheses:
an expression to set the initial state of the loop variable, a condition
to test the loop variable, and an expression to modify the state of the
loop variable.  When the loop starts, the initial state is set and the
truth condition is checked.  If the condition is true, the block is executed.  When
the block finishes, the modification expression is executed, the truth
condition is again checked, and if true, the block is rerun with the
new values.  As long as the truth condition remains true, the block and
the modification expression will continue to be executed.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-1-SECT-6.2.3"
>1.6.2.3 The foreach statement</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1384"
></A
>The last of Perl's main iterative statements is the <B
CLASS="emphasis.bold"
>foreach</B
> statement.
<B
CLASS="emphasis.bold"
>foreach</B
> is used to execute the same code for each of a known set of
scalars, such as an array:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>foreach $user (@users) {
    if (-f &quot;$home{$user}/.nexrc&quot;) {
        print &quot;$user is cool... they use a perl-aware vi!\n&quot;;
    }
}</PRE
></P
><P
CLASS="para"
>In a <B
CLASS="emphasis.bold"
>foreach</B
> statement, the expression in parentheses is evaluated to
produce a list.  Then each element of the list is aliased to the
loop variable in turn, and the block of code is executed once for
each element.  Note that the loop variable becomes a reference to
the element itself, 
rather than a copy of the element. Hence, modifying
the loop variable will modify the original array.</P
><P
CLASS="para"
>You find many more <B
CLASS="emphasis.bold"
>foreach</B
> loops in the typical Perl program than
<B
CLASS="emphasis.bold"
>for</B
> loops, because it's very easy in Perl to generate the lists
that <B
CLASS="emphasis.bold"
>foreach</B
> wants to iterate over.  A frequently seen idiom is
a loop to iterate over the sorted keys of a hash:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>foreach $key (sort keys %hash) {</PRE
></P
><P
CLASS="para"
>In fact, line 9 of our grade example does precisely that.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-1-SECT-6.2.4"
>1.6.2.4 Breaking out: next and last</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1402"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1404"
></A
>The <A
CLASS="xref"
HREF="ch03_099.htm"
TITLE="next"
><B
CLASS="xref.cmd"
>next</B
></A
> and <A
CLASS="xref"
HREF="ch03_081.htm"
TITLE="last"
><B
CLASS="xref.cmd"
>last</B
></A
> operators allow you to modify the flow of
your loop.  It is not at all uncommon to have a special case; you may want
to skip it, or you may want to quit when you encounter it.
For example, if you are dealing with
UNIX accounts, you may want to skip the system accounts (like root
or lp).  The <A
CLASS="xref"
HREF="ch03_099.htm"
TITLE="next"
><B
CLASS="xref.cmd"
>next</B
></A
> operator would allow you to skip to the end of your
current loop iteration, and start the next iteration.  The <A
CLASS="xref"
HREF="ch03_081.htm"
TITLE="last"
><B
CLASS="xref.cmd"
>last</B
></A
>
operator would allow you to skip to the end of your block, as if your test
condition had returned false.  This might be useful if, for
example, you are looking for a specific account and want to quit as soon as you
find it.</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>foreach $user (@users) {
    if ($user eq &quot;root&quot; or $user eq &quot;lp&quot;) {
        next;
    }
    if ($user eq &quot;special&quot;) {
        print &quot;Found the special account.\n&quot;;
        # do some processing
        last;
    }
}</PRE
></P
><P
CLASS="para"
>It's possible to break out of multi-level loops by labeling your loops
and specifying which loop you want to break out of.  Together
with statement modifiers (another form of conditional we haven't
talked about), this can make for very readable loop exits, if you
happen to think English is readable:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>LINE: while ($line = &lt;ARTICLE&gt;) {
    last LINE if $line eq &quot;\n&quot;; # stop on first blank line
    next LINE if $line =~ /^#/; # skip comment lines
    # your ad here
}</PRE
></P
><P
CLASS="para"
>You may be saying, &quot;Wait a minute, what's that funny <CODE
CLASS="literal"
>^#</CODE
> thing there
inside the leaning toothpicks?  That doesn't look much like English.&quot;
And you're right.  That's a pattern match containing a regular
expression (albeit a rather simple one).  And that's what the next
section is about.  Perl is above all a text processing language, and
regular expressions are at the heart of Perl's text processing.<A
CLASS="indexterm"
NAME="AUTOID-1417"
></A
></P
></DIV
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch01_05.htm"
TITLE="1.5 Operators"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.5 Operators"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch01_07.htm"
TITLE="1.7 Regular Expressions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.7 Regular Expressions"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.5 Operators</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.7 Regular Expressions</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
