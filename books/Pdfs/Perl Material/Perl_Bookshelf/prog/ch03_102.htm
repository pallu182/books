<HTML
><HEAD
>
<TITLE>[Chapter 3] 3.2.102 open</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:51:37Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_02.htm"
TITLE="3.2 Perl Functions in Alphabetical Order"><LINK
REL="prev"
HREF="ch03_101.htm"
TITLE="3.2.101 oct"><LINK
REL="next"
HREF="ch03_103.htm"
TITLE="3.2.103 opendir"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_101.htm"
TITLE="3.2.101 oct"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.101 oct"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. Functions"
>Chapter 3<BR>Functions</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_103.htm"
TITLE="3.2.103 opendir"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.103 opendir"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CMD-OPEN"
>3.2.102 open</A
></H3
><PRE
CLASS="programlisting"
>open <CODE
CLASS="replaceable"
><I
>FILEHANDLE</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>EXPR</I
></CODE
>
open <CODE
CLASS="replaceable"
><I
>FILEHANDLE</I
></CODE
></PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH03.OPEN1"
></A
><A
CLASS="indexterm"
NAME="CH03.OPEN2"
></A
><A
CLASS="indexterm"
NAME="CH03.OPEN3"
></A
>This function opens the file whose filename is given by <CODE
CLASS="replaceable"
><I
>EXPR</I
></CODE
>, and
associates it with <CODE
CLASS="replaceable"
><I
>FILEHANDLE</I
></CODE
>.  If <CODE
CLASS="replaceable"
><I
>EXPR</I
></CODE
> is omitted, the
scalar variable of the same name as the <CODE
CLASS="replaceable"
><I
>FILEHANDLE</I
></CODE
> must contain the
filename.  (And you must also be careful to use &quot;<CODE
CLASS="literal"
>or die</CODE
>&quot; after the
statement rather than &quot;<CODE
CLASS="literal"
>|| die</CODE
>&quot;, because the precedence of <CODE
CLASS="literal"
>||</CODE
>
is higher than list operators like <A
CLASS="xref"
HREF="ch03_102.htm"
TITLE="open"
><B
CLASS="xref.cmd"
>open</B
></A
>.)
<CODE
CLASS="replaceable"
><I
>FILEHANDLE</I
></CODE
> may be a directly specified filehandle name, or an
expression whose value will be used for the filehandle.  The latter is
called an indirect filehandle.  If you supply an undefined variable for the indirect
filehandle, Perl will not automatically fill it in for you&nbsp;- you
have to make sure the expression returns something unique, either
a string specifying the actual filehandle name, or a filehandle
object from one of the object-oriented I/O packages.  (A filehandle
object is unique because you call a constructor to generate the object.
See the example later in this section.)</P
><P
CLASS="para"
>After the filehandle is determined, the filename string is processed.  First,
any leading and trailing whitespace is removed from the string.
Then the string is examined on both ends for characters specifying how
the file is to be opened.  (By an amazing coincidence, these characters
look just like the characters you'd use to indicate I/O redirection to the
Bourne shell.)  If the filename begins with <CODE
CLASS="literal"
>&lt;</CODE
> or nothing, the file
is opened for input.  If the filename begins with <CODE
CLASS="literal"
>&gt;</CODE
>, the file
is truncated and opened for output.  If the filename begins with <CODE
CLASS="literal"
>&gt;&gt;</CODE
>, the
file is opened for appending.<A
CLASS="indexterm"
NAME="AUTOID-11430"
></A
><A
CLASS="indexterm"
NAME="AUTOID-11433"
></A
><A
CLASS="indexterm"
NAME="AUTOID-11436"
></A
>
(You can also put a <CODE
CLASS="literal"
>+</CODE
> in front of the <CODE
CLASS="literal"
>&gt;</CODE
> or <CODE
CLASS="literal"
>&lt;</CODE
> to
indicate that you want both read and write access to the file.)
If the filename begins with <CODE
CLASS="literal"
>|</CODE
>, the filename is interpreted as
a command to which output is to be piped, and if the filename ends
with a <CODE
CLASS="literal"
>|</CODE
>, the filename is interpreted as command which pipes
input to us.<A
CLASS="indexterm"
NAME="AUTOID-11444"
></A
>
You may not have an <B
CLASS="emphasis.bold"
>open</B
> command that pipes both
in and out, although 
the IPC::Open2 and IPC::Open3 library routines give you a close
equivalent.  See the section &quot;Bidirectional Communication&quot; in <A
CLASS="xref"
HREF="ch06_01.htm"
TITLE="Social Engineering"
>Chapter 6</A
>.</P
><P
CLASS="para"
>Any pipe command containing shell metacharacters is passed to
<EM
CLASS="emphasis"
>/bin/sh</EM
> for execution; otherwise it is executed directly by
Perl.  The filename &quot;<CODE
CLASS="literal"
>-</CODE
>&quot; refers to
<CODE
CLASS="literal"
>STDIN</CODE
>, and &quot;<CODE
CLASS="literal"
>&gt;-</CODE
>&quot; refers to
<CODE
CLASS="literal"
>STDOUT</CODE
>.  <A
CLASS="xref"
HREF="ch03_102.htm"
TITLE="open"
><B
CLASS="xref.cmd"
>open</B
></A
> returns
non-zero upon success, the undefined value otherwise.  If the <B
CLASS="emphasis.bold"
>open</B
> involved a pipe, the return value happens to be the
process ID of the subprocess.</P
><P
CLASS="para"
>If you're unfortunate enough to be running Perl on a system that
distinguishes between text files and binary files (modern operating
systems don't care), then you should check out <A
CLASS="xref"
HREF="ch03_008.htm"
TITLE="binmode"
><B
CLASS="xref.cmd"
>binmode</B
></A
> for tips<A
CLASS="indexterm"
NAME="AUTOID-11459"
></A
><A
CLASS="indexterm"
NAME="AUTOID-11461"
></A
><A
CLASS="indexterm"
NAME="AUTOID-11464"
></A
>
for dealing with this.  The key distinction between systems that need
<A
CLASS="xref"
HREF="ch03_008.htm"
TITLE="binmode"
><B
CLASS="xref.cmd"
>binmode</B
></A
> and those that don't is their text file formats.
Systems like UNIX and Plan9 that delimit lines with a single
character, and that encode that character in C as <CODE
CLASS="literal"
>'\n'</CODE
>, do
not need <A
CLASS="xref"
HREF="ch03_008.htm"
TITLE="binmode"
><B
CLASS="xref.cmd"
>binmode</B
></A
>.  The rest need it.</P
><P
CLASS="para"
>Here is some code that shows the relatedness of a filehandle and a
variable of the same name:</P
><PRE
CLASS="programlisting"
>$ARTICLE = &quot;/usr/spool/news/comp/lang/perl/misc/38245&quot;;
open ARTICLE or die &quot;Can't find article $ARTICLE: $!\n&quot;;
while (&lt;ARTICLE&gt;) {...</PRE
><P
CLASS="para"
>Append to a file like this:</P
><PRE
CLASS="programlisting"
>open LOG, '&gt;&gt;/usr/spool/news/twitlog'; # (`log' is reserved)</PRE
><P
CLASS="para"
>Pipe your data from a process:</P
><PRE
CLASS="programlisting"
>open ARTICLE, &quot;caesar &lt;$article |&quot;;   # decrypt article with rot13</PRE
><P
CLASS="para"
>Here <CODE
CLASS="literal"
>&lt;</CODE
> does not indicate that Perl should open the file for input,
because <CODE
CLASS="literal"
>&lt;</CODE
>
is not the first character of <CODE
CLASS="replaceable"
><I
>EXPR</I
></CODE
>.  Rather, the concluding
<CODE
CLASS="literal"
>|</CODE
> indicates that input is to be piped from <CODE
CLASS="literal"
>caesar &lt;$article</CODE
> (from
the program <EM
CLASS="emphasis"
>caesar</EM
>, which takes <EM
CLASS="emphasis"
>$article</EM
> as its standard
input).
The <CODE
CLASS="literal"
>&lt;</CODE
> is interpreted by the subshell that Perl uses to start
the pipe, because <CODE
CLASS="literal"
>&lt;</CODE
> is a shell metacharacter.</P
><P
CLASS="para"
>Or pipe your data to a process:</P
><PRE
CLASS="programlisting"
>open EXTRACT, &quot;|sort &gt;/tmp/Tmp$$&quot;;    # $$ is our process number</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11489"
></A
>In this next example we show one way to do recursive opens, via
indirect filehandles.  The files will be opened on filehandles
<CODE
CLASS="literal"
>fh01</CODE
>, <CODE
CLASS="literal"
>fh02</CODE
>, <CODE
CLASS="literal"
>fh03</CODE
>, and so on.  Because <CODE
CLASS="literal"
>$input</CODE
> is
a local variable, it is preserved through recursion, allowing us to
close the correct file before we return.</P
><PRE
CLASS="programlisting"
># Process argument list of files along with any includes.

foreach $file (@ARGV) {
    process($file, 'fh00');
}

sub process {
    local($filename, $input) = @_;
    $input++;               # this is a string increment
    unless (open $input, $filename) {
        print STDERR &quot;Can't open $filename: $!\n&quot;;
        return;
    }
    while (&lt;$input&gt;) {      # note the use of indirection
        if (/^#include &quot;(.*)&quot;/) {
            process($1, $input);
            next;
        }
        ...               # whatever
    }
    close $input;
}</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11498"
></A
>You may also, in the Bourne shell tradition, specify an <CODE
CLASS="replaceable"
><I
>EXPR</I
></CODE
> beginning
with <CODE
CLASS="literal"
>&gt;&amp;</CODE
>, in which case the rest of the string is interpreted
as the name of a filehandle (or file descriptor, if numeric) which is
to be duped and opened.[<A
CLASS="footnote"
HREF="#AUTOID-11503"
>6</A
>]
You may use <CODE
CLASS="literal"
>&amp;</CODE
> after <CODE
CLASS="literal"
>&gt;</CODE
>, <CODE
CLASS="literal"
>&gt;&gt;</CODE
>, <CODE
CLASS="literal"
>&lt;</CODE
>, <CODE
CLASS="literal"
>+&gt;</CODE
>,
<CODE
CLASS="literal"
>+&gt;&gt;</CODE
>, and <CODE
CLASS="literal"
>+&lt;</CODE
>.  The mode you specify should match the mode
of the original filehandle.  Here is a script that saves, redirects,
and restores <CODE
CLASS="literal"
>STDOUT</CODE
> and <CODE
CLASS="literal"
>STDERR</CODE
>:</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-11503"
>[6]</A
> The word &quot;dup&quot; is UNIX-speak for &quot;duplicate&quot;.  We're not really trying
to dupe you.  Trust us.</P
></DIV
></BLOCKQUOTE
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
open SAVEOUT, &quot;&gt;&amp;STDOUT&quot;;
open SAVEERR, &quot;&gt;&amp;STDERR&quot;;

open STDOUT, &quot;&gt;foo.out&quot; or die &quot;Can't redirect stdout&quot;;
open STDERR, &quot;&gt;&amp;STDOUT&quot; or die &quot;Can't dup stdout&quot;;

select STDERR; $| = 1;         # make unbuffered
select STDOUT; $| = 1;         # make unbuffered

print STDOUT &quot;stdout 1\n&quot;;     # this propagates to
print STDERR &quot;stderr 1\n&quot;;     # subprocesses too

close STDOUT;
close STDERR;

open STDOUT, &quot;&gt;&amp;SAVEOUT&quot;;
open STDERR, &quot;&gt;&amp;SAVEERR&quot;;

print STDOUT &quot;stdout 2\n&quot;;
print STDERR &quot;stderr 2\n&quot;;</PRE
><P
CLASS="para"
>If you specify <CODE
CLASS="literal"
>&lt;&amp;=</CODE
><CODE
CLASS="replaceable"
><I
>N</I
></CODE
>, where
<CODE
CLASS="replaceable"
><I
>N</I
></CODE
> is a number, then Perl will do an equivalent of C's
<EM
CLASS="emphasis"
>fdopen</EM
>(3) of that file descriptor; this is more
parsimonious with file descriptors than the dup form described earlier.  (On the
other hand, it's more dangerous, since two filehandles may now be sharing the
same file descriptor, and a close on one filehandle may prematurely close the
other.)  For example:</P
><PRE
CLASS="programlisting"
>open <CODE
CLASS="replaceable"
><I
>FILEHANDLE</I
></CODE
>, &quot;&lt;&amp;=$fd&quot;;</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11523"
></A
><A
CLASS="indexterm"
NAME="AUTOID-11525"
></A
><A
CLASS="indexterm"
NAME="AUTOID-11528"
></A
>If you open a
pipe to or from the command &quot;<CODE
CLASS="literal"
>-</CODE
>&quot; (that is, either
<CODE
CLASS="literal"
>|-</CODE
> or <CODE
CLASS="literal"
>-|</CODE
>), then an implicit fork is done,
and the return value of <B
CLASS="emphasis.bold"
>open</B
> is the pid of the
child within the parent process, and <CODE
CLASS="literal"
>0</CODE
> within the child
process.  (Use <CODE
CLASS="literal"
>defined($pid)</CODE
> in either the parent or child to
determine whether the <B
CLASS="emphasis.bold"
>open</B
> was successful.)  The
filehandle behaves normally for the parent, but input and output to that
filehandle is piped from or to the <CODE
CLASS="literal"
>STDOUT</CODE
> or
<CODE
CLASS="literal"
>STDIN</CODE
> of the child process.  In the child process the
filehandle isn't opened&nbsp;- I/O happens from or to the new
<CODE
CLASS="literal"
>STDIN</CODE
> or <CODE
CLASS="literal"
>STDOUT</CODE
>.  Typically this is used
like the normal piped <B
CLASS="emphasis.bold"
>open</B
> when you want to
exercise more control over just how the pipe command gets executed, such as when
you are running setuid, and don't want to have to scan shell commands for
metacharacters.  The following pairs are equivalent:</P
><PRE
CLASS="programlisting"
>open FOO, &quot;|tr '[a-z]' '[A-Z]'&quot;;
open FOO, &quot;|-&quot; or exec 'tr', '[a-z]', '[A-Z]';

open FOO, &quot;cat -n file|&quot;;
open FOO, &quot;-|&quot; or exec 'cat', '-n', 'file';</PRE
><P
CLASS="para"
>Explicitly closing any piped filehandle causes the parent process to
wait for the child to finish, and returns the status value in
<B
CLASS="emphasis.bold"
>$?</B
>.  On any operation which may do a fork, unflushed
buffers remain unflushed in both processes, which means you may need
to set <B
CLASS="emphasis.bold"
>$|</B
> on one or more filehandles to avoid duplicate output
(and then do output to flush them).</P
><P
CLASS="para"
>Filehandles <CODE
CLASS="literal"
>STDIN</CODE
>, <CODE
CLASS="literal"
>STDOUT</CODE
>, and <CODE
CLASS="literal"
>STDERR</CODE
> remain open
following an exec.  Other filehandles do not.  (However, on systems
supporting the <A
CLASS="xref"
HREF="ch03_037.htm"
TITLE="fcntl"
><B
CLASS="xref.cmd"
>fcntl</B
></A
> function, you may modify the
close-on-exec flag for a filehandle. See <A
CLASS="xref"
HREF="ch03_037.htm"
TITLE="fcntl"
><B
CLASS="xref.cmd"
>fcntl</B
></A
> earlier in
this chapter.  See also the special <B
CLASS="emphasis.bold"
>$^F</B
> variable.)</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11555"
></A
><A
CLASS="indexterm"
NAME="AUTOID-11559"
></A
>Using the constructor from the
FileHandle module, described in <A
CLASS="xref"
HREF="ch07_01.htm"
TITLE="The Standard Perl Library"
>Chapter 7</A
>,
you can generate anonymous filehandles which have the scope of whatever
variables hold references to them, and automatically close whenever
and however you leave that scope:</P
><PRE
CLASS="programlisting"
>use FileHandle;
...
sub read_myfile_munged {
    my $ALL = shift;
    my $handle = new FileHandle;
    open $handle, &quot;myfile&quot; or die &quot;myfile: $!&quot;;
    $first = &lt;$handle&gt; or return ();      # Automatically closed here.
    mung $first or die &quot;mung failed&quot;;     # Or here.
    return $first, &lt;$handle&gt; if $ALL;     # Or here.
    $first;                               # Or here.
}</PRE
><P
CLASS="para"
>In order to open a file with arbitrary weird characters in it, it's necessary
to protect any leading and trailing whitespace, like this:</P
><PRE
CLASS="programlisting"
>$file =~ s#^(\s)#./$1#;
open (FOO, &quot;&lt; $file\0&quot;);</PRE
><P
CLASS="para"
>But we've never actually seen anyone use that in a script...</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-11567"
></A
>If you want a real C <EM
CLASS="emphasis"
>open</EM
>(2), then
you should use the <A
CLASS="xref"
HREF="ch03_165.htm"
TITLE="sysopen"
><B
CLASS="xref.cmd"
>sysopen</B
></A
> function.  This is another way to
protect your filenames from interpretation.  For example:</P
><PRE
CLASS="programlisting"
>use FileHandle;
sysopen HANDLE, $path, O_RDWR|O_CREAT|O_EXCL, 0700
    or die &quot;sysopen $path: $!&quot;;
HANDLE-&gt;autoflush(1);
HANDLE-&gt;print(&quot;stuff $$\n&quot;);
seek HANDLE, 0, 0;
print &quot;File contains: &quot;, &lt;HANDLE&gt;;</PRE
><P
CLASS="para"
>See <A
CLASS="xref"
HREF="ch03_132.htm"
TITLE="seek"
><B
CLASS="xref.cmd"
>seek</B
></A
> for some details about mixing reading and writing.<A
CLASS="indexterm"
NAME="AUTOID-11574"
></A
><A
CLASS="indexterm"
NAME="AUTOID-11575"
></A
><A
CLASS="indexterm"
NAME="AUTOID-11576"
></A
></P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_101.htm"
TITLE="3.2.101 oct"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.101 oct"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_103.htm"
TITLE="3.2.103 opendir"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.103 opendir"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.2.101 oct</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.2.103 opendir</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
