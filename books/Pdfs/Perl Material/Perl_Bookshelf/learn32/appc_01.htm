<HTML
><HEAD
>
<TITLE>[Appendix C] Networking Clients</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl on Win32 Systems"><META
NAME="DC.creator"
CONTENT="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:38:15Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-324-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"><LINK
REL="prev"
HREF="appb_04.htm"
TITLE="B.4 Win32 Extensions"><LINK
REL="next"
HREF="appc_02.htm"
TITLE="C.2 A Webget Client"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl on Win32 Systems"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl on Win32 Systems"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/wsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appb_04.htm"
TITLE="B.4 Win32 Extensions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: B.4 Win32 Extensions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Appendix C</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appc_02.htm"
TITLE="C.2 A Webget Client"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: C.2 A Webget Client"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="appendix"
><H1
CLASS="appendix"
><A
CLASS="title"
NAME="appc-38399"
>C. Networking Clients</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#appc-pgfId-48"
TITLE="C.1 A Simple Client"
>A Simple Client</A
><BR><A
CLASS="sect1"
HREF="appc_02.htm"
TITLE="C.2 A Webget Client"
>A Webget Client</A
></P
><P
></P
></DIV
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="appc-idx-1000003035-0"
></A
><A
CLASS="indexterm"
NAME="appc-idx-1000003035-1"
></A
>Few computers (or computer users, for that matter) are content to remain isolated from the rest of the world. Networking, once mostly limited to government research labs and computer science departments at major universities, is now available to virtually everyone, even home computer users with a modem and dial-up SLIP or PPP service. More than ever, networking is now used daily by organizations and individuals from every walk of life. They use networking to exchange email, schedule meetings, manage distributed databases, access company information, grab weather reports, pull down today's news, chat with someone in a different hemisphere, or advertise their company on the Web. </P
><P
CLASS="para"
>These diverse applications all share one thing in common: they use <A
CLASS="indexterm"
NAME="appc-idx-1000003043-0"
></A
>TCP networking, the fundamental protocol that links the Net together.[<A
CLASS="footnote"
HREF="#appc-pgfId-1000000715"
>1</A
>] And we don't just mean the Internet, either. Firewalls aside, the underlying technology is the same whether you're connecting far across the Internet, between your corporate offices, or from your kitchen down to your basement. As a result, you only have to learn one technology for all sorts of application areas. </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="appc-pgfId-1000000715"
>[1]</A
> Actually, IP (Internet Protocol) ties the Internet together, but TCP/IP is just a layer on top of IP. </P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>How can you use networking to let an application on one machine talk to a different application, possibly on a totally different machine? With Perl, it's pretty easy, but first you should probably know a little bit about how the TCP networking model works. </P
><P
CLASS="para"
>Even if you've never touched a computer network before in your whole life, you already know another connection-based system: the telephone system. Don't let fancy words like "client-server programming" put you off. When you see the word "client," think "caller"; when you see the word "server," think "responder." If you ring someone up on the telephone, you are the client. Whoever picks up the phone at the other end is the server. </P
><P
CLASS="para"
>Programmers with a background in C programming may be familiar with <EM
CLASS="emphasis"
>sockets</EM
><A
CLASS="indexterm"
NAME="appc-idx-1000003044-0"
></A
>. A socket is the interface to the network in the same sense that a filehandle is the interface to files in the filesystem. In fact, for the simple stream-based clients we're going to demonstrate below, you can use a socket handle just as you would a filehandle.[<A
CLASS="footnote"
HREF="#appc-pgfId-1000000730"
>2</A
>] </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="appc-pgfId-1000000730"
>[2]</A
> Well, almost; you can't seek on a socket. </P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>You can read from the socket, write to it, or both. That's because a socket is a special kind of bidirectional filehandle representing a network connection. Unlike normal files created via <CODE
CLASS="literal"
>open</CODE
>, sockets are created using the low-level <CODE
CLASS="literal"
>socket</CODE
> function. </P
><P
CLASS="para"
>Let's squeeze a little more mileage out of our telephone model. When you call into a big company's telephone switchboard, you can ask for a particular department by one name or another (such as Personnel or Human Resources), or by an exact number (like extension 213). Think of each service running on a computer as a department in a large corporation. Sometimes a particular service has several different names, such as both <EM
CLASS="emphasis"
>http</EM
> and <EM
CLASS="emphasis"
>www</EM
>, but only one number, such as 80. That number associated with a particular service name is its <EM
CLASS="emphasis"
>port</EM
><A
CLASS="indexterm"
NAME="appc-idx-1000003045-0"
></A
>. The Perl functions <CODE
CLASS="literal"
>getservbyname</CODE
><A
CLASS="indexterm"
NAME="appc-idx-1000003046-0"
></A
> and <CODE
CLASS="literal"
>getservbyport</CODE
><A
CLASS="indexterm"
NAME="appc-idx-1000003047-0"
></A
> can be used to look up a service name given its port number, or vice versa. <A
CLASS="xref"
HREF="appc_01.htm#appc-40895"
TITLE="Standard TCP Services and Their Port Numbers"
>Table C.1</A
> lists some standard TCP services and their port numbers. </P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="appc-40895"
>Table C.1: Standard TCP Services and Their Port Numbers</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Service</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Port</P
></TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Purpose</P
></TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>echo</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>7</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Accepts all input and echoes it back </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>discard</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>9</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Accepts anything but does nothing with it </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>daytime</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>13</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Returns the current date and time in local format </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>ftp</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>21</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Server for file-transfer requests </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>telnet</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>23</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Server for interactive telnet sessions </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>smtp</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>25</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Simple mail transfer protocol; the mailer daemon </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>time</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>37</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>Return number of seconds since 1900 (in binary) </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>http</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>80</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The World Wide Web server </P
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>nntp</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>119</P
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><P
CLASS="para"
>The news server </P
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Although sockets were originally developed for Berkeley UNIX, the overwhelming popularity of the Internet has induced virtually all operating-systems vendors to include socket support for client-server programming. For this book, directly using the <CODE
CLASS="literal"
>socket</CODE
> function is a bit low level. We recommend that you use the more user-friendly <CODE
CLASS="literal"
>IO::Socket module</CODE
><A
CLASS="indexterm"
NAME="appc-idx-1000003048-0"
></A
><A
CLASS="indexterm"
NAME="appc-idx-1000003048-1"
></A
>,[<A
CLASS="footnote"
HREF="#appc-pgfId-1000002553"
>3</A
>] which we'll use in all our sample code. Consequently, we'll also be employing some of Perl's object-oriented constructs. For a brief introduction to these constructs, see <A
CLASS="xref"
HREF="ch18_01.htm"
TITLE="CGI Programming"
>Chapter 18, <CITE
CLASS="chapter"
>CGI Programming</CITE
></A
>. The <EM
CLASS="emphasis"
>perltoot</EM
> documentation (starting with Perl 5.004) and <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>Chapter 5</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> offer a more complete introduction to object-oriented programming in Perl.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="appc-pgfId-1000002553"
>[3]</A
> <CODE
CLASS="literal"
>IO::Socket</CODE
> is included as part of the standard Perl distribution as of the 5.004 release and the current ActiveState at the time of this writing. If you're running an earlier version of Perl, just fetch <CODE
CLASS="literal"
>IO::Socket</CODE
> from CPAN.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>We don't have the space in this book to provide a full TCP/IP tutorial, but we can at least present a few simple clients. For servers, which are a bit more complicated, see <A
CLASS="olink"
HREF="../prog/ch06_01.htm"
>Chapter 6</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>. Generally speaking, writing servers in Perl on Windows NT is a difficult task because Perl doesn't currently offer support for threads, and there's no easy way to implement support for multiple simultaneous clients. This may change in the future, so stay tuned for future Perl releases.</P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="appc-pgfId-48"
>C.1 A Simple Client</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="appc-idx-1000003049-0"
></A
>For our simplest client, we'll choose a rather boring service, called "daytime." The daytime server sends a connecting client one line of data containing the time of day on that remote server, then closes the connection. </P
><P
CLASS="para"
>Here's the client: </P
><PRE
CLASS="programlisting"
>use IO::Socket;
$remote = IO::Socket::INET-&gt;new(
 Proto =&gt; &quot;tcp&quot;,
 PeerAddr =&gt; &quot;localhost&quot;,
 PeerPort =&gt; &quot;daytime(13)&quot;,
 )
 or die &quot;cannot connect to daytime port at localhost&quot;;
while ( &lt;$remote&gt; ) { print }</PRE
><P
CLASS="para"
>When you run this program, you should get something back that looks like this: </P
><PRE
CLASS="programlisting"
>Thu May 8 11:57:15 1997</PRE
><P
CLASS="para"
>Here are what those parameters to the <CODE
CLASS="literal"
>new</CODE
> constructor mean: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>Proto</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The protocol to use. In this case, the socket handle returned will be connected to a TCP socket, because we want a stream-oriented connection, that is, one that acts pretty much like a plain old file. Not all sockets are of this type. For example, the UDP protocol can be used to make a datagram socket, used for message-passing. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>PeerAddr</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name or Internet address of the remote host the server is running on. We could have specified a longer name like <EM
CLASS="emphasis"
>www.perl.com</EM
>, or an address like <EM
CLASS="emphasis"
>204.148.40.9</EM
>. For demonstration purposes, we've used the special hostname <CODE
CLASS="literal"
>localhost</CODE
>, which should always mean the current machine you're running on. The corresponding Internet address for localhost is <EM
CLASS="emphasis"
>127.0.0.1</EM
>, if you'd rather use that. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>PeerPort</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>This is the service name or port number we'd like to connect to. We could have gotten away with using just <CODE
CLASS="literal"
>daytime</CODE
> on systems with a well-configured system services file,[<A
CLASS="footnote"
HREF="#appc-pgfId-1000001116"
>4</A
>] but just in case, we've specified the port number (13) in parentheses. Using just the number would also have worked, but numbers as constants make careful programmers nervous. </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="appc-pgfId-1000001116"
>[4]</A
> The system services file is in <EM
CLASS="emphasis"
>%windir%/system32/drivers/etc/services</EM
> under Windows NT.</P
></DIV
></BLOCKQUOTE
></DD
></DL
><P
CLASS="para"
>Notice how the return value from the <CODE
CLASS="literal"
>new</CODE
> constructor is used as a filehandle in the <CODE
CLASS="literal"
>while</CODE
> loop? That example is an indirect filehandle, which is a scalar variable containing a filehandle. You can use this filehandle as you would a normal filehandle. For example, you can read one line from it this way: </P
><PRE
CLASS="programlisting"
>$line = &lt;$handle&gt;;</PRE
><P
CLASS="para"
>Or all remaining lines from it this way: </P
><PRE
CLASS="programlisting"
>@lines = &lt;$handle&gt;;</PRE
><P
CLASS="para"
>And send a line of data to it this way: </P
><PRE
CLASS="programlisting"
>print $handle &quot;some data\n&quot;;<A
CLASS="indexterm"
NAME="appc-idx-1000003050-0"
></A
></PRE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appb_04.htm"
TITLE="B.4 Win32 Extensions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: B.4 Win32 Extensions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl on Win32 Systems"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appc_02.htm"
TITLE="C.2 A Webget Client"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: C.2 A Webget Client"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>B.4 Win32 Extensions</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>C.2 A Webget Client</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
