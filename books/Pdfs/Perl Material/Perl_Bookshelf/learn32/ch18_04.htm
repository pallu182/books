<HTML
><HEAD
>
<TITLE>[Chapter 18] 18.4 Passing Parameters via CGI</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl on Win32 Systems"><META
NAME="DC.creator"
CONTENT="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:36:50Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-324-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch18_01.htm"
TITLE="18. CGI Programming"><LINK
REL="prev"
HREF="ch18_03.htm"
TITLE="18.3 Simplest CGI Program"><LINK
REL="next"
HREF="ch18_05.htm"
TITLE="18.5 Creating a Guestbook Program"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl on Win32 Systems"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl on Win32 Systems"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/wsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_03.htm"
TITLE="18.3 Simplest CGI Program"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.3 Simplest CGI Program"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch18_01.htm"
TITLE="18. CGI Programming"
>Chapter 18<BR><A
CLASS="indexterm"
NAME="ch18-idx-87413-0"
></A
>CGI Programming</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_05.htm"
TITLE="18.5 Creating a Guestbook Program"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.5 Creating a Guestbook Program"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch18-23111"
>18.4 Passing Parameters via CGI</A
></H2
><P
CLASS="para"
>You don't need a form to pass a parameter to (most) CGI programs. This feature is convenient because it lets programs be called via simple links, not just by full-blown forms. To test this out, take the original URL and add a question mark followed by the parameter name, an equal sign, and the value desired. For example, the following URL would call the <EM
CLASS="emphasis"
>ice_cream</EM
> script with the <CODE
CLASS="literal"
>flavor</CODE
> parameter set to the value <CODE
CLASS="literal"
>mint</CODE
>: </P
><PRE
CLASS="programlisting"
><CODE
CLASS="literal"
>http://www.SOMEWHERE.org/cgi-bin/ice_cream.plx?flavor=mint</CODE
></PRE
><P
CLASS="para"
>When you point your browser at this URL, the browser not only requests the web server to invoke the <EM
CLASS="emphasis"
>ice_cream.plx</EM
> program, but it also passes the string <CODE
CLASS="literal"
>flavor=mint</CODE
> to the program. Now it's up to the program to read the argument string and pick it apart. Doing this properly is not as easy as you might think. Many programs try to wing it and parse the request on their own, but most hand-rolled algorithms only work some of the time. Given how hard it is to get it right in all cases, you probably shouldn't try to write your own code, especially when perfectly fine modules already handle the tricky parsing business for you. </P
><P
CLASS="para"
>Enter the <EM
CLASS="emphasis"
>CGI.pm</EM
> module, which always parses the incoming CGI request correctly. To pull this module into your program, merely say: </P
><PRE
CLASS="programlisting"
><CODE
CLASS="literal"
>use CGI;</CODE
></PRE
><P
CLASS="para"
>somewhere near the top of your program.[<A
CLASS="footnote"
HREF="#ch18-pgfId-86667"
>5</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch18-pgfId-86667"
>[5]</A
> All Perl modules end in the suffix<EM
CLASS="emphasis"
> .pm</EM
>; in fact, the <CODE
CLASS="literal"
>use</CODE
> statement assumes this suffix. You can learn how to build your own modules in <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>Chapter 5</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> or the <EM
CLASS="emphasis"
>perlmod</EM
>  documentation. </P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>use</CODE
><A
CLASS="indexterm"
NAME="ch18-idx-89253-0"
></A
> statement is somewhat like a <CODE
CLASS="literal"
>#include</CODE
> statement in C programming in that it pulls in code from another file at compile time. But it also allows optional arguments specifying which functions and variables you'd like to access from that module. Put those in a list following the module name in the <CODE
CLASS="literal"
>use</CODE
> statement. You can then access the named functions and variables as if they were your own. </P
><P
CLASS="para"
>In this case, all we need to use from <EM
CLASS="emphasis"
>CGI.pm</EM
> is the <CODE
CLASS="literal"
>param()</CODE
> function.[<A
CLASS="footnote"
HREF="#ch18-pgfId-86672"
>6</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch18-pgfId-86672"
>[6]</A
> Some modules automatically export all their functions, but because <EM
CLASS="emphasis"
>CGI.pm</EM
> is really an object module masquerading as a traditional module, we have to ask for its functions explicitly. </P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>If given no arguments, <CODE
CLASS="literal"
>param()</CODE
> returns a list of all the fields that were in the HTML form that this CGI script is responding to. (In the current example, this list contains the <CODE
CLASS="literal"
>flavor</CODE
> field. In general, the list contains all the names in <CODE
CLASS="literal"
>name</CODE
>=<CODE
CLASS="literal"
>value</CODE
> strings received from the submitted form.) If given an argument naming a field, <CODE
CLASS="literal"
>param()</CODE
> returns the value (or values) associated with that field. Therefore, <CODE
CLASS="literal"
>param(&quot;flavor&quot;)</CODE
> returns <CODE
CLASS="literal"
>&quot;mint&quot;</CODE
>, because we passed in <CODE
CLASS="literal"
>?flavor=mint</CODE
> at the end of the URL. </P
><P
CLASS="para"
>Even though we have only one item in our import list for <CODE
CLASS="literal"
>use</CODE
>, we'll employ the <A
CLASS="indexterm"
NAME="ch18-idx-89252-0"
></A
><CODE
CLASS="literal"
>qw()</CODE
> notation; this way it will be easier to expand the list later: </P
><PRE
CLASS="programlisting"
># ice_cream.plx: program to answer ice cream 
# favorite flavor form (version 1)
use CGI qw(param);

print &lt;&lt;END_of_Start;
Content-type: text/html

&lt;HTML&gt;
 &lt;HEAD&gt;
 &lt;TITLE&gt;Hello World&lt;/TITLE&gt;
 &lt;/HEAD&gt;
 &lt;BODY&gt;
 &lt;H1&gt;Greetings, Terrans!&lt;/H1&gt;
END_of_Start

my $favorite = param(&quot;flavor&quot;);
print &quot;&lt;P&gt;Your favorite flavor is $favorite.&quot;;
print &lt;&lt;All_Done;
 &lt;/BODY&gt;
&lt;/HTML&gt;
<CODE
CLASS="literal"
>All_Done</CODE
></PRE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-17705"
>18.4.1 Less Typing</A
></H3
><P
CLASS="para"
>That's still a lot of typing. Luckily, <EM
CLASS="emphasis"
>CGI.pm</EM
> includes a whole slew of convenience functions for simplifying this. Each of these routines returns a string for you to output. For example, <CODE
CLASS="literal"
>header()</CODE
> returns a string containing the <CODE
CLASS="literal"
>Content-type</CODE
> line with a following blank line, <CODE
CLASS="literal"
>start_html(</CODE
><CODE
CLASS="replaceable"
><I
>string</I
></CODE
>) returns <CODE
CLASS="replaceable"
><I
>string</I
></CODE
> as an HTML title, <CODE
CLASS="literal"
>h1(</CODE
><CODE
CLASS="replaceable"
><I
>string</I
></CODE
><CODE
CLASS="literal"
>)</CODE
> returns <CODE
CLASS="literal"
>string</CODE
> as a first-level HTML heading, and <CODE
CLASS="literal"
>p(</CODE
><CODE
CLASS="replaceable"
><I
>string</I
></CODE
>) returns <CODE
CLASS="replaceable"
><I
>string</I
></CODE
> as a new HTML paragraph. </P
><P
CLASS="para"
>We could list all these functions in the import list given with <CODE
CLASS="literal"
>use</CODE
>, but that would eventually grow too unwieldy. However, <EM
CLASS="emphasis"
>CGI.pm</EM
>, like many modules, provides you with <EM
CLASS="emphasis"
>import tags</EM
>&nbsp;- labels that stand for groups of functions to import. You simply place the desired tags (each of which begins with a colon) at the beginning of your import list. The tags available with <EM
CLASS="emphasis"
>CGI.pm</EM
> include these: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>:cgi</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Import all argument-handling methods, such as <CODE
CLASS="literal"
>param()</CODE
>. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>:form</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Import all fill-out form generating methods, such as <CODE
CLASS="literal"
>textfield()</CODE
>. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>:html2</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Import all methods that generate HTML 2.0 standard elements. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>:html3</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Import all methods that generate HTML 3.0 proposed elements (such as <CODE
CLASS="literal"
>&lt;table&gt;</CODE
>, <CODE
CLASS="literal"
>&lt;super&gt;</CODE
>, and <CODE
CLASS="literal"
>&lt;sub&gt;</CODE
>). </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>:netscape</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Import all methods that generate Netscape-specific HTML extensions. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>:shortcuts</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Import all HTML-generating shortcuts (that is, "html2" + "html3" + "netscape").</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>:standard</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Import "standard" features: "html2," "form," and "cgi." </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>:all</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Import all the available methods. For the full list, see the <EM
CLASS="emphasis"
>CGI.pm</EM
> module, where the variable <CODE
CLASS="literal"
>%TAGS</CODE
> is defined. </P
></DD
></DL
><P
CLASS="para"
>We'll just use <CODE
CLASS="literal"
>:standard</CODE
>. (For more information about importing functions and variables from modules, see <A
CLASS="olink"
HREF="../prog/ch07_015.htm"
>the Exporter module</A
> in <A
CLASS="olink"
HREF="../prog/ch07_01.htm"
>Chapter 7</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>.) </P
><P
CLASS="para"
>Here's our program using all the shortcuts CGI.pm provides: </P
><PRE
CLASS="programlisting"
># cgi-bin/ice_cream.plx: program to answer ice cream
# favorite flavor form (version 2)
use CGI qw(:standard);
print header(), start_html(&quot;Hello World&quot;), h1(&quot;Hello World&quot;);
my $favorite = param(&quot;flavor&quot;);
print p(&quot;Your favorite flavor is $favorite.&quot;);
print end_html();</PRE
><P
CLASS="para"
>See how much easier that is? You don't have to worry about form decoding, headers, or HTML if you don't want to. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-37886"
>18.4.2 Form Generation</A
></H3
><P
CLASS="para"
>Perhaps you're tired of typing your program's parameter to your browser. Just make a fill-out form instead, which is what most folks are used to. The parts of the form that accept user input are typically called <EM
CLASS="emphasis"
>widgets</EM
>, a much handier term than graphical input devices. Form widgets include single- and multiline textfields, pop-up menus, scrolling lists, and various kinds of buttons and checkboxes. </P
><P
CLASS="para"
>Create the following HTML page, which includes a form with one textfield widget and a submit button. When the user clicks on the submit button,[<A
CLASS="footnote"
HREF="#ch18-pgfId-86728"
>7</A
>] the <EM
CLASS="emphasis"
>ice_cream</EM
> script specified in the ACTION tag will be called: </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch18-pgfId-86728"
>[7]</A
> Some browsers allow you to leave out the submit button when the form has only a single input text field. When the user types a return in this field, it is treated as a submit request. But you should use proper HTML here. </P
></DIV
></BLOCKQUOTE
><PRE
CLASS="programlisting"
>&lt;!-- ice_cream.html --&gt;
&lt;HTML&gt;
 &lt;HEAD&gt;
 &lt;TITLE&gt;Hello Ice Cream&lt;/TITLE&gt;
 &lt;/HEAD&gt;
 &lt;BODY&gt;
 &lt;H1&gt;Hello Ice Cream&lt;/H1&gt;
 &lt;FORM ACTION=&quot;http://www.SOMEWHERE.org/cgi-bin/ice_cream.plx&quot;&gt;
 What's your flavor? &lt;INPUT NAME=&quot;favorite&quot; VALUE=&quot;mint&quot;&gt;
 &lt;P&gt;
 &lt;INPUT TYPE=&quot;submit&quot;&gt;
 &lt;/FORM&gt;
 &lt;/BODY&gt;
<CODE
CLASS="literal"
>&lt;/HTML&gt;</CODE
></PRE
><P
CLASS="para"
>Remember that a CGI program can generate any HTML output that you want, which will then be passed to any browser that fetches the program's URL. A CGI program can, therefore, produce the HTML page with the form on it, just as a CGI program can respond to the user's form input. Moreover, the same program can perform both tasks, one after the other. All you need to do is divide the program into two parts, which do different things depending on whether or not the program was invoked with arguments. If no arguments were received, then the program sends the empty form to the browser; otherwise, the arguments contain a user's input to the previously sent form, and the program returns a response to the browser based on that input. </P
><P
CLASS="para"
>Keeping everything in a single CGI file this way eases maintenance. The cost is a little more processing time when loading the original page. Here's how it works: </P
><PRE
CLASS="programlisting"
># ice_cream.plx: program to answer *and generate* ice cream 
# favorite flavor form (version 3)
use CGI qw(:standard);
my $favorite = param(&quot;flavor&quot;);
print header, start_html(&quot;Hello Ice Cream&quot;), 
           h1(&quot;Hello Ice Cream&quot;);
if ($favorite) {
    print p(&quot;Your favorite flavor is $favorite.&quot;);
} else {
    # hr() emits horizontal rule: &lt;HR&gt;
    print hr(), start_form();
    print p(&quot;Please select a flavor: &quot;,
               textfield(&quot;flavor&quot;,&quot;mint&quot;));
    print end_form(), hr();
<CODE
CLASS="literal"
>}</CODE
></PRE
><P
CLASS="para"
>If, while using your browser, you click on a link that points to this program (and if the link does not specify <CODE
CLASS="literal"
>?whatever</CODE
> at the end of the URL), you'll see a screen like <A
CLASS="xref"
HREF="ch18_04.htm#ch18-32877"
TITLE="Screen shot of ice_cream.plx (without input)"
>Figure 18.2</A
>. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch18-32877"
>Figure 18.2: Screen shot of ice_cream.plx (without input)</A
></H4
><IMG
CLASS="graphic"
SRC="figs/lp_1802.gif"
ALT="Figure 18.2"><P
CLASS="para"
>Now, fill in the <CODE
CLASS="literal"
>flavor</CODE
> field and press Return. <A
CLASS="xref"
HREF="ch18_04.htm#ch18-40081"
TITLE="Screen shot of ice_cream.plx with params (after input)"
>Figure 18.3</A
> will appear. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch18-40081"
>Figure 18.3: Screen shot of ice_cream.plx with params (after input)</A
></H4
><IMG
CLASS="graphic"
SRC="figs/lp_1803.gif"
ALT="Figure 18.3"></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-17123"
>18.4.3 Other Form Elements</A
></H3
><P
CLASS="para"
>Now that you know how to create simple text fields in your form and respond to them, you're probably wondering how to make the other kinds of widgets you've seen, like buttons, checkboxes, and menus. </P
><P
CLASS="para"
>Here's a more elaborate version of our program. We've thrown in some new widgets: pop-up menus, a submit button (named "order"), and a button to reset the entire form and erase all user input. Pop-up menus are pretty much just what they say they are, but the arguments given to <CODE
CLASS="literal"
>popup_menu</CODE
> may perplex you until you've read the following section on <A
CLASS="xref"
HREF="ch18_04.htm#ch18-pgfId-86796"
TITLE="References"
>"References</A
>." The <CODE
CLASS="literal"
>textfield()</CODE
> function creates a text-input field with the indicated name. We'll give more details about this function when describing the guestbook program later in this chapter. Here's an example:</P
><PRE
CLASS="programlisting"
># ice_cream.plx: program to answer and generate ice cream 
# order form (version 4)
use strict; # enforce variable declarations and quoting
use CGI qw(:standard);

print header, start_html(&quot;Ice Cream Stand&quot;), 
    h1(&quot;Ice Cream Stand&quot;);
if (param()) { # the form has already been filled out
    my $who = param(&quot;name&quot;);
    my $flavor = param(&quot;flavor&quot;);
    my $scoops = param(&quot;scoops&quot;);
    my $taxrate = 1.0743;
    my $cost = sprintf(&quot;%.2f&quot;, $taxrate * 
        (1.00 + $scoops * 0.25));
    print p(&quot;Ok, $who, have $scoops scoops of $flavor
        for \$$cost.&quot;);
} else { # first time through, so present clean form
    print hr(); # draw a horizontal rule before the form 
    print start_form();
    print p(&quot;What's your name? &quot;, textfield(&quot;name&quot;));
    # FOR EXPLANATION OF FOLLOWING TWO LINES, SEE NEXT SECTION
    print p(&quot;What flavor: &quot;, popup_menu(&quot;flavor&quot;,
        ['mint','cherry','mocha']));
     print p(&quot;How many scoops? &quot;, 
         popup_menu(&quot;scoops&quot;, [ 1..3 ]));
     print p(submit(&quot;order&quot;), reset(&quot;clear&quot;));
     print end_form(), hr();
}
print end_html;</PRE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch18_04.htm#ch18-22650"
TITLE="Screen shot of ice_cream.plx (final version)"
>Figure 18.4</A
> shows the initial screen the <CODE
CLASS="literal"
>textfield</CODE
> function generates. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch18-22650"
>Figure 18.4: Screen shot of ice_cream.plx (final version)</A
></H4
><IMG
CLASS="graphic"
SRC="figs/lp_1804.gif"
ALT="Figure 18.4"><P
CLASS="para"
>As you'll recall, the <CODE
CLASS="literal"
>param()</CODE
> function, when called without arguments, returns the names of all form-input fields that were filled out. As a result, you can tell whether or not the URL was called from a filled-out form. If you have parameters, then the user filled in some of the fields of an existing form, so respond to them. Otherwise, generate a new form, expecting to have this very same program called a second time. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-86796"
>18.4.4 References</A
></H3
><P
CLASS="para"
>You may have noticed that the <CODE
CLASS="literal"
>popup_menu()</CODE
> functions in the previous example both have a strange kind of argument. Just what are <CODE
CLASS="literal"
>['mint', 'cherry','mocha']</CODE
> and <CODE
CLASS="literal"
>[ 1..3 ]</CODE
> doing there? The brackets create something you haven't seen before: a reference to an anonymous array. The <CODE
CLASS="literal"
>popup_menu()</CODE
> function expects an array reference for an argument. Another way to create an array reference is to use a backslash in front of a named array, as in <CODE
CLASS="literal"
>\@choices</CODE
>. So this: </P
><PRE
CLASS="programlisting"
>@choices = ('mint','cherry','mocha');
print p(&quot;What flavor: &quot;, popup_menu(&quot;flavor&quot;, \@choices));</PRE
><P
CLASS="para"
>works just as well as this: </P
><PRE
CLASS="programlisting"
>print p(&quot;What flavor: &quot;, popup_menu(&quot;flavor&quot;,
    ['mint','cherry','mocha'])); </PRE
><P
CLASS="para"
>References behave somewhat as pointers do in other languages, but with less danger of error. They're values that refer to other values (or variables). Perl references are very strongly typed (and uncastable), and they can never cause general protection faults. Even better, the memory storage pointed to by references is automatically reclaimed when it's no longer used. References play a central role in object-oriented programming. They're also used in traditional programming, forming the basis for data structures more complex than simple one-dimensional arrays and hashes. Perl supports references to both named and anonymous scalars, arrays, hashes, and functions. </P
><P
CLASS="para"
>Just as you can create references to named arrays with <CODE
CLASS="literal"
>\@array</CODE
> and to anonymous arrays with <CODE
CLASS="literal"
>[ list ]</CODE
>, you can also create references to named hashes using <CODE
CLASS="literal"
>\%hash</CODE
> and to anonymous hashes using:[<A
CLASS="footnote"
HREF="#ch18-pgfId-87526"
>8</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch18-pgfId-87526"
>[8]</A
> Yes, braces now have quite a few meanings in Perl. The context in which you use them determines what they're doing. </P
></DIV
></BLOCKQUOTE
><PRE
CLASS="programlisting"
>{ key1, value1, key2, value2, ... }</PRE
><P
CLASS="para"
>You can learn more about references in <A
CLASS="olink"
HREF="../prog/ch04_01.htm"
>Chapter 4</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>, or the <EM
CLASS="emphasis"
>perlref</EM
> documentation. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch18-pgfId-86809"
>18.4.5 Fancier Calling Sequences</A
></H3
><P
CLASS="para"
>We'll round out the discussion of form widgets by creating a really fancy widget&nbsp;- one that allows the user to select any number of its items. The <CODE
CLASS="literal"
>scrolling_list()</CODE
> function of <EM
CLASS="emphasis"
>CGI.pm</EM
> can take an arbitrary number of argument pairs, each of which consists of a named parameter (beginning with <CODE
CLASS="literal"
>-</CODE
>) and a value for the parameter. </P
><P
CLASS="para"
>To add a scrolling list to a form, here's all you need to do:<A
CLASS="indexterm"
NAME="ch18-idx-89224-0"
></A
></P
><PRE
CLASS="programlisting"
>print scrolling_list(
    -NAME =&gt; &quot;flavors&quot;,
    -VALUES =&gt; [ qw(mint chocolate cherry vanilla peach) ],
    -LABELS =&gt; {
        mint =&gt; &quot;Mighty Mint&quot;,
        chocolate =&gt; &quot;Cherished Chocolate&quot;,
        cherry =&gt; &quot;Cheery Cherry&quot;,
        vanilla =&gt; &quot;Very Vanilla&quot;,
        peach =&gt; &quot;Perfectly Peachy&quot;,
     },
     -SIZE =&gt; 3,
     -MULTIPLE =&gt; 1, # 1 for true, 0 for false
);</PRE
><P
CLASS="para"
>The parameter values have meanings as follows: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>-NAME</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the widget. You can use the value of this later to retrieve user data from the form with <CODE
CLASS="literal"
>param()</CODE
>. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-VALUES</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A reference to an anonymous array. The array consists of the keys of the hash referenced by <CODE
CLASS="literal"
>-LABELS</CODE
>. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-LABELS</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A reference to an anonymous hash. The values of the hash provide the labels (list items) seen by the form user. When a particular label is selected by the user, the corresponding hash key is what gets returned to the CGI program. That is, if the user selects the item given as <CODE
CLASS="literal"
>Perfectly Peachy</CODE
>, the CGI program will receive the argument <CODE
CLASS="literal"
>peach</CODE
>. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-SIZE</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A number determining how many list items will be visible to the user at one time. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-MULTIPLE</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A true or false value (in Perl's sense of true and false) indicating whether the form user will be allowed to choose more than one list item. </P
></DD
></DL
><P
CLASS="para"
>When you've set <CODE
CLASS="literal"
>-MULTIPLE</CODE
> to true, you'll want to assign <CODE
CLASS="literal"
>param()</CODE
>'s return list to an array: </P
><PRE
CLASS="programlisting"
>@choices = param(&quot;flavors&quot;);</PRE
><P
CLASS="para"
>Here's another way to create the same scrolling list, passing a reference to an existing hash instead of creating one on the fly: </P
><PRE
CLASS="programlisting"
>%flavors = (
    mint =&gt; &quot;Mighty Mint&quot;,
    chocolate =&gt; &quot;Cherished Chocolate&quot;,
    cherry =&gt; &quot;Cheery Cherry&quot;,
    vanilla =&gt; &quot;Very Vanilla&quot;,
    peach =&gt; &quot;Perfectly Peachy&quot;,
);
print scrolling_list(
    -NAME =&gt; &quot;flavors&quot;,
    -LABELS =&gt; \%flavors,
    -VALUES =&gt; [ keys %flavors ],
    -SIZE =&gt; 3,
    -MULTIPLE =&gt; 1, # 1 for true, 0 for false<A
CLASS="indexterm"
NAME="ch18-idx-89231-0"
></A
>
);</PRE
><P
CLASS="para"
>This time we send in values computed from the keys of the <CODE
CLASS="literal"
>%flavors</CODE
> hash, which is itself passed in by reference using the backslash operator. Notice how the <CODE
CLASS="literal"
>-VALUES</CODE
> parameter is still wrapped in square brackets? Passing in the result of <CODE
CLASS="literal"
>keys</CODE
> as a list wouldn't work because the calling convention for the <CODE
CLASS="literal"
>scrolling_list()</CODE
> function requires an array reference there, which the brackets happily provide. Think of the brackets as a convenient way to treat multiple values as a single value.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_03.htm"
TITLE="18.3 Simplest CGI Program"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 18.3 Simplest CGI Program"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl on Win32 Systems"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch18_05.htm"
TITLE="18.5 Creating a Guestbook Program"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 18.5 Creating a Guestbook Program"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>18.3 Simplest CGI Program</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>18.5 Creating a Guestbook Program</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
