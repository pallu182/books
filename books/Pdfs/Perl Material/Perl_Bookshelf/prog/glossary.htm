<HTML
><HEAD
>
<TITLE>Glossary</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T02:08:13Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Programming Perl"><LINK
REL="prev"
HREF="ch09_01.htm"
TITLE="9. Diagnostic Messages"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="CHAPTER"
HREF="ch09_01.htm"
TITLE="9. Diagnostic Messages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9. Diagnostic Messages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Glossary</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>&nbsp;</TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DL
CLASS="GLOSSARY"
><H1
CLASS="glossary"
><A
CLASS="title"
NAME="PERL2-APPA"
>Glossary</A
></H1
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ACTUAL-ARGUMENTS"
><B
CLASS="emphasis.bold"
>actual arguments</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The <EM
CLASS="emphasis"
>scalar values</EM
> that you supply to a <A
CLASS="glossterm"
HREF="glossary.htm#G-FUNCTION"
><EM
CLASS="emphasis"
>function</EM
></A
> or
<A
CLASS="glossterm"
HREF="glossary.htm#G-SUBROUTINE"
><EM
CLASS="emphasis"
>subroutine</EM
></A
> when you call it.  For instance, when you call
<CODE
CLASS="literal"
>piglatin(&quot;bingo&quot;)</CODE
>, the string <CODE
CLASS="literal"
>&quot;bingo&quot;</CODE
> is the actual
argument. See also <A
CLASS="glossterm"
HREF="glossary.htm#G-ARGUMENT"
><EM
CLASS="emphasis"
>argument</EM
></A
>[<A
CLASS="footnote"
HREF="#AUTOID-33345"
>1</A
>] 
and <A
CLASS="glossterm"
HREF="glossary.htm#G-FORMAL-ARGUMENTS"
><EM
CLASS="emphasis"
>formal arguments</EM
></A
>.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-33345"
>[1]</A
> When we italicize a word or phrase in here, it usually means you can
find it defined elsewhere in the Glossary.  Think of them as hyperlinks.</P
></DIV
></BLOCKQUOTE
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ADDRESS-OPERATOR"
><B
CLASS="emphasis.bold"
>address operator</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A language construct for
manipulating the actual location of an object in your computer's memory.
Strictly speaking, there are no such operators in Perl, since it handles
all that for you automatically.  You tell Perl that you want a new
<A
CLASS="glossterm"
HREF="glossary.htm#G-THINGY"
><EM
CLASS="emphasis"
>thingy</EM
></A
>, and Perl worries about creating, moving, and
destroying the thingy for you.  Not so strictly speaking, the backslash
operator returns a reference to a thingy, which works much like an
address.  See also <A
CLASS="glossterm"
HREF="glossary.htm#G-NETWORK-ADDRESS"
><EM
CLASS="emphasis"
>network address</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ALTERNATIVES"
><B
CLASS="emphasis.bold"
>alternatives</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A list of possible choices from which you may select only one, as in
&quot;Would you like door A, B, or C?&quot;  Alternatives in regular expressions
are separated with a vertical bar: <CODE
CLASS="literal"
>|</CODE
>.  Alternatives in normal
Perl expressions are separated with a double vertical bar: <CODE
CLASS="literal"
>||</CODE
>.
You might say there are two alternatives for alternatives.  (Then again,
you might not.  Your choice.)</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ANONYMOUS"
><B
CLASS="emphasis.bold"
>anonymous</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Used to describe a <A
CLASS="glossterm"
HREF="glossary.htm#G-THINGY"
><EM
CLASS="emphasis"
>thingy</EM
></A
> that is not directly accessible through a
named <A
CLASS="glossterm"
HREF="glossary.htm#G-VARIABLE"
><EM
CLASS="emphasis"
>variable</EM
></A
>.  Such a thingy must be indirectly accessible through at
least one <A
CLASS="glossterm"
HREF="glossary.htm#G-HARD-REFERENCE"
><EM
CLASS="emphasis"
>hard reference</EM
></A
>.  When the last hard reference goes away, the
anonymous thingy is destroyed without pity.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ARCHITECTURE"
><B
CLASS="emphasis.bold"
>architecture</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The kind of computer you're working on, where one &quot;kind&quot; of computer
means all those computers that can run the same <A
CLASS="glossterm"
HREF="glossary.htm#G-BINARY"
><EM
CLASS="emphasis"
>binary</EM
></A
> program.  Since
Perl scripts are text files, not binaries, a Perl script is much less
sensitive to the architecture it's running on than programs in other
languages (such as C) that are compiled into machine code.
See also <A
CLASS="glossterm"
HREF="glossary.htm#G-OPERATING-SYSTEM"
><EM
CLASS="emphasis"
>operating system</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ARGUMENT"
><B
CLASS="emphasis.bold"
>argument</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A piece of data supplied as input to a <EM
CLASS="emphasis"
>program</EM
>, <A
CLASS="glossterm"
HREF="glossary.htm#G-SUBROUTINE"
><EM
CLASS="emphasis"
>subroutine</EM
></A
>, or
<A
CLASS="glossterm"
HREF="glossary.htm#G-FUNCTION"
><EM
CLASS="emphasis"
>function</EM
></A
> when it is invoked to tell it what it's supposed to do.
Also called a &quot;parameter&quot;.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ARGV"
><B
CLASS="emphasis.bold"
>ARGV</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The name of the array containing the <A
CLASS="glossterm"
HREF="glossary.htm#G-ARGUMENT"
><EM
CLASS="emphasis"
>argument</EM
></A
> &quot;vector&quot; from the
<A
CLASS="glossterm"
HREF="glossary.htm#G-COMMAND"
><EM
CLASS="emphasis"
>command</EM
></A
>
<A
CLASS="glossterm"
HREF="glossary.htm#G-LINE"
><EM
CLASS="emphasis"
>line</EM
></A
>.  If you use
the empty <CODE
CLASS="literal"
>&lt;&gt;</CODE
> operator, <B
CLASS="emphasis.bold"
>ARGV</B
> is both the name of the <A
CLASS="glossterm"
HREF="glossary.htm#G-FILEHANDLE"
><EM
CLASS="emphasis"
>filehandle</EM
></A
> used to
traverse the arguments, and of the <A
CLASS="glossterm"
HREF="glossary.htm#G-SCALAR"
><EM
CLASS="emphasis"
>scalar</EM
></A
> containing the name
of the current input file.  It's also what you say to your dentist when the
Novocaine isn't working.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ARITHMETIC-OPERATOR"
><B
CLASS="emphasis.bold"
>arithmetic operator</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A symbol such as <CODE
CLASS="literal"
>+</CODE
> or <CODE
CLASS="literal"
>**</CODE
> that tells Perl to do arithmetic.
In addition, see <A
CLASS="glossterm"
HREF="glossary.htm#G-OPERATOR"
><EM
CLASS="emphasis"
>operator</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ARRAY"
><B
CLASS="emphasis.bold"
>array</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A named list of values, each of which has a unique <A
CLASS="glossterm"
HREF="glossary.htm#G-KEY"
><EM
CLASS="emphasis"
>key</EM
></A
> to identify it.
In a normal array, the key is numeric (an integer, in fact).
In a <A
CLASS="glossterm"
HREF="glossary.htm#G-HASH"
><EM
CLASS="emphasis"
>hash</EM
></A
> (an associative array), the key is a string.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ARRAY-CONTEXT"
><B
CLASS="emphasis.bold"
>array context</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A quaint, archaic expression used by people who have read the first edition
of this book.  Nowadays called <A
CLASS="glossterm"
HREF="glossary.htm#G-LIST-CONTEXT"
><EM
CLASS="emphasis"
>list context</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ARRAY-LITERAL"
><B
CLASS="emphasis.bold"
>array literal</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Strictly, a comma-separated, parenthesized <A
CLASS="glossterm"
HREF="glossary.htm#G-LIST"
><CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
></A
>
of <EM
CLASS="emphasis"
>scalar literals</EM
>.
Used loosely to refer to any parenthesized <A
CLASS="glossterm"
HREF="glossary.htm#G-LIST"
><CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
></A
> even if it contains
<EM
CLASS="emphasis"
>variables</EM
> or <EM
CLASS="emphasis"
>expressions</EM
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ARRAY-VALUE"
><B
CLASS="emphasis.bold"
>array value</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Another archaic phrase.  See <A
CLASS="glossterm"
HREF="glossary.htm#G-LIST-VALUE"
><EM
CLASS="emphasis"
>list value</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ARRAY-VARIABLE"
><B
CLASS="emphasis.bold"
>array variable</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A named list that may be processed by <EM
CLASS="emphasis"
>functions</EM
> such as <A
CLASS="xref"
HREF="ch03_143.htm"
TITLE="shift"
><B
CLASS="xref.cmd"
>shift</B
></A
> and
<A
CLASS="xref"
HREF="ch03_154.htm"
TITLE="splice"
><B
CLASS="xref.cmd"
>splice</B
></A
> that require an array name as the first <A
CLASS="glossterm"
HREF="glossary.htm#G-ARGUMENT"
><EM
CLASS="emphasis"
>argument</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ASCII"
><B
CLASS="emphasis.bold"
>ASCII</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Used roughly to mean the American Standard Code for Information Interchange
(a 7-bit character set), and any international extensions based on it.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ASSIGNMENT"
><B
CLASS="emphasis.bold"
>assignment</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An operation whose mission in life is to change the value of a <A
CLASS="glossterm"
HREF="glossary.htm#G-VARIABLE"
><EM
CLASS="emphasis"
>variable</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ASSIGNMENT-OPERATOR"
><B
CLASS="emphasis.bold"
>assignment operator</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A compound operator composed of an ordinary assignment together with some
other operator, that changes the value of a variable in place, that is,
relative to its old value.  For example,  <CODE
CLASS="literal"
>$a += 2</CODE
> adds <CODE
CLASS="literal"
>2</CODE
> to
<CODE
CLASS="literal"
>$a</CODE
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ASSOCIATIVE-ARRAY"
><B
CLASS="emphasis.bold"
>associative array</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>See <A
CLASS="glossterm"
HREF="glossary.htm#G-HASH"
><EM
CLASS="emphasis"
>hash</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ASSOCIATIVITY"
><B
CLASS="emphasis.bold"
>associativity</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Determines whether you do the left <A
CLASS="glossterm"
HREF="glossary.htm#G-OPERATOR"
><EM
CLASS="emphasis"
>operator</EM
></A
>
first or the right <A
CLASS="glossterm"
HREF="glossary.htm#G-OPERATOR"
><EM
CLASS="emphasis"
>operator</EM
></A
>
first, when you have &quot;A <A
CLASS="glossterm"
HREF="glossary.htm#G-OPERATOR"
><EM
CLASS="emphasis"
>operator</EM
></A
> B <A
CLASS="glossterm"
HREF="glossary.htm#G-OPERATOR"
><EM
CLASS="emphasis"
>operator</EM
></A
> C&quot;, if the two
operators are of the same precedence.  Operators like <CODE
CLASS="literal"
>+</CODE
> are left
associative, while operators like <CODE
CLASS="literal"
>**</CODE
> are right associative.  See
the section &quot;Operators&quot; in <A
CLASS="xref"
HREF="ch02_01.htm"
TITLE="The Gory Details"
>Chapter 2, <CITE
CLASS="chapter"
>The Gory Details</CITE
></A
>, for a list of associativity.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-AUTOINCREMENT"
><B
CLASS="emphasis.bold"
>autoincrement</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>To add one to something automatically.
Usually used to describe the <CODE
CLASS="literal"
>++</CODE
> operator.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-AUTOSPLIT"
><B
CLASS="emphasis.bold"
>autosplit</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>To split a string
automatically on <A
CLASS="glossterm"
HREF="glossary.htm#G-WHITESPACE"
><EM
CLASS="emphasis"
>whitespace</EM
></A
>, such as the <B
CLASS="emphasis.bold"
>-a</B
> switch does in order
to emulate <A
CLASS="glossterm"
HREF="glossary.htm#G-AWK"
><EM
CLASS="emphasis"
>awk</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-AV"
><B
CLASS="emphasis.bold"
>AV</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Short for &quot;array value&quot;, which refers to one of Perl's internal data
types.  (Not to be confused with <A
CLASS="glossterm"
HREF="glossary.htm#G-ARRAY-VALUE"
><EM
CLASS="emphasis"
>array value</EM
></A
>, by which people usually
mean <A
CLASS="glossterm"
HREF="glossary.htm#G-LIST-VALUE"
><EM
CLASS="emphasis"
>list value</EM
></A
>.)
An AV is a kind of <A
CLASS="glossterm"
HREF="glossary.htm#G-SV"
><EM
CLASS="emphasis"
>SV</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-AWK"
><B
CLASS="emphasis.bold"
>awk</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Descriptive editing term&nbsp;- short for &quot;awkward&quot;.  Also coincidentally
refers to a venerable text processing language from which Perl
derived some of its ideas.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-BACKTRACKING"
><B
CLASS="emphasis.bold"
>backtracking</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The practice of saying, &quot;If I had to do it all
over, I'd do it differently,&quot; and then actually going back and doing it
all over differently.  Mathematically speaking, it's returning from an
unsuccessful recursion on a tree of possibilities.  Backtracking happens
in Perl when it attempts to match patterns with a <EM
CLASS="emphasis"
>regular
expression</EM
>, and its earlier guesses don't pan out.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-BASE-CLASS"
><B
CLASS="emphasis.bold"
>base class</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A generic <A
CLASS="glossterm"
HREF="glossary.htm#G-OBJECT"
><EM
CLASS="emphasis"
>object</EM
></A
> <A
CLASS="glossterm"
HREF="glossary.htm#G-CLASS"
><EM
CLASS="emphasis"
>class</EM
></A
> from
which other more specific classes are derived genetically by
<A
CLASS="glossterm"
HREF="glossary.htm#G-INHERITANCE"
><EM
CLASS="emphasis"
>inheritance</EM
></A
>.  Also called a &quot;superclass&quot; by people who respect
their ancestors.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-BASICPLUS"
><B
CLASS="emphasis.bold"
>BASIC/PLUS</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Another ancient language, from which
Perl derived exactly one idea. OK, maybe two.[<A
CLASS="footnote"
HREF="#AUTOID-33563"
>2</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-33563"
>[2]</A
> BASIC/PLUS is a registered trademark of Digital Equipment Corporation.
And the answers are: statement modifiers and maybe formats.</P
></DIV
></BLOCKQUOTE
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-BIG-ENDIAN"
><B
CLASS="emphasis.bold"
>big-endian</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>From Swift:  someone who eats boiled eggs big end first.  Also used of computers
that store the most significant <A
CLASS="glossterm"
HREF="glossary.htm#G-BYTE"
><EM
CLASS="emphasis"
>byte</EM
></A
> of a word at a lower byte address
than the least significant byte.  Often considered superior to
little-endian machines.  See also <A
CLASS="glossterm"
HREF="glossary.htm#G-LITTLE-ENDIAN"
><EM
CLASS="emphasis"
>little-endian</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-BINARY"
><B
CLASS="emphasis.bold"
>binary</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Having to do with numbers represented in base two.  That means
there are basically two numbers, zero and one.  Some
people think in binary, as shown by the kinds of questions they ask:
&quot;Should we all use Perl or Java?&quot;  Also used to describe a non-text file,
presumably because such a file makes full use of all the binary bits in
its bytes.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-BIT"
><B
CLASS="emphasis.bold"
>bit</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A very small piece of litter.
Also a number in the range zero to one, inclusive.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-BIT-SHIFT"
><B
CLASS="emphasis.bold"
>bit shift</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The movement of bits left or right in a computer word, which has the
effect of multiplying or dividing by a power of two.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-BLESS"
><B
CLASS="emphasis.bold"
>bless</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>In corporate life, to grant official approval to a thing, as in, &quot;The VP
of Engineering has blessed our WebCruncher project.&quot;  Similarly in Perl,
to grant official approval to a <A
CLASS="glossterm"
HREF="glossary.htm#G-THINGY"
><EM
CLASS="emphasis"
>thingy</EM
></A
> so that it can function as a
WebCruncher <A
CLASS="glossterm"
HREF="glossary.htm#G-OBJECT"
><EM
CLASS="emphasis"
>object</EM
></A
>.  See the <A
CLASS="xref"
HREF="ch03_009.htm"
TITLE="bless"
><B
CLASS="xref.cmd"
>bless</B
></A
> function in <A
CLASS="xref"
HREF="ch03_01.htm"
TITLE="Functions"
>Chapter 3, <CITE
CLASS="chapter"
>Functions</CITE
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PBLOCK"
><B
CLASS="emphasis.bold"
>block</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>What a <A
CLASS="glossterm"
HREF="glossary.htm#G-PROCESS"
><EM
CLASS="emphasis"
>process</EM
></A
> does when it has to wait for something:
&quot;My process blocked waiting for the disk.&quot;  As an unrelated noun, it
refers to a large chunk of data, of a size that the <EM
CLASS="emphasis"
>operating
system</EM
> likes to deal with (normally a power of two such as
<CODE
CLASS="literal"
>512</CODE
> or <CODE
CLASS="literal"
>8192</CODE
>).  Typically refers to a chunk of data
that's coming from or going to a disk file.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-BLOCK"
><B
CLASS="emphasis.bold"
>BLOCK</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A syntactic construct consisting of a sequence of Perl <EM
CLASS="emphasis"
>statements</EM
>
bounded by braces. The <B
CLASS="emphasis.bold"
>if</B
> and <B
CLASS="emphasis.bold"
>while</B
> statements are
defined in terms of <A
CLASS="glossterm"
HREF="glossary.htm#G-BLOCK"
><CODE
CLASS="replaceable"
><I
>BLOCK</I
></CODE
></A
>s.  Sometimes we also say &quot;block&quot; to mean a
sequence of statements that act like a <A
CLASS="glossterm"
HREF="glossary.htm#G-BLOCK"
><CODE
CLASS="replaceable"
><I
>BLOCK</I
></CODE
></A
>, such as within an
<A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
> or a file, even though the statements aren't bounded by
braces.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-BLOCK-BUFFERING"
><B
CLASS="emphasis.bold"
>block buffering</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A method of making input and output efficient by doing it a block at a
time.  By default, Perl does block buffering to disk files.  See
<A
CLASS="glossterm"
HREF="glossary.htm#G-BUFFER"
><EM
CLASS="emphasis"
>buffer</EM
></A
> and <A
CLASS="glossterm"
HREF="glossary.htm#G-COMMAND-BUFFERING"
><EM
CLASS="emphasis"
>command buffering</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-BOOLEAN-CONTEXT"
><B
CLASS="emphasis.bold"
>Boolean context</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A special kind of <A
CLASS="glossterm"
HREF="glossary.htm#G-SCALAR-CONTEXT"
><EM
CLASS="emphasis"
>scalar context</EM
></A
> in which the
program is expecting to decide whether the <A
CLASS="glossterm"
HREF="glossary.htm#G-SCALAR-VALUE"
><EM
CLASS="emphasis"
>scalar value</EM
></A
> returned by an
expression is <A
CLASS="glossterm"
HREF="glossary.htm#G-TRUE"
><EM
CLASS="emphasis"
>true</EM
></A
> or <A
CLASS="glossterm"
HREF="glossary.htm#G-FALSE"
><EM
CLASS="emphasis"
>false</EM
></A
>.  See <A
CLASS="glossterm"
HREF="glossary.htm#G-CONTEXT"
><EM
CLASS="emphasis"
>context</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-BREAKPOINT"
><B
CLASS="emphasis.bold"
>breakpoint</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A spot in your program where you've told
the debugger to stop <EM
CLASS="emphasis"
>execution</EM
> so you can poke around and see whether
anything is wrong yet.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-BSD"
><B
CLASS="emphasis.bold"
>BSD</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A psychoactive drug, popular in the 80s, probably developed at
U. C. Berkeley or thereabouts.  Similar in many ways to the
prescription-only medication called &quot;System V&quot;, but infinitely more
useful.  (Or, at least, more fun.)  The full chemical name is &quot;Berkeley
Standard Distribution&quot;.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-BUFFER"
><B
CLASS="emphasis.bold"
>buffer</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A temporary holding location for data.  <A
CLASS="glossterm"
HREF="glossary.htm#G-BLOCK-BUFFERING"
><EM
CLASS="emphasis"
>Block buffering</EM
></A
>
means that the data is passed on to its destination whenever the buffer is
full.  <A
CLASS="glossterm"
HREF="glossary.htm#G-LINE-BUFFERING"
><EM
CLASS="emphasis"
>Line
buffering</EM
></A
> means that it's passed on whenever a complete
line is received.  <A
CLASS="glossterm"
HREF="glossary.htm#G-COMMAND-BUFFERING"
><EM
CLASS="emphasis"
>Command
buffering</EM
></A
> means that it's passed on after every
<CODE
CLASS="literal"
>print</CODE
> command.  If your output is unbuffered, every byte is
transmitted separately, without passing through a holding area.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-BYTE"
><B
CLASS="emphasis.bold"
>byte</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A piece of data worth eight <EM
CLASS="emphasis"
>bits</EM
> in most places.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-BYTECODE"
><B
CLASS="emphasis.bold"
>bytecode</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A pidgin-like language spoken among 'droids when they don't wish to
reveal their orientation (see <A
CLASS="glossterm"
HREF="glossary.htm#G-ENDIAN"
><EM
CLASS="emphasis"
>endian</EM
></A
>).  Named after some similar
languages spoken (for similar reasons) between compilers and interpreters
in the late twentieth century.  These languages are characterized by representing
everything as a non-architecture-dependent sequence of bytes.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-C"
><B
CLASS="emphasis.bold"
>C</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A language beloved by many for its inside-out type definitions, inscrutable
precedence rules, and heavy <A
CLASS="glossterm"
HREF="glossary.htm#G-OVERLOADING"
><EM
CLASS="emphasis"
>overloading</EM
></A
> of the function-call mechanism.
(Well, actually, people first switched to C because they found
lower-case identifiers easier to read than upper.)
The Perl <A
CLASS="glossterm"
HREF="glossary.htm#G-INTERPRETER"
><EM
CLASS="emphasis"
>interpreter</EM
></A
> is written in C, so it's not surprising
that Perl borrowed a few ideas from it.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-C-PREPROCESSOR"
><B
CLASS="emphasis.bold"
>C preprocessor</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The typical C compiler's first pass, which processes lines beginning
with <CODE
CLASS="literal"
>#</CODE
> for conditional compilation and macro definition, and
does various manipulations of the program text based on the current
definitions.  Also known as <EM
CLASS="emphasis"
>cpp</EM
>(1).</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CALL-BY-REFERENCE"
><B
CLASS="emphasis.bold"
>call by reference</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An <A
CLASS="glossterm"
HREF="glossary.htm#G-ARGUMENT"
><EM
CLASS="emphasis"
>argument</EM
></A
>-passing mechanism in which the
<A
CLASS="glossterm"
HREF="glossary.htm#G-FORMAL-ARGUMENTS"
><EM
CLASS="emphasis"
>formal arguments</EM
></A
> refer directly to the <A
CLASS="glossterm"
HREF="glossary.htm#G-ACTUAL-ARGUMENTS"
><EM
CLASS="emphasis"
>actual arguments</EM
></A
>, and the
<A
CLASS="glossterm"
HREF="glossary.htm#G-SUBROUTINE"
><EM
CLASS="emphasis"
>subroutine</EM
></A
> can change the actual arguments by changing the formal
arguments.  See also <A
CLASS="glossterm"
HREF="glossary.htm#G-CALL-BY-VALUE"
><EM
CLASS="emphasis"
>call by value</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CALL-BY-VALUE"
><B
CLASS="emphasis.bold"
>call by value</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An <A
CLASS="glossterm"
HREF="glossary.htm#G-ARGUMENT"
><EM
CLASS="emphasis"
>argument</EM
></A
>-passing mechanism in
which the <A
CLASS="glossterm"
HREF="glossary.htm#G-FORMAL-ARGUMENTS"
><EM
CLASS="emphasis"
>formal arguments</EM
></A
> refer to a copy of the <EM
CLASS="emphasis"
>actual
arguments</EM
>, and the <A
CLASS="glossterm"
HREF="glossary.htm#G-SUBROUTINE"
><EM
CLASS="emphasis"
>subroutine</EM
></A
> cannot change the actual
arguments by changing the formal arguments.
(See also <A
CLASS="glossterm"
HREF="glossary.htm#G-CALL-BY-REFERENCE"
><EM
CLASS="emphasis"
>call by reference</EM
></A
>).</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CHARACTER"
><B
CLASS="emphasis.bold"
>character</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A small pattern of <EM
CLASS="emphasis"
>bits</EM
> (usually seven, eight, or sixteen in number)
that is the machine's
representation of a unit of orthography.
Americans typically confuse characters with <EM
CLASS="emphasis"
>bytes</EM
>.
So does Perl.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CHARACTER-CLASS"
><B
CLASS="emphasis.bold"
>character class</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A square-bracketed list of characters used in a <A
CLASS="glossterm"
HREF="glossary.htm#G-REGULAR-EXPRESSION"
><EM
CLASS="emphasis"
>regular expression</EM
></A
>
to indicate that any character of the set may occur at this point.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CLASS"
><B
CLASS="emphasis.bold"
>class</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-PACKAGE"
><EM
CLASS="emphasis"
>package</EM
></A
> that either defines <EM
CLASS="emphasis"
>methods</EM
> (<EM
CLASS="emphasis"
>subroutines</EM
>)
that deal with <EM
CLASS="emphasis"
>objects</EM
> of your class, or that derives methods from
other packages that know how to deal with objects of your class.  (Or
think they know how.)  See also <A
CLASS="glossterm"
HREF="glossary.htm#G-INHERITANCE"
><EM
CLASS="emphasis"
>inheritance</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CLASS-METHOD"
><B
CLASS="emphasis.bold"
>class method</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-METHOD"
><EM
CLASS="emphasis"
>method</EM
></A
> that treats the whole <A
CLASS="glossterm"
HREF="glossary.htm#G-CLASS"
><EM
CLASS="emphasis"
>class</EM
></A
> as an <A
CLASS="glossterm"
HREF="glossary.htm#G-OBJECT"
><EM
CLASS="emphasis"
>object</EM
></A
>.
One sort of class method is a <A
CLASS="glossterm"
HREF="glossary.htm#G-CONSTRUCTOR"
><EM
CLASS="emphasis"
>constructor</EM
></A
>.  (A class
method is also known as a &quot;static&quot; method in C++ terminology.)</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CLIENT"
><B
CLASS="emphasis.bold"
>client</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>In networking, a <A
CLASS="glossterm"
HREF="glossary.htm#G-PROCESS"
><EM
CLASS="emphasis"
>process</EM
></A
> that initiates contact with a <A
CLASS="glossterm"
HREF="glossary.htm#G-SERVER"
><EM
CLASS="emphasis"
>server</EM
></A
>
process in order to exchange data with it and perhaps receive a service.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CLOSURE"
><B
CLASS="emphasis.bold"
>closure</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An <A
CLASS="glossterm"
HREF="glossary.htm#G-ANONYMOUS"
><EM
CLASS="emphasis"
>anonymous</EM
></A
> subroutine
that, when generated at run-time, keeps track of the identities of
externally visible <EM
CLASS="emphasis"
>lexical variables</EM
> even after those lexical variables
have supposedly gone out of <A
CLASS="glossterm"
HREF="glossary.htm#G-SCOPE"
><EM
CLASS="emphasis"
>scope</EM
></A
>.  They're called &quot;closures&quot; because
this sort of behavior gives mathematicians a sense of closure.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CODE"
><B
CLASS="emphasis.bold"
>CODE</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The word &quot;CODE&quot; is returned by the <A
CLASS="xref"
HREF="ch03_121.htm"
TITLE="ref"
><B
CLASS="xref.cmd"
>ref</B
></A
> function when you apply it to
a CV.  See <A
CLASS="glossterm"
HREF="glossary.htm#G-CV"
><EM
CLASS="emphasis"
>CV</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-COLLATING-SEQUENCE"
><B
CLASS="emphasis.bold"
>collating sequence</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The order that characters sort into.  This is used by string comparison
routines to decide, for example, where in this glossary to put &quot;collating sequence&quot;.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-COMMAND"
><B
CLASS="emphasis.bold"
>command</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>In <A
CLASS="glossterm"
HREF="glossary.htm#G-SHELL"
><EM
CLASS="emphasis"
>shell</EM
></A
> programming, the syntactic combination of a program name
with its arguments.  More loosely, anything you type to a shell (a
command interpreter) that starts it doing something.  In Perl
programming, a <A
CLASS="glossterm"
HREF="glossary.htm#G-STATEMENT"
><EM
CLASS="emphasis"
>statement</EM
></A
>, which might start with a <A
CLASS="glossterm"
HREF="glossary.htm#G-LABEL"
><EM
CLASS="emphasis"
>label</EM
></A
>,
and typically ends with a semicolon.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-COMMAND-BUFFERING"
><B
CLASS="emphasis.bold"
>command buffering</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An option in Perl that lets you store up the output of each Perl command
and then flush it out as a single request to the <A
CLASS="glossterm"
HREF="glossary.htm#G-OPERATING-SYSTEM"
><EM
CLASS="emphasis"
>operating system</EM
></A
>.
It's enabled by setting the <B
CLASS="emphasis.bold"
>$|</B
> variable to a non-zero value.  It's
used when you don't want data sitting around not going where it's
supposed to, which may happen because the default on a <A
CLASS="glossterm"
HREF="glossary.htm#G-FILE"
><EM
CLASS="emphasis"
>file</EM
></A
> or
<A
CLASS="glossterm"
HREF="glossary.htm#G-PIPE"
><EM
CLASS="emphasis"
>pipe</EM
></A
> is to use block buffering.  See also <A
CLASS="glossterm"
HREF="glossary.htm#G-BUFFER"
><EM
CLASS="emphasis"
>buffer</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-COMMAND-LINE-ARGUMENTS"
><B
CLASS="emphasis.bold"
>command-line arguments</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The <EM
CLASS="emphasis"
>values</EM
> you supply along with a program name when you tell a
<A
CLASS="glossterm"
HREF="glossary.htm#G-SHELL"
><EM
CLASS="emphasis"
>shell</EM
></A
> to execute a command.  These values are passed to a Perl
script through <B
CLASS="emphasis.bold"
>@ARGV</B
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-COMMAND-NAME"
><B
CLASS="emphasis.bold"
>command name</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The name of the program currently executing, as typed on the command
line.  In C the command name is passed to the program as the first
command-line argument.  In Perl, it comes in separately as <B
CLASS="emphasis.bold"
>$0</B
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-COMMENT"
><B
CLASS="emphasis.bold"
>comment</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A remark that doesn't affect the meaning of the program.  In Perl, a
comment is introduced by a <CODE
CLASS="literal"
>#</CODE
> character and continues to the end
of the line.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-COMPILE-TIME"
><B
CLASS="emphasis.bold"
>compile-time</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The time when Perl is trying to make sense of your program, as opposed
to when it thinks it knows what your program means and is merely trying
to do what it thinks your program says to do.  See also <A
CLASS="glossterm"
HREF="glossary.htm#G-RUNTIME"
><EM
CLASS="emphasis"
>run-time</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-COMPILER"
><B
CLASS="emphasis.bold"
>compiler</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Strictly speaking, a program that munches up another program and spits
out yet another file containing the program in a more executable form,
typically containing native machine instructions.  The <EM
CLASS="emphasis"
>perl</EM
>
program is not a compiler by this definition, but it does contain a compiler that takes a program and turns it into a more executable
form (<EM
CLASS="emphasis"
>syntax trees</EM
>) within the <EM
CLASS="emphasis"
>perl</EM
> process itself, which
the <A
CLASS="glossterm"
HREF="glossary.htm#G-INTERPRETER"
><EM
CLASS="emphasis"
>interpreter</EM
></A
> then interprets.  There are, however, extension
<EM
CLASS="emphasis"
>modules</EM
> to get Perl to act more like a real compiler.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-COMPOSER"
><B
CLASS="emphasis.bold"
>composer</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A &quot;constructor&quot; for a <A
CLASS="glossterm"
HREF="glossary.htm#G-THINGY"
><EM
CLASS="emphasis"
>thingy</EM
></A
> that isn't really an <A
CLASS="glossterm"
HREF="glossary.htm#G-OBJECT"
><EM
CLASS="emphasis"
>object</EM
></A
>,
like an array or a hash.  For example, a pair of braces acts as a composer
for a hash, and a pair of brackets acts as a composer for an array.
See &quot;Creating Hard References&quot; in <A
CLASS="xref"
HREF="ch04_01.htm"
TITLE="References and Nested Data Structures"
>Chapter 4, <CITE
CLASS="chapter"
>References and Nested Data Structures</CITE
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CONCATENATION"
><B
CLASS="emphasis.bold"
>concatenation</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The process of gluing one cat's nose to another cat's tail.
Also, a similar operation on two strings.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CONDITIONAL"
><B
CLASS="emphasis.bold"
>conditional</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Something &quot;iffy&quot;.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CONNECTION"
><B
CLASS="emphasis.bold"
>connection</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>In telephony, the temporary electrical circuit between the caller's
and the callee's phone.  In networking, the same kind of temporary
circuit between a <A
CLASS="glossterm"
HREF="glossary.htm#G-CLIENT"
><EM
CLASS="emphasis"
>client</EM
></A
> and a <A
CLASS="glossterm"
HREF="glossary.htm#G-SERVER"
><EM
CLASS="emphasis"
>server</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CONSTRUCT"
><B
CLASS="emphasis.bold"
>construct</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>As a noun, a piece of syntax made up of smaller pieces.  As a transitive
verb, to create an <A
CLASS="glossterm"
HREF="glossary.htm#G-OBJECT"
><EM
CLASS="emphasis"
>object</EM
></A
> using a <A
CLASS="glossterm"
HREF="glossary.htm#G-CONSTRUCTOR"
><EM
CLASS="emphasis"
>constructor</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CONSTRUCTOR"
><B
CLASS="emphasis.bold"
>constructor</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A special <A
CLASS="glossterm"
HREF="glossary.htm#G-CLASS-METHOD"
><EM
CLASS="emphasis"
>class method</EM
></A
> that constructs an <A
CLASS="glossterm"
HREF="glossary.htm#G-OBJECT"
><EM
CLASS="emphasis"
>object</EM
></A
> and returns it.
Sometimes we use the term loosely to mean a <A
CLASS="glossterm"
HREF="glossary.htm#G-COMPOSER"
><EM
CLASS="emphasis"
>composer</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CONTEXT"
><B
CLASS="emphasis.bold"
>context</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The surroundings, or environment.  
The context given by the surrounding code determines what kind of data
a particular <A
CLASS="glossterm"
HREF="glossary.htm#G-EXPRESSION"
><EM
CLASS="emphasis"
>expression</EM
></A
> is expected to return.
The two primary contexts are <A
CLASS="glossterm"
HREF="glossary.htm#G-LIST-CONTEXT"
><EM
CLASS="emphasis"
>list context</EM
></A
> and <EM
CLASS="emphasis"
>scalar
context</EM
>.  Scalar context is sometimes subdivided into <EM
CLASS="emphasis"
>Boolean
context</EM
>, <A
CLASS="glossterm"
HREF="glossary.htm#G-NUMERIC-CONTEXT"
><EM
CLASS="emphasis"
>numeric context</EM
></A
>, and <A
CLASS="glossterm"
HREF="glossary.htm#G-STRING-CONTEXT"
><EM
CLASS="emphasis"
>string context</EM
></A
>.  There's also
a &quot;don't care&quot; context (which is dealt with in <A
CLASS="xref"
HREF="ch02_01.htm"
TITLE="The Gory Details"
>Chapter 2</A
>, if you care).</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CONTINUATION"
><B
CLASS="emphasis.bold"
>continuation</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The treatment of more than one physical <A
CLASS="glossterm"
HREF="glossary.htm#G-LINE"
><EM
CLASS="emphasis"
>line</EM
></A
> as a single logical
line.  Makefile lines are continued by putting a backslash before the <A
CLASS="glossterm"
HREF="glossary.htm#G-NEWLINE"
><EM
CLASS="emphasis"
>newline</EM
></A
>.  Internet message
headers are continued by putting a space or tab <EM
CLASS="emphasis"
>after</EM
> the
newline.  Perl lines do not need any form of continuation mark,
because <A
CLASS="glossterm"
HREF="glossary.htm#G-WHITESPACE"
><EM
CLASS="emphasis"
>whitespace</EM
></A
> (including
newline) is gleefully ignored.  Usually.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CORE-DUMP"
><B
CLASS="emphasis.bold"
>core dump</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The corpse of a <A
CLASS="glossterm"
HREF="glossary.htm#G-PROCESS"
><EM
CLASS="emphasis"
>process</EM
></A
>, in the form of a file left in the <EM
CLASS="emphasis"
>working
directory</EM
> of the process, usually as a result of certain kinds of fatal
error.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CPAN"
><B
CLASS="emphasis.bold"
>CPAN</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Comprehensive Perl Archive Network.  (See the Preface for more details.)</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CURRENT-PACKAGE"
><B
CLASS="emphasis.bold"
>current package</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Which <A
CLASS="glossterm"
HREF="glossary.htm#G-PACKAGE"
><EM
CLASS="emphasis"
>package</EM
></A
> the current statement is compiled in.  Scan backward in
the text of your program until you find a package declaration at the same
<A
CLASS="glossterm"
HREF="glossary.htm#G-BLOCK"
><EM
CLASS="emphasis"
>block</EM
></A
> level, or in an enclosing block.
That's your current package name.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CURRENT-WORKING-DIRECTORY"
><B
CLASS="emphasis.bold"
>current working directory</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>See <A
CLASS="glossterm"
HREF="glossary.htm#G-WORKING-DIRECTORY"
><EM
CLASS="emphasis"
>working directory</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CURRENTLY-SELECTED-OUTPUT-CHANNEL"
><B
CLASS="emphasis.bold"
>currently selected output channel</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The last <A
CLASS="glossterm"
HREF="glossary.htm#G-FILEHANDLE"
><EM
CLASS="emphasis"
>filehandle</EM
></A
> that was designated with <CODE
CLASS="literal"
>select(FILEHANDLE)</CODE
>;
the default is <CODE
CLASS="literal"
>STDOUT</CODE
>, if no filehandle has been selected.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-CV"
><B
CLASS="emphasis.bold"
>CV</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An internal &quot;code value&quot; typedef.  A CV is a kind of <A
CLASS="glossterm"
HREF="glossary.htm#G-SV"
><EM
CLASS="emphasis"
>SV</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-DANGLING-STATEMENT"
><B
CLASS="emphasis.bold"
>dangling statement</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A bare, single <A
CLASS="glossterm"
HREF="glossary.htm#G-STATEMENT"
><EM
CLASS="emphasis"
>statement</EM
></A
>, without
any braces, hanging off an <B
CLASS="emphasis.bold"
>if</B
> or <B
CLASS="emphasis.bold"
>while</B
> conditional.  C
allows them.  Perl doesn't.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-DATA-FLOW"
><B
CLASS="emphasis.bold"
>data flow</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>What your program looks like from the perspective of a particular piece
of data from the time it enters your program to the time it leaves or
is combined with some other data to make new data.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-DATA-REDUCTION"
><B
CLASS="emphasis.bold"
>data reduction</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The process of extracting only the most interesting tidbits because
the boss can't read fast enough.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-DATA-STRUCTURE"
><B
CLASS="emphasis.bold"
>data structure</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>How your various pieces of data relate to each other, and what shape
they make when you put them all together, as in a rectangular table,
or a triangular-shaped tree.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-DATA-TYPE"
><B
CLASS="emphasis.bold"
>data type</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A set of possible values, together with all the
operations that know how to deal with those values.  For example, a
numeric data type has a certain set of numbers that you can work with,
and it has various mathematical operations you can do on the numbers
that would make little sense on, say, a string such as
<CODE
CLASS="literal"
>&quot;Kilroy&quot;</CODE
>.  Strings have their own operations, such as
<A
CLASS="glossterm"
HREF="glossary.htm#G-CONCATENATION"
><EM
CLASS="emphasis"
>concatenation</EM
></A
>.  Compound types made of a number of smaller pieces
generally have operations to compose and decompose them, and perhaps to
rearrange them.  Objects that model things in the real world often have
operations that correspond to real activities.  For instance, if
you model an elevator, your elevator object might have an <CODE
CLASS="literal"
>open_door()</CODE
>
method.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-DBM"
><B
CLASS="emphasis.bold"
>DBM</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Stands for &quot;Data Base Management&quot; routines, a set of
routines that emulate an <A
CLASS="glossterm"
HREF="glossary.htm#G-ASSOCIATIVE-ARRAY"
><EM
CLASS="emphasis"
>associative array</EM
></A
> using disk files.
The routines use a dynamic hashing scheme to locate any entry with only
two disk accesses.  DBM files allow a Perl script to keep a persistent
<A
CLASS="glossterm"
HREF="glossary.htm#G-HASH"
><EM
CLASS="emphasis"
>hash</EM
></A
> across multiple invocations.  You can <A
CLASS="xref"
HREF="ch03_171.htm"
TITLE="tie"
><B
CLASS="xref.cmd"
>tie</B
></A
>
your hash variables to various DBM implementations&nbsp;- see <A
CLASS="xref"
HREF="ch05_01.htm"
TITLE="Packages, Modules, and Object Classes"
>Chapter 5, <CITE
CLASS="chapter"
>Packages, Modules, and Object Classes</CITE
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-DECLARATION"
><B
CLASS="emphasis.bold"
>declaration</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An assertion you make that something exists and perhaps what it's like,
without any commitment as to how or where you'll use it.  A declaration
is like the part of your recipe that says, &quot;two cups flour, one large egg, four
or five tadpoles....&quot;  See <A
CLASS="glossterm"
HREF="glossary.htm#G-STATEMENT"
><EM
CLASS="emphasis"
>statement</EM
></A
> for its opposite.  Note that
some declarations also function as statements.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-DECREMENT"
><B
CLASS="emphasis.bold"
>decrement</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>To subtract one from something.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-DEFAULT"
><B
CLASS="emphasis.bold"
>default</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A value that is chosen for you if you don't supply a value of your own.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-DEFINED"
><B
CLASS="emphasis.bold"
>defined</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Having a meaning.  Perl thinks that some of the things people try to do
are devoid of meaning; in particular, making use of variables that have
never been given a <A
CLASS="glossterm"
HREF="glossary.htm#G-VALUE"
><EM
CLASS="emphasis"
>value</EM
></A
>, and performing certain operations on data that
isn't there.  For example, if you try to read data past the end of a
file, Perl will hand you back an <A
CLASS="glossterm"
HREF="glossary.htm#G-UNDEFINED"
><EM
CLASS="emphasis"
>undefined</EM
></A
> value.  See also <A
CLASS="glossterm"
HREF="glossary.htm#G-FALSE"
><EM
CLASS="emphasis"
>false</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-DELIMITER"
><B
CLASS="emphasis.bold"
>delimiter</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Some <A
CLASS="glossterm"
HREF="glossary.htm#G-CHARACTER"
><EM
CLASS="emphasis"
>character</EM
></A
> or <A
CLASS="glossterm"
HREF="glossary.htm#G-STRING"
><EM
CLASS="emphasis"
>string</EM
></A
> that sets bounds to an
arbitrarily-sized textual object.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-DEREFERENCE"
><B
CLASS="emphasis.bold"
>dereference</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A fancy computer science term meaning &quot;to follow a <A
CLASS="glossterm"
HREF="glossary.htm#G-REFERENCE"
><EM
CLASS="emphasis"
>reference</EM
></A
> to what it
points to&quot;.  The &quot;de&quot; part of it refers to the fact that you're
taking away one level of <A
CLASS="glossterm"
HREF="glossary.htm#G-INDIRECTION"
><EM
CLASS="emphasis"
>indirection</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-DERIVED-CLASS"
><B
CLASS="emphasis.bold"
>derived class</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-CLASS"
><EM
CLASS="emphasis"
>class</EM
></A
> that defines some of its <EM
CLASS="emphasis"
>methods</EM
> in terms of a more generic
class, called a <A
CLASS="glossterm"
HREF="glossary.htm#G-BASE-CLASS"
><EM
CLASS="emphasis"
>base class</EM
></A
>.  Note that classes aren't classified
exclusively into base classes or derived classes: a class can function
as both a derived class and a base class simultaneously.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-DESTROY"
><B
CLASS="emphasis.bold"
>destroy</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>To deallocate the memory of a <A
CLASS="glossterm"
HREF="glossary.htm#G-THINGY"
><EM
CLASS="emphasis"
>thingy</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-DESTRUCTOR"
><B
CLASS="emphasis.bold"
>destructor</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A special <A
CLASS="glossterm"
HREF="glossary.htm#G-METHOD"
><EM
CLASS="emphasis"
>method</EM
></A
> that is called when an <A
CLASS="glossterm"
HREF="glossary.htm#G-OBJECT"
><EM
CLASS="emphasis"
>object</EM
></A
> is thinking about
<EM
CLASS="emphasis"
>destroying</EM
> itself.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-DEVICE"
><B
CLASS="emphasis.bold"
>device</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A
whiz-bang hardware gizmo (like a disk or tape drive) attached to your
computer that the <A
CLASS="glossterm"
HREF="glossary.htm#G-OPERATING-SYSTEM"
><EM
CLASS="emphasis"
>operating system</EM
></A
> tries to make look like a file (or a
bunch of files).  Under UNIX, these fake files
tend to live in the <EM
CLASS="emphasis"
>/dev</EM
> directory.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-DIRECTORY"
><B
CLASS="emphasis.bold"
>directory</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A place where you find files, and perhaps other directories.  Some
<EM
CLASS="emphasis"
>operating systems</EM
> call these &quot;folders&quot;, &quot;drawers&quot;, or &quot;catalogs&quot;.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-DIRECTORY-HANDLE"
><B
CLASS="emphasis.bold"
>directory handle</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A name that represents a particular instance of opening a directory
to read it, until you close it.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-DUMP"
><B
CLASS="emphasis.bold"
>dump</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A Perl <A
CLASS="glossterm"
HREF="glossary.htm#G-STATEMENT"
><EM
CLASS="emphasis"
>statement</EM
></A
> that is one of the many ways to get a Perl program to
produce a <A
CLASS="glossterm"
HREF="glossary.htm#G-CORE-DUMP"
><EM
CLASS="emphasis"
>core dump</EM
></A
>.  Most of the others are undocumented.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-DYNAMIC-SCOPING"
><B
CLASS="emphasis.bold"
>dynamic scoping</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Making variables visible throughout the rest of the <A
CLASS="glossterm"
HREF="glossary.htm#G-BLOCK"
><EM
CLASS="emphasis"
>block</EM
></A
> in which
they are first used, as well as within any <EM
CLASS="emphasis"
>subroutines</EM
> that are called by the
rest of the block.  Dynamically scoped variables can have their values
temporarily changed (and implicitly restored later) by a <A
CLASS="xref"
HREF="ch03_087.htm"
TITLE="local"
><B
CLASS="xref.cmd"
>local</B
></A
> statement.
Compare <A
CLASS="glossterm"
HREF="glossary.htm#G-LEXICAL-SCOPING"
><EM
CLASS="emphasis"
>Lexical Scoping</EM
></A
>.  Used more loosely to mean how a subroutine
that is in the middle of calling another subroutine &quot;contains&quot; that
subroutine at run-time.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ECLECTIC"
><B
CLASS="emphasis.bold"
>eclectic</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Derived from many sources.  Some would say <EM
CLASS="emphasis"
>too</EM
> many.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ELEMENT"
><B
CLASS="emphasis.bold"
>element</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A basic building block.  When you're talking about an <A
CLASS="glossterm"
HREF="glossary.htm#G-ARRAY"
><EM
CLASS="emphasis"
>array</EM
></A
>, it's one
of the items that make up the array.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ENDIAN"
><B
CLASS="emphasis.bold"
>endian</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>See <A
CLASS="glossterm"
HREF="glossary.htm#G-LITTLE-ENDIAN"
><EM
CLASS="emphasis"
>little-endian</EM
></A
> and <A
CLASS="glossterm"
HREF="glossary.htm#G-BIG-ENDIAN"
><EM
CLASS="emphasis"
>big-endian</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ENVIRONMENT"
><B
CLASS="emphasis.bold"
>environment</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The collective set of <EM
CLASS="emphasis"
>environment variables</EM
> your <A
CLASS="glossterm"
HREF="glossary.htm#G-PROCESS"
><EM
CLASS="emphasis"
>process</EM
></A
> inherits
from its parent.  Accessed via <B
CLASS="emphasis.bold"
>%ENV</B
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ENVIRONMENT-VARIABLE"
><B
CLASS="emphasis.bold"
>environment variable</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A mechanism by which some high-level agent such as a user can pass its
preferences down to child <EM
CLASS="emphasis"
>processes</EM
>, grandchild processes,
greatgrandchild processes, and so on.  Each environment variable is a
<A
CLASS="glossterm"
HREF="glossary.htm#G-KEY"
><EM
CLASS="emphasis"
>key</EM
></A
>/<A
CLASS="glossterm"
HREF="glossary.htm#G-VALUE"
><EM
CLASS="emphasis"
>value</EM
></A
> pair, like one element of a <A
CLASS="glossterm"
HREF="glossary.htm#G-HASH"
><EM
CLASS="emphasis"
>hash</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-EOF"
><B
CLASS="emphasis.bold"
>EOF</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>End of File.  Sometimes used metaphorically as the trailing
<A
CLASS="glossterm"
HREF="glossary.htm#G-DELIMITER"
><EM
CLASS="emphasis"
>delimiter</EM
></A
> of a <EM
CLASS="emphasis"
>here document</EM
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ERRNO"
><B
CLASS="emphasis.bold"
>errno</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The error number returned by a UNIX <A
CLASS="glossterm"
HREF="glossary.htm#G-SYSTEM-CALL"
><EM
CLASS="emphasis"
>system call</EM
></A
> when it fails.  Perl
refers to the error by the name <B
CLASS="emphasis.bold"
>$!</B
> (or <CODE
CLASS="literal"
>$OS_ERROR</CODE
> if you
use the English module).</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-EXCEPTION"
><B
CLASS="emphasis.bold"
>exception</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A fancy term for an error.  See <A
CLASS="glossterm"
HREF="glossary.htm#G-FATAL-ERROR"
><EM
CLASS="emphasis"
>fatal error</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-EXCEPTION-HANDLING"
><B
CLASS="emphasis.bold"
>exception handling</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The way a program responds to an error.
The exception handling mechanism in Perl is the <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
> construct.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-EXECUTABLE-FILE"
><B
CLASS="emphasis.bold"
>executable file</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-FILE"
><EM
CLASS="emphasis"
>file</EM
></A
> that is specially marked to tell the <A
CLASS="glossterm"
HREF="glossary.htm#G-OPERATING-SYSTEM"
><EM
CLASS="emphasis"
>operating system</EM
></A
>
that it's OK to run this file as a program.  Abbreviated to
&quot;executable&quot;.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-EXECUTE"
><B
CLASS="emphasis.bold"
>execute</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>To run a program or subroutine.  (Has nothing to do with the <A
CLASS="xref"
HREF="ch03_080.htm"
TITLE="kill"
><B
CLASS="xref.cmd"
>kill</B
></A
>
command, unless you're trying to run a <A
CLASS="glossterm"
HREF="glossary.htm#G-SIGNAL-HANDLER"
><EM
CLASS="emphasis"
>signal handler</EM
></A
>.)</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-EXECUTE-BIT"
><B
CLASS="emphasis.bold"
>execute bit</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The special mark that tells the operating system it can run this
program.  There are actually three execute bits under UNIX, and which
bit gets used depends on whether you own the file singularly,
collectively, or not at all.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-EXIT-STATUS"
><B
CLASS="emphasis.bold"
>exit status</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>See <A
CLASS="glossterm"
HREF="glossary.htm#G-STATUS"
><EM
CLASS="emphasis"
>status</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-EXPONENT"
><B
CLASS="emphasis.bold"
>exponent</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The part of a <EM
CLASS="emphasis"
>floating-point</EM
> number that says where to put the decimal
point in the other part.  See <A
CLASS="glossterm"
HREF="glossary.htm#G-MANTISSA"
><EM
CLASS="emphasis"
>mantissa</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-EXPORT"
><B
CLASS="emphasis.bold"
>export</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>To make symbols from your <A
CLASS="glossterm"
HREF="glossary.htm#G-MODULE"
><EM
CLASS="emphasis"
>module</EM
></A
> available for
<A
CLASS="glossterm"
HREF="glossary.htm#G-IMPORT"
><EM
CLASS="emphasis"
>import</EM
></A
> by other modules.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-EXPRESSION"
><B
CLASS="emphasis.bold"
>expression</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Anything you can legally say in a spot where a <A
CLASS="glossterm"
HREF="glossary.htm#G-VALUE"
><EM
CLASS="emphasis"
>value</EM
></A
> is required.
Typically composed of <EM
CLASS="emphasis"
>literals</EM
>, <EM
CLASS="emphasis"
>variables</EM
>, <EM
CLASS="emphasis"
>operators</EM
>,
<EM
CLASS="emphasis"
>functions</EM
>, and <A
CLASS="glossterm"
HREF="glossary.htm#G-SUBROUTINE"
><EM
CLASS="emphasis"
>subroutine</EM
></A
> calls.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-FALSE"
><B
CLASS="emphasis.bold"
>false</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>In Perl, any value that would look like <CODE
CLASS="literal"
>&quot;&quot;</CODE
> or <CODE
CLASS="literal"
>&quot;0&quot;</CODE
> if
evaluated in a string context.  Since undefined values evaluate to
<CODE
CLASS="literal"
>&quot;&quot;</CODE
>, all undefined values are false, but not all false values
are undefined.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-FATAL-ERROR"
><B
CLASS="emphasis.bold"
>fatal error</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An error that causes termination of the <A
CLASS="glossterm"
HREF="glossary.htm#G-PROCESS"
><EM
CLASS="emphasis"
>process</EM
></A
> after printing a
nasty message on your <A
CLASS="glossterm"
HREF="glossary.htm#G-STANDARD-ERROR"
><EM
CLASS="emphasis"
>standard error</EM
></A
> stream.
&quot;Fatal&quot; errors that happen inside an <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
> aren't fatal to
the whole program, just to that particular <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
>. The nasty
message then shows up in the <B
CLASS="emphasis.bold"
>$@</B
> variable.  You can cause a fatal
error with the <A
CLASS="xref"
HREF="ch03_027.htm"
TITLE="die"
><B
CLASS="xref.cmd"
>die</B
></A
> operator. This is also known as throwing or
raising an <A
CLASS="glossterm"
HREF="glossary.htm#G-EXCEPTION"
><EM
CLASS="emphasis"
>exception</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-FIELD"
><B
CLASS="emphasis.bold"
>field</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A single piece of numeric or string data that is part of a longer
<A
CLASS="glossterm"
HREF="glossary.htm#G-STRING"
><EM
CLASS="emphasis"
>string</EM
></A
>, <A
CLASS="glossterm"
HREF="glossary.htm#G-RECORD"
><EM
CLASS="emphasis"
>record</EM
></A
>, or <A
CLASS="glossterm"
HREF="glossary.htm#G-LINE"
><EM
CLASS="emphasis"
>line</EM
></A
>.  Variable-width fields are
usually separated by <EM
CLASS="emphasis"
>delimiters</EM
> (so use <A
CLASS="xref"
HREF="ch03_155.htm"
TITLE="split"
><B
CLASS="xref.cmd"
>split</B
></A
> to extract the
fields), while
fixed-width fields are usually at fixed positions (so use <A
CLASS="xref"
HREF="ch03_182.htm"
TITLE="unpack"
><B
CLASS="xref.cmd"
>unpack</B
></A
>).</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-FILE"
><B
CLASS="emphasis.bold"
>file</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A named collection of data, usually stored on a disk in a
<A
CLASS="glossterm"
HREF="glossary.htm#G-DIRECTORY"
><EM
CLASS="emphasis"
>directory</EM
></A
>.  Roughly like a document, if you're into office
metaphors.  In some <EM
CLASS="emphasis"
>operating systems</EM
> like UNIX, you can actually
give a file more than one name.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-FILE-DESCRIPTOR"
><B
CLASS="emphasis.bold"
>file descriptor</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The little number the <A
CLASS="glossterm"
HREF="glossary.htm#G-OPERATING-SYSTEM"
><EM
CLASS="emphasis"
>operating system</EM
></A
> uses to keep track of which
opened <A
CLASS="glossterm"
HREF="glossary.htm#G-FILE"
><EM
CLASS="emphasis"
>file</EM
></A
> you're talking about.  Perl hides the file descriptor
inside a <A
CLASS="glossterm"
HREF="glossary.htm#G-STANDARD-IO"
><EM
CLASS="emphasis"
>standard I/O</EM
></A
> stream, and then attaches the stream to a
<A
CLASS="glossterm"
HREF="glossary.htm#G-FILEHANDLE"
><EM
CLASS="emphasis"
>filehandle</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-FILE-GLOB"
><B
CLASS="emphasis.bold"
>file glob</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A &quot;wildcard&quot; match on <EM
CLASS="emphasis"
>filenames</EM
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-FILE-TEST-OPERATOR"
><B
CLASS="emphasis.bold"
>file test operator</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A built-in Perl operator that you use to determine whether something is
<A
CLASS="glossterm"
HREF="glossary.htm#G-TRUE"
><EM
CLASS="emphasis"
>true</EM
></A
> about a file, such as whether you could open it if you tried.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-FILEHANDLE"
><B
CLASS="emphasis.bold"
>filehandle</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>What you pick up a file with.  Or, a name (not necessarily
related to the real name of
a file) that represents a particular instance of opening a file until
you close it.  Thus if you're going to open and close several different
files in succession, it's possible to open each of them with the same
filehandle, so you don't have to write out separate code to process each
file.  It's like the game show host calling someone &quot;Contestant #1&quot; so
that he doesn't have to remember too many names from day to day.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-FILENAME"
><B
CLASS="emphasis.bold"
>filename</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The name for a file.  This name is listed in a <A
CLASS="glossterm"
HREF="glossary.htm#G-DIRECTORY"
><EM
CLASS="emphasis"
>directory</EM
></A
>, and you
can use it in
an <A
CLASS="xref"
HREF="ch03_102.htm"
TITLE="open"
><B
CLASS="xref.cmd"
>open</B
></A
> statement to tell the <A
CLASS="glossterm"
HREF="glossary.htm#G-OPERATING-SYSTEM"
><EM
CLASS="emphasis"
>operating system</EM
></A
> exactly which file
you want to open.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-FILESYSTEM"
><B
CLASS="emphasis.bold"
>filesystem</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A set of <EM
CLASS="emphasis"
>directories</EM
> and <EM
CLASS="emphasis"
>files</EM
> residing on a partition of
the disk.  You can move a file around from directory to directory within
a filesystem without actually moving the file itself, at least under
UNIX.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-FLOATING-POINT"
><B
CLASS="emphasis.bold"
>floating point</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A method of storing numbers in scientific notation, such that the
precision of the number is independent of its magnitude (the decimal
point &quot;floats&quot;).  Perl does its numeric work with floating-point
numbers, when it can't get away with using <EM
CLASS="emphasis"
>integers</EM
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-FLUSH"
><B
CLASS="emphasis.bold"
>flush</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The act of emptying a <A
CLASS="glossterm"
HREF="glossary.htm#G-BUFFER"
><EM
CLASS="emphasis"
>buffer</EM
></A
>, often before it's full.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-FORK"
><B
CLASS="emphasis.bold"
>fork</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>To create a child <A
CLASS="glossterm"
HREF="glossary.htm#G-PROCESS"
><EM
CLASS="emphasis"
>process</EM
></A
> identical to the parent process, at least until
it gets ideas of its own.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-FORMAL-ARGUMENTS"
><B
CLASS="emphasis.bold"
>formal arguments</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Generic names a
<A
CLASS="glossterm"
HREF="glossary.htm#G-SUBROUTINE"
><EM
CLASS="emphasis"
>subroutine</EM
></A
> knows its <EM
CLASS="emphasis"
>arguments</EM
> by.  In many languages,
formal arguments are always given individual names, but in Perl they are
passed via <EM
CLASS="emphasis"
>arrays</EM
>.  The formal arguments to a Perl program are
<CODE
CLASS="literal"
>$ARGV[0]</CODE
>, <CODE
CLASS="literal"
>$ARGV[1]</CODE
>, and so on. The formal
arguments to a Perl subroutine are <CODE
CLASS="literal"
>$_[0]</CODE
>, <CODE
CLASS="literal"
>$_[1]</CODE
>, and so
on.  You may give the arguments individual names by assigning the values
to a <A
CLASS="xref"
HREF="ch03_087.htm"
TITLE="local"
><B
CLASS="xref.cmd"
>local</B
></A
> or <A
CLASS="xref"
HREF="ch03_097.htm"
TITLE="my"
><B
CLASS="xref.cmd"
>my</B
></A
> list.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-FORMAT"
><B
CLASS="emphasis.bold"
>format</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A specification of how many spaces and digits and things to put somewhere
so that whatever you're printing comes out nice and pretty.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-FREELY-AVAILABLE"
><B
CLASS="emphasis.bold"
>freely available</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Means you don't have to pay money to get it, but the copyright on it may
still belong to someone else (like Larry).</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-FREELY-REDISTRIBUTABLE"
><B
CLASS="emphasis.bold"
>freely redistributable</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Means you're not in trouble if you give a bootleg copy of it to your friends
(hint).</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-FUNCTION"
><B
CLASS="emphasis.bold"
>function</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Mathematically, a mapping of each of a set of input values to a particular
output value.  In computers, refers to a <A
CLASS="glossterm"
HREF="glossary.htm#G-SUBROUTINE"
><EM
CLASS="emphasis"
>subroutine</EM
></A
> or
<EM
CLASS="emphasis"
>operation</EM
> that returns a <A
CLASS="glossterm"
HREF="glossary.htm#G-VALUE"
><EM
CLASS="emphasis"
>value</EM
></A
>.  It may or may not have
input values (called <EM
CLASS="emphasis"
>arguments</EM
>).</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-GARBAGE-COLLECTION"
><B
CLASS="emphasis.bold"
>garbage collection</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A misnamed feature of some programming languages&nbsp;- it should be called
&quot;expecting your mother to pick up after you&quot;.  Strictly speaking, Perl
doesn't do this, but relies on a reference counting mechanism to keep
things tidy.  However, when your interpreter thread exits, a kind of
garbage collector runs to make sure everything is cleaned up if you've
been messy with circular references and such.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-GID"
><B
CLASS="emphasis.bold"
>GID</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Group ID&nbsp;- in UNIX, the numeric group ID that the <EM
CLASS="emphasis"
>operating
system</EM
> uses to identify you and members of your <A
CLASS="glossterm"
HREF="glossary.htm#G-GROUP"
><EM
CLASS="emphasis"
>group</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-GLOB"
><B
CLASS="emphasis.bold"
>glob</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Strictly, the shell's <CODE
CLASS="literal"
>*</CODE
> character, which will match a &quot;glob&quot; of
characters when you're trying to generate a list of filenames.  Loosely,
the act of using globs and similar symbols to do pattern matching.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-GLOBAL"
><B
CLASS="emphasis.bold"
>global</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Something you can see from anywhere, usually used of <EM
CLASS="emphasis"
>variables</EM
> and
<EM
CLASS="emphasis"
>subroutines</EM
> that are visible everywhere in your program.  In Perl, only
certain special variables are truly global&nbsp;- most variables (and all
subroutines) are local to the current <A
CLASS="glossterm"
HREF="glossary.htm#G-PACKAGE"
><EM
CLASS="emphasis"
>package</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-GROUP"
><B
CLASS="emphasis.bold"
>group</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A set of users that you're a member of.  In some operating systems (like UNIX),
you can give certain file access permissions to other members of your group.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-GV"
><B
CLASS="emphasis.bold"
>GV</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An internal &quot;glob value&quot;, meaning a <A
CLASS="glossterm"
HREF="glossary.htm#G-TYPEGLOB"
><EM
CLASS="emphasis"
>typeglob</EM
></A
>.  A GV is a kind of
<A
CLASS="glossterm"
HREF="glossary.htm#G-SV"
><EM
CLASS="emphasis"
>SV</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-HARD-REFERENCE"
><B
CLASS="emphasis.bold"
>hard reference</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A
<A
CLASS="glossterm"
HREF="glossary.htm#G-SCALAR"
><EM
CLASS="emphasis"
>scalar</EM
></A
> value containing the actual address of a <A
CLASS="glossterm"
HREF="glossary.htm#G-THINGY"
><EM
CLASS="emphasis"
>thingy</EM
></A
>, such
that the thingy's <A
CLASS="glossterm"
HREF="glossary.htm#G-REFERENCE"
><EM
CLASS="emphasis"
>reference</EM
></A
> count accounts for it.  (Some hard
references are held internally, such as the implicit reference from one
of a <A
CLASS="glossterm"
HREF="glossary.htm#G-TYPEGLOB"
><EM
CLASS="emphasis"
>typeglob</EM
></A
>'s variable slots to its corresponding thingy.)  A
hard reference is different from a <A
CLASS="glossterm"
HREF="glossary.htm#G-SYMBOLIC-REFERENCE"
><EM
CLASS="emphasis"
>symbolic reference</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-HAS-A"
><B
CLASS="emphasis.bold"
>has-a</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A relationship between two <EM
CLASS="emphasis"
>objects</EM
> that is more tenuous than an
<A
CLASS="glossterm"
HREF="glossary.htm#G-IS-A"
><EM
CLASS="emphasis"
>is-a</EM
></A
> relationship, and that can be modeled by containment of one
object in another (which in Perl means containment of a <A
CLASS="glossterm"
HREF="glossary.htm#G-REFERENCE"
><EM
CLASS="emphasis"
>reference</EM
></A
>
to the contained object.)  You generally don't want to use
<A
CLASS="glossterm"
HREF="glossary.htm#G-INHERITANCE"
><EM
CLASS="emphasis"
>inheritance</EM
></A
> to model the <A
CLASS="glossterm"
HREF="glossary.htm#G-HAS-A"
><EM
CLASS="emphasis"
>has-a</EM
></A
> relationship because
<EM
CLASS="emphasis"
>methods</EM
> that make sense on the contained object probably don't
make sense on the object as a whole.  Just because your car <A
CLASS="glossterm"
HREF="glossary.htm#G-HAS-A"
><EM
CLASS="emphasis"
>has-a</EM
></A
>
brake pedal doesn't mean you should stomp on your car.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-HASH"
><B
CLASS="emphasis.bold"
>hash</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A named list of <A
CLASS="glossterm"
HREF="glossary.htm#G-KEY"
><EM
CLASS="emphasis"
>key</EM
></A
>/<A
CLASS="glossterm"
HREF="glossary.htm#G-VALUE"
><EM
CLASS="emphasis"
>value</EM
></A
> pairs, arranged such that you can
easily use any key to find its associated value; a binary relation, to
database users.  This glossary is like a hash, where the word to be
defined is the key, and the definition is the value.  A hash is also
sometimes called an &quot;associative array&quot;.  (Which is a good reason for
calling it a hash instead.)</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-HASH-TABLE"
><B
CLASS="emphasis.bold"
>hash table</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A method used internally by Perl for implementing associative arrays
(hashes) efficiently.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-HEADER-FILE"
><B
CLASS="emphasis.bold"
>header file</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A file containing certain required definitions that you must include
&quot;ahead&quot; of the rest of your program to do certain obscure operations.  A
C header file has a <EM
CLASS="emphasis"
>.h</EM
> extension.  A Perl header file has a
<EM
CLASS="emphasis"
>.ph</EM
> extension.  See the <A
CLASS="xref"
HREF="ch03_123.htm"
TITLE="require"
><B
CLASS="xref.cmd"
>require</B
></A
> operator in <A
CLASS="xref"
HREF="ch03_01.htm"
TITLE="Functions"
>Chapter 3</A
>.
(Header files have been superseded by the <A
CLASS="glossterm"
HREF="glossary.htm#G-MODULE"
><EM
CLASS="emphasis"
>module</EM
></A
> mechanism.)</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-HERE-DOCUMENT"
><B
CLASS="emphasis.bold"
>here document</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>So called because of a similar construct in <EM
CLASS="emphasis"
>shells</EM
> which pretends
that the <EM
CLASS="emphasis"
>lines</EM
> &quot;right here&quot; following the
<A
CLASS="glossterm"
HREF="glossary.htm#G-COMMAND"
><EM
CLASS="emphasis"
>command</EM
></A
> are a
separate <A
CLASS="glossterm"
HREF="glossary.htm#G-FILE"
><EM
CLASS="emphasis"
>file</EM
></A
> to be fed to
the command, up to some trailing <A
CLASS="glossterm"
HREF="glossary.htm#G-DELIMITER"
><EM
CLASS="emphasis"
>delimiter</EM
></A
> 
string.  In Perl, however, it's just a fancy form of quoting.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-HEXADECIMAL"
><B
CLASS="emphasis.bold"
>hexadecimal</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A number in base sixteen, &quot;hex&quot; for short.  The digits for ten through sixteen
are customarily represented by the letters <CODE
CLASS="literal"
>a</CODE
> through <CODE
CLASS="literal"
>f</CODE
>.
Hexadecimal constants in Perl start with <CODE
CLASS="literal"
>0x</CODE
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-HOME-DIRECTORY"
><B
CLASS="emphasis.bold"
>home directory</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The directory you are placed into when you log in.  On a UNIX system,
the name is often placed into <CODE
CLASS="literal"
>$ENV{HOME}</CODE
> or
<CODE
CLASS="literal"
>$ENV{LOGDIR}</CODE
> by the login program, but you can also find it
with <CODE
CLASS="literal"
>(getpwuid($&lt;))[7]</CODE
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-HOST"
><B
CLASS="emphasis.bold"
>host</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The computer on which a program or other data resides.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-HUBRIS"
><B
CLASS="emphasis.bold"
>hubris</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Excessive pride, the sort of thing Zeus zaps you for.  Also the quality
that makes you write (and maintain) programs that other people won't
want to say bad things about.  Hence, the third great virtue of a
programmer.  See also <A
CLASS="glossterm"
HREF="glossary.htm#G-LAZINESS"
><EM
CLASS="emphasis"
>laziness</EM
></A
> and <A
CLASS="glossterm"
HREF="glossary.htm#G-IMPATIENCE"
><EM
CLASS="emphasis"
>impatience</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-HV"
><B
CLASS="emphasis.bold"
>HV</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Short for &quot;hash value,&quot; which refers to one of Perl's internal data
types.  An HV is a kind of <A
CLASS="glossterm"
HREF="glossary.htm#G-SV"
><EM
CLASS="emphasis"
>SV</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-IDENTIFIER"
><B
CLASS="emphasis.bold"
>identifier</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A legally formed name for most anything in which a computer program
might be interested.  Many languages (including Perl) allow identifiers
that start with a letter and contain letters and digits.  Perl also
counts the underscore character as a valid letter.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-IMPATIENCE"
><B
CLASS="emphasis.bold"
>impatience</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The anger you feel when the computer is being lazy.  This makes you
write programs that don't just react to your needs, but actually
anticipate them.  Or at least that pretend to.  Hence, the second great
virtue of a programmer.  See also <A
CLASS="glossterm"
HREF="glossary.htm#G-LAZINESS"
><EM
CLASS="emphasis"
>laziness</EM
></A
> and <A
CLASS="glossterm"
HREF="glossary.htm#G-HUBRIS"
><EM
CLASS="emphasis"
>hubris</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-IMPORT"
><B
CLASS="emphasis.bold"
>import</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Gain access to symbols that are exported from another module.
See the <A
CLASS="xref"
HREF="ch03_185.htm"
TITLE="use"
><B
CLASS="xref.cmd"
>use</B
></A
> operator in <A
CLASS="xref"
HREF="ch03_01.htm"
TITLE="Functions"
>Chapter 3</A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-INCREMENT"
><B
CLASS="emphasis.bold"
>increment</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>To add one to something.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-INDEXING"
><B
CLASS="emphasis.bold"
>indexing</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Formerly, the act of looking up a <A
CLASS="glossterm"
HREF="glossary.htm#G-KEY"
><EM
CLASS="emphasis"
>key</EM
></A
> in an index (like the phone book),
but now merely the act of using any kind of key or position to find the
corresponding <A
CLASS="glossterm"
HREF="glossary.htm#G-VALUE"
><EM
CLASS="emphasis"
>value</EM
></A
>, even if no index is involved.  Things have
degenerated to the point that Perl's <A
CLASS="xref"
HREF="ch03_075.htm"
TITLE="index"
><B
CLASS="xref.cmd"
>index</B
></A
> function merely locates
the position (index) of one string in another.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-INDIRECT-OBJECT"
><B
CLASS="emphasis.bold"
>indirect object</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>In English grammar, a short noun phrase between a verb and its direct
object indicating the beneficiary or recipient of the action.  In Perl,
<CODE
CLASS="literal"
>print STDOUT &quot;$foo\n&quot;;</CODE
>
can be understood as
<CODE
CLASS="replaceable"
><I
>verb indirect-object object</I
></CODE
>
where <CODE
CLASS="literal"
>STDOUT</CODE
> is the recipient of the <CODE
CLASS="literal"
>print</CODE
> action, and
<CODE
CLASS="literal"
>&quot;$foo&quot;</CODE
> is the object being printed.  Similarly, when invoking a
class <A
CLASS="glossterm"
HREF="glossary.htm#G-METHOD"
><EM
CLASS="emphasis"
>method</EM
></A
>, you might say:</P
><PRE
CLASS="programlisting"
>% perl
sub Bob::give { shift; print 
   &quot;Thanks for the @_!\n&quot;; }
give Bob memories
^D
Thanks for the memories!</PRE
><P
CLASS="para"
></P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-INDIRECTION"
><B
CLASS="emphasis.bold"
>indirection</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>When Randal says, &quot;I don't know the answer... go ask Larry.&quot;
Similarly, if something in a program isn't the answer, but
indicates where the answer is, that's indirection.  This can
be done with <EM
CLASS="emphasis"
>symbolic</EM
> or <EM
CLASS="emphasis"
>hard references</EM
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-INHERITANCE"
><B
CLASS="emphasis.bold"
>inheritance</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>What you get from your ancestors, genetically or otherwise.  If you
happen to be a <A
CLASS="glossterm"
HREF="glossary.htm#G-CLASS"
><EM
CLASS="emphasis"
>class</EM
></A
>, your ancestors are called <EM
CLASS="emphasis"
>base classes</EM
>
and your descendants are called <EM
CLASS="emphasis"
>derived classes</EM
>.  See <EM
CLASS="emphasis"
>single
inheritance</EM
> and <A
CLASS="glossterm"
HREF="glossary.htm#G-MULTIPLE-INHERITANCE"
><EM
CLASS="emphasis"
>multiple inheritance</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-INTEGER"
><B
CLASS="emphasis.bold"
>integer</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Number with no fractional part; whole number.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-INTERPOLATION"
><B
CLASS="emphasis.bold"
>interpolation</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The insertion of one piece of text somewhere in the middle of another
piece of text.  The inserted piece may derive from a variable or other
indirect source.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-INTERPRETER"
><B
CLASS="emphasis.bold"
>interpreter</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Strictly speaking, a program that reads a second program and does what the
second program says
directly without turning the program into a different form first, which
is what <EM
CLASS="emphasis"
>compilers</EM
> do.  Perl is not an interpreter by
this definition, because it contains a kind of compiler that takes a
program and turns it into a more executable form (<EM
CLASS="emphasis"
>syntax trees</EM
>) within
the Perl process itself, which the Perl <A
CLASS="glossterm"
HREF="glossary.htm#G-RUNTIME"
><EM
CLASS="emphasis"
>run-time</EM
></A
> system then interprets.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-INVOCATION"
><B
CLASS="emphasis.bold"
>invocation</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The act of calling up a program, subroutine, or function to do
what it's supposed to do.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-IPC"
><B
CLASS="emphasis.bold"
>IPC</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Short for Inter-Process Communication.
Sometimes a <A
CLASS="glossterm"
HREF="glossary.htm#G-PROCESS"
><EM
CLASS="emphasis"
>process</EM
></A
> just needs to talk to some other process.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-IS-A"
><B
CLASS="emphasis.bold"
>is-a</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A relationship between two <EM
CLASS="emphasis"
>objects</EM
> in which one object is
considered to be a more specific version of the other generic object: &quot;A
camel is a mammal.&quot;  Since the generic object really only exists in a
platonic sense, we usually add a little abstraction to the notion of
objects and think of the relationship as being between a generic <EM
CLASS="emphasis"
>base
class</EM
> and a specific <A
CLASS="glossterm"
HREF="glossary.htm#G-DERIVED-CLASS"
><EM
CLASS="emphasis"
>derived class</EM
></A
>.  Oddly enough, platonic
classes don't always have platonic relationships&nbsp;- see <A
CLASS="glossterm"
HREF="glossary.htm#G-INHERITANCE"
><EM
CLASS="emphasis"
>inheritance</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ITERATION"
><B
CLASS="emphasis.bold"
>iteration</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Doing something again and again and again and again and again and....
Usually this is done until you're loopy, which is why they call them
loops.[<A
CLASS="footnote"
HREF="#AUTOID-34692"
>3</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-34692"
>[3]</A
> We'd put in the usual joke referring you back to <A
CLASS="glossterm"
HREF="glossary.htm#G-ITERATION"
><EM
CLASS="emphasis"
>Iteration</EM
></A
>, but
that trick has been iterated too often already, and is no longer funny.
Look for the joke under <A
CLASS="glossterm"
HREF="glossary.htm#G-LOOP"
><EM
CLASS="emphasis"
>Loop</EM
></A
> instead.  Also look for a similar
joke under <A
CLASS="glossterm"
HREF="glossary.htm#G-RECURSION"
><EM
CLASS="emphasis"
>Recursion</EM
></A
>, which is still funny at some level or other.</P
></DIV
></BLOCKQUOTE
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-ITERATOR"
><B
CLASS="emphasis.bold"
>iterator</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A special programming gizmo that keeps track for you of where you are in
something that you're trying to iterate over.  The <B
CLASS="emphasis.bold"
>foreach</B
> loop in
Perl contains an iterator.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-KEY"
><B
CLASS="emphasis.bold"
>key</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A special kind of data, such as your Social Security number, that can be
used to locate other data.  The other data may be considered the <A
CLASS="glossterm"
HREF="glossary.htm#G-VALUE"
><EM
CLASS="emphasis"
>value</EM
></A
>
associated with the key.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-KEYWORD"
><B
CLASS="emphasis.bold"
>keyword</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>See <EM
CLASS="emphasis"
>reserved word</EM
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-LABEL"
><B
CLASS="emphasis.bold"
>label</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A kind of <A
CLASS="glossterm"
HREF="glossary.htm#G-KEY"
><EM
CLASS="emphasis"
>key</EM
></A
> you can give to a statement so that you can talk about
that statement elsewhere in the program.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-LAZINESS"
><B
CLASS="emphasis.bold"
>laziness</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The quality that makes you go to great effort to reduce overall energy
expenditure.  It makes you write labor-saving programs that other people
will find useful, and document what you wrote so you don't have to
answer so many questions about it.  Hence, the first great virtue of a
programmer.  Also hence, this book.  See also <A
CLASS="glossterm"
HREF="glossary.htm#G-IMPATIENCE"
><EM
CLASS="emphasis"
>impatience</EM
></A
> and
<A
CLASS="glossterm"
HREF="glossary.htm#G-HUBRIS"
><EM
CLASS="emphasis"
>hubris</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-LEFT-SHIFT"
><B
CLASS="emphasis.bold"
>left shift</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-BIT-SHIFT"
><EM
CLASS="emphasis"
>bit shift</EM
></A
> that multiplies the number by some power of two.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-LEXICAL-SCOPING"
><B
CLASS="emphasis.bold"
>lexical scoping</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Looking at your <EM
CLASS="emphasis"
>Oxford English Dictionary</EM
> through a microscope.  (Also
known as <A
CLASS="glossterm"
HREF="glossary.htm#G-STATIC"
><EM
CLASS="emphasis"
>static</EM
></A
> scoping, because dictionaries don't change very
fast.)  Similarly, looking at variables that are stored in a private
dictionary for each subroutine, which are visible only from their point
of declaration down to the end of the block in which they are declared.
<B
CLASS="emphasis.bold"
>&nbsp;- Syn.</B
> <A
CLASS="glossterm"
HREF="glossary.htm#G-STATIC-SCOPING"
><EM
CLASS="emphasis"
>static scoping</EM
></A
>.  <B
CLASS="emphasis.bold"
>&nbsp;- Ant.</B
> <EM
CLASS="emphasis"
>dynamic
scoping</EM
>. [&lt; Gk]</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-LIBRARY"
><B
CLASS="emphasis.bold"
>library</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A collection of procedures. In ancient days, referred to a collection of
subroutines in a <EM
CLASS="emphasis"
>.pl</EM
> file. In modern times, refers often
to the entire collection of Perl modules on your system.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-LINE"
><B
CLASS="emphasis.bold"
>line</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>In UNIX, a sequence of zero or more non-newline characters terminated
with a <A
CLASS="glossterm"
HREF="glossary.htm#G-NEWLINE"
><EM
CLASS="emphasis"
>newline</EM
></A
> character.  On non-UNIX machines, this is emulated
even if the underlying <A
CLASS="glossterm"
HREF="glossary.htm#G-OPERATING-SYSTEM"
><EM
CLASS="emphasis"
>operating system</EM
></A
> has different ideas.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-LINE-BUFFERING"
><B
CLASS="emphasis.bold"
>line buffering</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Used by a <A
CLASS="glossterm"
HREF="glossary.htm#G-STANDARD-IO"
><EM
CLASS="emphasis"
>standard I/O</EM
></A
> output stream that flushes its <A
CLASS="glossterm"
HREF="glossary.htm#G-BUFFER"
><EM
CLASS="emphasis"
>buffer</EM
></A
>
after every <A
CLASS="glossterm"
HREF="glossary.htm#G-NEWLINE"
><EM
CLASS="emphasis"
>newline</EM
></A
>. Many standard I/O libraries automatically
set this up on output that is going to the terminal.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-LINE-NUMBER"
><B
CLASS="emphasis.bold"
>line number</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The number of lines read prior to this one, plus <CODE
CLASS="literal"
>1</CODE
>.  Perl keeps
a separate line number for each script or input file it opens.  The
current script line number is represented by <CODE
CLASS="literal"
>__LINE__</CODE
>.  The
current input line number (for the file that was most recently read from
via <CODE
CLASS="literal"
>&lt;&gt;</CODE
>) is represented by the <B
CLASS="emphasis.bold"
>$.</B
> variable.  Many error
messages report both values, if available.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-LINK"
><B
CLASS="emphasis.bold"
>link</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>In UNIX, a name in a directory, representing a file.  A given file can
have multiple links to it.  It's like having the same phone number
listed in the phone directory under different names.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-OLIST"
><B
CLASS="emphasis.bold"
>list</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An ordered set of values.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-LIST"
><B
CLASS="emphasis.bold"
>LIST</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A syntactic construct representing a comma-separated list of
expressions, evaluated to produce a <A
CLASS="glossterm"
HREF="glossary.htm#G-LIST-VALUE"
><EM
CLASS="emphasis"
>list value</EM
></A
>.  Each <A
CLASS="glossterm"
HREF="glossary.htm#G-EXPRESSION"
><EM
CLASS="emphasis"
>expression</EM
></A
>
in a <A
CLASS="glossterm"
HREF="glossary.htm#G-LIST"
><CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
></A
> is evaluated in a <A
CLASS="glossterm"
HREF="glossary.htm#G-LIST-CONTEXT"
><EM
CLASS="emphasis"
>list context</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-LIST-CONTEXT"
><B
CLASS="emphasis.bold"
>list context</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The situation in which an <A
CLASS="glossterm"
HREF="glossary.htm#G-EXPRESSION"
><EM
CLASS="emphasis"
>expression</EM
></A
>
is expected by its surroundings (the code
calling it) to return a list of values rather than a single value.
Functions that want a <A
CLASS="glossterm"
HREF="glossary.htm#G-LIST"
><CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
></A
> of arguments tell those arguments that
they should produce a list value.
See also <A
CLASS="glossterm"
HREF="glossary.htm#G-CONTEXT"
><EM
CLASS="emphasis"
>context</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-LIST-OPERATOR"
><B
CLASS="emphasis.bold"
>list operator</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Generally, an <A
CLASS="glossterm"
HREF="glossary.htm#G-OPERATOR"
><EM
CLASS="emphasis"
>operator</EM
></A
> that does
something with a list of values. Specifically, those operators (such as
<A
CLASS="xref"
HREF="ch03_110.htm"
TITLE="print"
><B
CLASS="xref.cmd"
>print</B
></A
>, <A
CLASS="xref"
HREF="ch03_181.htm"
TITLE="unlink"
><B
CLASS="xref.cmd"
>unlink</B
></A
>, and <A
CLASS="xref"
HREF="ch03_167.htm"
TITLE="system"
><B
CLASS="xref.cmd"
>system</B
></A
>) that do not require parentheses around
their <A
CLASS="glossterm"
HREF="glossary.htm#G-ARGUMENT"
><EM
CLASS="emphasis"
>argument</EM
></A
> list.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-LIST-VALUE"
><B
CLASS="emphasis.bold"
>list value</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An unnamed list of scalar values that may be passed around within a program
and passed to any function that provides a <A
CLASS="glossterm"
HREF="glossary.htm#G-LIST-CONTEXT"
><EM
CLASS="emphasis"
>list context</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-LITERAL"
><B
CLASS="emphasis.bold"
>literal</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Often means &quot;figurative&quot;, as in &quot;I'm literally scared to death.&quot;  More
literally, a symbol in a programming language like a number or <A
CLASS="glossterm"
HREF="glossary.htm#G-STRING"
><EM
CLASS="emphasis"
>string</EM
></A
>
that gives you an actual <A
CLASS="glossterm"
HREF="glossary.htm#G-VALUE"
><EM
CLASS="emphasis"
>value</EM
></A
> instead of merely representing possible
values like a <A
CLASS="glossterm"
HREF="glossary.htm#G-VARIABLE"
><EM
CLASS="emphasis"
>variable</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-LITTLE-ENDIAN"
><B
CLASS="emphasis.bold"
>little-endian</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>From Swift:  someone who eats boiled eggs little end first.
Also used of computers that store the least significant <A
CLASS="glossterm"
HREF="glossary.htm#G-BYTE"
><EM
CLASS="emphasis"
>byte</EM
></A
> of a word at
a lower byte address than the most significant byte.
Often considered superior to big-endian machines.
See also
<A
CLASS="glossterm"
HREF="glossary.htm#G-BIG-ENDIAN"
><EM
CLASS="emphasis"
>big-endian</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-LOCAL"
><B
CLASS="emphasis.bold"
>local</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Not meaning the same thing everywhere.  A <A
CLASS="glossterm"
HREF="glossary.htm#G-VARIABLE"
><EM
CLASS="emphasis"
>variable</EM
></A
> in
Perl can be localized inside a <A
CLASS="glossterm"
HREF="glossary.htm#G-BLOCK"
><EM
CLASS="emphasis"
>block</EM
></A
> or a <A
CLASS="glossterm"
HREF="glossary.htm#G-PACKAGE"
><EM
CLASS="emphasis"
>package</EM
></A
>.
See <A
CLASS="glossterm"
HREF="glossary.htm#G-SCOPE"
><EM
CLASS="emphasis"
>scope</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-LOGICAL-OPERATOR"
><B
CLASS="emphasis.bold"
>logical operator</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Symbols representing the concepts &quot;and&quot;, &quot;or&quot;, and &quot;not&quot;.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-LOOP"
><B
CLASS="emphasis.bold"
>loop</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A construct that performs something repeatedly, like a roller coaster.
(Go to the next entry if you're tired of riding this one.)  See <A
CLASS="glossterm"
HREF="glossary.htm#G-LOOP"
><EM
CLASS="emphasis"
>loop</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-LOOP-CONTROL-STATEMENT"
><B
CLASS="emphasis.bold"
>loop control statement</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Any statement within the body of a loop that can make a loop stop
looping or skip an <A
CLASS="glossterm"
HREF="glossary.htm#G-ITERATION"
><EM
CLASS="emphasis"
>iteration</EM
></A
>.  See the middle sentence of the previous
entry.  Generally you shouldn't try this on roller coasters without a
parachute.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-LOOP-LABEL"
><B
CLASS="emphasis.bold"
>loop label</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A kind of key or name attached to a loop so that loop control statements
can talk about which loop they want to control.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-LVALUE"
><B
CLASS="emphasis.bold"
>lvalue</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Term used by language-lawyers for a location you can assign a new
<A
CLASS="glossterm"
HREF="glossary.htm#G-VALUE"
><EM
CLASS="emphasis"
>value</EM
></A
> to, such as a <A
CLASS="glossterm"
HREF="glossary.htm#G-VARIABLE"
><EM
CLASS="emphasis"
>variable</EM
></A
> or an element of an
<A
CLASS="glossterm"
HREF="glossary.htm#G-ARRAY"
><EM
CLASS="emphasis"
>array</EM
></A
>.  The &quot;l&quot; is short for &quot;left&quot;, as in the left side of an
assignment, a typical place for lvalues.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-MAGICAL-INCREMENT"
><B
CLASS="emphasis.bold"
>magical increment</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An <A
CLASS="glossterm"
HREF="glossary.htm#G-INCREMENT"
><EM
CLASS="emphasis"
>increment</EM
></A
> operator that knows how to add <CODE
CLASS="literal"
>1</CODE
> to alphanumeric
strings as well as to numbers.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-MAGICAL-VARIABLES"
><B
CLASS="emphasis.bold"
>magical variables</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Special variables that have side effects when you access them or assign
to them.  For example, in Perl, changing elements of the <B
CLASS="emphasis.bold"
>%ENV</B
>
array also changes the corresponding environment variables that
subprocesses will use.  Reading the <B
CLASS="emphasis.bold"
>$!</B
> variable gives you the
current UNIX error number or message.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-MANPAGE"
><B
CLASS="emphasis.bold"
>manpage</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A &quot;page&quot; from the UNIX manuals, typically accessed online via the
<EM
CLASS="emphasis"
>man</EM
>(1) command.  A manpage contains a synopsis, a description, a
list of bugs, and so on, and is typically longer than a page.  There are
manpages documenting <EM
CLASS="emphasis"
>commands, system calls</EM
>, <EM
CLASS="emphasis"
>library
functions</EM
>, <EM
CLASS="emphasis"
>devices</EM
>, <EM
CLASS="emphasis"
>protocols</EM
>, <EM
CLASS="emphasis"
>files</EM
>, and such.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-MANTISSA"
><B
CLASS="emphasis.bold"
>mantissa</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The part of a <EM
CLASS="emphasis"
>floating-point</EM
> number that gives the digits of the
number without saying where the decimal point really belongs.  See
<A
CLASS="glossterm"
HREF="glossary.htm#G-EXPONENT"
><EM
CLASS="emphasis"
>exponent</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-MATCHING"
><B
CLASS="emphasis.bold"
>matching</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>See <A
CLASS="glossterm"
HREF="glossary.htm#G-PATTERN-MATCHING"
><EM
CLASS="emphasis"
>pattern matching</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-METACHARACTER"
><B
CLASS="emphasis.bold"
>metacharacter</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-CHARACTER"
><EM
CLASS="emphasis"
>character</EM
></A
> that is not supposed to be treated normally.  Which
characters are to be treated specially as metacharacters
varies greatly from context to
context.  Your <A
CLASS="glossterm"
HREF="glossary.htm#G-SHELL"
><EM
CLASS="emphasis"
>shell</EM
></A
> will have certain metacharacters, double-quoted Perl
strings have other metacharacters, and patterns have all the
double-quote metacharacters plus some extra ones.  In addition, people
sometimes use this term to describe characters that have the eighth bit
set.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-METHOD"
><B
CLASS="emphasis.bold"
>method</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A kind of action that an <A
CLASS="glossterm"
HREF="glossary.htm#G-OBJECT"
><EM
CLASS="emphasis"
>object</EM
></A
> can take if
you direct it to.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-MINIMALISM"
><B
CLASS="emphasis.bold"
>minimalism</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The belief that &quot;small is beautiful.&quot; Paradoxically, if you say
something in a small language, it turns out big, and if you say it in a
big language, it turns out small.  Go figure.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-MODE"
><B
CLASS="emphasis.bold"
>mode</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>In the context of the <EM
CLASS="emphasis"
>stat</EM
>(2) system call, refers to the word holding
the permissions and the type of the file.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-MODIFIER"
><B
CLASS="emphasis.bold"
>modifier</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-CONDITIONAL"
><EM
CLASS="emphasis"
>conditional</EM
></A
> or <A
CLASS="glossterm"
HREF="glossary.htm#G-LOOP"
><EM
CLASS="emphasis"
>loop</EM
></A
> that you put
after the <A
CLASS="glossterm"
HREF="glossary.htm#G-STATEMENT"
><EM
CLASS="emphasis"
>statement</EM
></A
> instead of before, if you know what I mean.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-MODULE"
><B
CLASS="emphasis.bold"
>module</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-FILE"
><EM
CLASS="emphasis"
>file</EM
></A
> that defines a <A
CLASS="glossterm"
HREF="glossary.htm#G-PACKAGE"
><EM
CLASS="emphasis"
>package</EM
></A
> of (almost) the same name,
which can either <A
CLASS="glossterm"
HREF="glossary.htm#G-EXPORT"
><EM
CLASS="emphasis"
>export</EM
></A
> symbols or function as an <A
CLASS="glossterm"
HREF="glossary.htm#G-OBJECT"
><EM
CLASS="emphasis"
>object</EM
></A
>
<A
CLASS="glossterm"
HREF="glossary.htm#G-CLASS"
><EM
CLASS="emphasis"
>class</EM
></A
>.  The unit of reusability in Perl.  See the <A
CLASS="xref"
HREF="ch03_185.htm"
TITLE="use"
><B
CLASS="xref.cmd"
>use</B
></A
>
operator.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-MODULUS"
><B
CLASS="emphasis.bold"
>modulus</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A divisor, when you're interested in the remainder instead of the quotient.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-MULTI-DIMENSIONAL-ARRAY"
><B
CLASS="emphasis.bold"
>multi-dimensional array</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An array with multiple subscripts for finding a single element.
Perl does them with <EM
CLASS="emphasis"
>references</EM
>&nbsp;- see <A
CLASS="xref"
HREF="ch04_01.htm"
TITLE="References and Nested Data Structures"
>Chapter 4</A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-MULTIPLE-INHERITANCE"
><B
CLASS="emphasis.bold"
>multiple inheritance</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The features you got from your mother and father, mixed together
unpredictably.  (See also <A
CLASS="glossterm"
HREF="glossary.htm#G-INHERITANCE"
><EM
CLASS="emphasis"
>inheritance</EM
></A
>, and <EM
CLASS="emphasis"
>single
inheritance</EM
>.)  In computer languages (including Perl), the notion
that a given class may have multiple direct ancestors or <EM
CLASS="emphasis"
>base classes</EM
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-NAMESPACE"
><B
CLASS="emphasis.bold"
>namespace</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A domain of names.  You needn't worry whether the names in one such domain
have been used in another.  See <A
CLASS="glossterm"
HREF="glossary.htm#G-PACKAGE"
><EM
CLASS="emphasis"
>package</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-NETWORK-ADDRESS"
><B
CLASS="emphasis.bold"
>network address</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The most important attribute of a socket, like your telephone's
telephone number.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-NEWLINE"
><B
CLASS="emphasis.bold"
>newline</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A single character that represents the end of a line, with the ASCII
value of 012 octal under UNIX (but 015 on a Mac), and represented by
<CODE
CLASS="literal"
>\n</CODE
> in Perl strings.  For certain physical devices like
terminals, this gets translated to a line feed and a carriage return.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-NULL-CHARACTER"
><B
CLASS="emphasis.bold"
>null character</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A character with the ASCII value of zero.  It's used by C and some UNIX
system calls to terminate strings, but Perl allows strings to contain a
null.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-NULL-LIST"
><B
CLASS="emphasis.bold"
>null list</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-LIST-VALUE"
><EM
CLASS="emphasis"
>list value</EM
></A
> with zero elements, represented in Perl by <CODE
CLASS="literal"
>()</CODE
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-NULL-STRING"
><B
CLASS="emphasis.bold"
>null string</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-STRING"
><EM
CLASS="emphasis"
>string</EM
></A
> not containing any characters, not to be confused with
a string containing a <A
CLASS="glossterm"
HREF="glossary.htm#G-NULL-CHARACTER"
><EM
CLASS="emphasis"
>null character</EM
></A
>, which has a positive length.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-NUMERIC-CONTEXT"
><B
CLASS="emphasis.bold"
>numeric context</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The situation in which an expression is expected by its surroundings
(the code calling it) to return a number.  See also <A
CLASS="glossterm"
HREF="glossary.htm#G-CONTEXT"
><EM
CLASS="emphasis"
>context</EM
></A
> and
<A
CLASS="glossterm"
HREF="glossary.htm#G-STRING-CONTEXT"
><EM
CLASS="emphasis"
>string context</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-NYBBLE"
><B
CLASS="emphasis.bold"
>nybble</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Half a byte, equivalent to one hexadecimal digit.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-OBJECT"
><B
CLASS="emphasis.bold"
>object</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Something that &quot;knows&quot; what kind of thing it is, and what it can do
because of what kind of thing it is.  Your program can request an object
to do things, but the object gets to decide whether it wants to do it or
not.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-OCTAL"
><B
CLASS="emphasis.bold"
>octal</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A number in base eight.  Only the digits zero through seven
are allowed.  Octal constants in Perl start with zero, as in 013.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-OFFSET"
><B
CLASS="emphasis.bold"
>offset</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>How many things you have to skip over when moving from the beginning of a
string or array to a specific position within it.  Thus, the
minimum offset is zero, not one, because you don't skip
anything to get to the first item.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-OPERAND"
><B
CLASS="emphasis.bold"
>operand</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>You, after you dial the operator on your phone.  Or, an expression that
gives a <A
CLASS="glossterm"
HREF="glossary.htm#G-VALUE"
><EM
CLASS="emphasis"
>value</EM
></A
> that an operator operates on.  See also <A
CLASS="glossterm"
HREF="glossary.htm#G-PRECEDENCE"
><EM
CLASS="emphasis"
>precedence</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-OPERATING-SYSTEM"
><B
CLASS="emphasis.bold"
>operating system</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A special program that runs on the bare machine
and hides the gory details of managing <EM
CLASS="emphasis"
>processes</EM
> and
<EM
CLASS="emphasis"
>devices</EM
>.  It is usually used in a looser sense to indicate a
particular culture of programming.  The loose sense can be used at
varying levels of specificity.  At one extreme, you might say that all
versions of UNIX and UNIX-lookalikes are the same operating system
(upsetting many people, especially some lawyers).  At the other extreme,
this particular version of this particular vendor's operating system is
different than any other version of this or any other vendor's operating
system.  Perl is much more portable across operating systems than many
other languages.  See also <A
CLASS="glossterm"
HREF="glossary.htm#G-ARCHITECTURE"
><EM
CLASS="emphasis"
>architecture</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-OPERATOR"
><B
CLASS="emphasis.bold"
>operator</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-FUNCTION"
><EM
CLASS="emphasis"
>function</EM
></A
>, generally one that is built into a language, often
with a special syntax or symbol.  A given operator may have specific
expectations about what <EM
CLASS="emphasis"
>types</EM
> of data you give as its arguments
(operands) and what type of data you want back from it.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-OPERATOR-OVERLOADING"
><B
CLASS="emphasis.bold"
>operator overloading</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A kind of <A
CLASS="glossterm"
HREF="glossary.htm#G-OVERLOADING"
><EM
CLASS="emphasis"
>overloading</EM
></A
> that you can do on the built-in
<EM
CLASS="emphasis"
>operators</EM
> to make them work (syntactically) on <EM
CLASS="emphasis"
>objects</EM
> as if
they were ordinary scalar values, but with the actual semantics supplied
by the object class.  This is set up with the overload <A
CLASS="glossterm"
HREF="glossary.htm#G-PRAGMA"
><EM
CLASS="emphasis"
>pragma</EM
></A
>&nbsp;- see
<A
CLASS="xref"
HREF="ch07_01.htm"
TITLE="The Standard Perl Library"
>Chapter 7, <CITE
CLASS="chapter"
>The Standard Perl Library</CITE
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-OPTIONS"
><B
CLASS="emphasis.bold"
>options</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>See <EM
CLASS="emphasis"
>switches</EM
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-OVERLOADING"
><B
CLASS="emphasis.bold"
>overloading</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Giving additional meanings to a symbol or construct.  Actually, all
languages do overloading to one extent or another, since people are good
at figuring out things from <A
CLASS="glossterm"
HREF="glossary.htm#G-CONTEXT"
><EM
CLASS="emphasis"
>context</EM
></A
>.  If you look in your dictionary,
you will find that the meaning of the word &quot;single&quot; is not single.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-OVERRIDING"
><B
CLASS="emphasis.bold"
>overriding</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Hiding or invalidating some other definition of the same name.  (Not to
be confused with <A
CLASS="glossterm"
HREF="glossary.htm#G-OVERLOADING"
><EM
CLASS="emphasis"
>overloading</EM
></A
>, which only adds definitions.)  To
confuse the issue further, we use the word with two overloaded
definitions: to describe how you can define your own <A
CLASS="glossterm"
HREF="glossary.htm#G-SUBROUTINE"
><EM
CLASS="emphasis"
>subroutine</EM
></A
>
that hides a built-in <A
CLASS="glossterm"
HREF="glossary.htm#G-FUNCTION"
><EM
CLASS="emphasis"
>function</EM
></A
> of the same name, and also to
describe how you can define a replacement <A
CLASS="glossterm"
HREF="glossary.htm#G-METHOD"
><EM
CLASS="emphasis"
>method</EM
></A
> in a <EM
CLASS="emphasis"
>derived
class</EM
> that hides a <A
CLASS="glossterm"
HREF="glossary.htm#G-BASE-CLASS"
><EM
CLASS="emphasis"
>base class</EM
></A
>'s method of the same name.
You'll find both of these usages in <A
CLASS="xref"
HREF="ch05_01.htm"
TITLE="Packages, Modules, and Object Classes"
>Chapter 5</A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-OWNER"
><B
CLASS="emphasis.bold"
>owner</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The one user (apart from the superuser) who has absolute control over a
<A
CLASS="glossterm"
HREF="glossary.htm#G-FILE"
><EM
CLASS="emphasis"
>file</EM
></A
>.  A file may also have a <A
CLASS="glossterm"
HREF="glossary.htm#G-GROUP"
><EM
CLASS="emphasis"
>group</EM
></A
> of users that may exercise
joint ownership if the real owner permits them.  See <EM
CLASS="emphasis"
>permission
flags</EM
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PACKAGE"
><B
CLASS="emphasis.bold"
>package</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A quantity of code that values its privacy, and tries to keep other code
from trespassing upon its <A
CLASS="glossterm"
HREF="glossary.htm#G-NAMESPACE"
><EM
CLASS="emphasis"
>namespace</EM
></A
>
by fencing all of its private belongings (<EM
CLASS="emphasis"
>variables</EM
>
and <EM
CLASS="emphasis"
>subroutines</EM
>) into its own area.  A variable or subroutine mentioned
in the package belongs only to that package, even if there's another
variable or subroutine with an identical name in some other package.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PACKAGE-LOCAL"
><B
CLASS="emphasis.bold"
>package local</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-VARIABLE"
><EM
CLASS="emphasis"
>variable</EM
></A
> or <A
CLASS="glossterm"
HREF="glossary.htm#G-SUBROUTINE"
><EM
CLASS="emphasis"
>subroutine</EM
></A
> belonging to a package and not
visible to anyone else.  At least, not without peeking.  See
<A
CLASS="glossterm"
HREF="glossary.htm#G-NAMESPACE"
><EM
CLASS="emphasis"
>namespace</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PARAMETER"
><B
CLASS="emphasis.bold"
>parameter</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>See <A
CLASS="glossterm"
HREF="glossary.htm#G-ARGUMENT"
><EM
CLASS="emphasis"
>argument</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PARSING"
><B
CLASS="emphasis.bold"
>parsing</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The subtle but sometimes brutal art of attempting to turn your possibly
malformed program into a valid <A
CLASS="glossterm"
HREF="glossary.htm#G-SYNTAX-TREE"
><EM
CLASS="emphasis"
>syntax tree</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PATH"
><B
CLASS="emphasis.bold"
>PATH</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The list of <EM
CLASS="emphasis"
>directories</EM
> the system looks in to find a program
you want to <A
CLASS="glossterm"
HREF="glossary.htm#G-EXECUTE"
><EM
CLASS="emphasis"
>execute</EM
></A
>.  The list is stored as one of your <EM
CLASS="emphasis"
>environment
variables</EM
>, accessible in Perl as <CODE
CLASS="literal"
>$ENV{PATH}</CODE
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PATHNAME"
><B
CLASS="emphasis.bold"
>pathname</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A fully qualified filename such as <EM
CLASS="emphasis"
>/usr/bin/perl</EM
> or
<EM
CLASS="emphasis"
>C:\my_apps\perl.exe</EM
>.  Sometimes confused with <CODE
CLASS="literal"
>PATH</CODE
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PATTERN-MATCHING"
><B
CLASS="emphasis.bold"
>pattern matching</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Taking a pattern, expressed as a <A
CLASS="glossterm"
HREF="glossary.htm#G-REGULAR-EXPRESSION"
><EM
CLASS="emphasis"
>regular expression</EM
></A
>, and trying the
pattern various ways on a string to see if there's any way to
make it fit.  Often used to pick interesting tidbits out of a file.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PERMISSION-FLAGS"
><B
CLASS="emphasis.bold"
>permission flags</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Bits that the <A
CLASS="glossterm"
HREF="glossary.htm#G-OWNER"
><EM
CLASS="emphasis"
>owner</EM
></A
> of a file sets or unsets in order to allow or
disallow access to other people.  These flags are part of the <A
CLASS="glossterm"
HREF="glossary.htm#G-MODE"
><EM
CLASS="emphasis"
>mode</EM
></A
>
word returned by the <A
CLASS="xref"
HREF="ch03_159.htm"
TITLE="stat"
><B
CLASS="xref.cmd"
>stat</B
></A
> operator when you ask about a file.
On UNIX systems you can check the <EM
CLASS="emphasis"
>ls</EM
>(1) manpage for more
information about the permission flags.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PERN"
><B
CLASS="emphasis.bold"
>Pern</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>What you get when you do Perl<CODE
CLASS="literal"
>++</CODE
> twice.  Increment it only
once, and your hair curls.  Increment it three times, and you get a
tasty beverage that isn't Java.  See also <A
CLASS="glossterm"
HREF="glossary.htm#G-SLICE"
><EM
CLASS="emphasis"
>slice</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PIPE"
><B
CLASS="emphasis.bold"
>pipe</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A direct <A
CLASS="glossterm"
HREF="glossary.htm#G-CONNECTION"
><EM
CLASS="emphasis"
>connection</EM
></A
> that carries the output of one <A
CLASS="glossterm"
HREF="glossary.htm#G-PROCESS"
><EM
CLASS="emphasis"
>process</EM
></A
> to the input
of another without the necessity of an intermediate temporary file.
Once the pipe is set up, the two processes in question can mostly read
and write as if they were talking to a normal file.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PIPELINE"
><B
CLASS="emphasis.bold"
>pipeline</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A series of <EM
CLASS="emphasis"
>processes</EM
> all in a row, linked by <EM
CLASS="emphasis"
>pipes</EM
>,
where each passes
its output to the next.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-POINTER"
><B
CLASS="emphasis.bold"
>pointer</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-VARIABLE"
><EM
CLASS="emphasis"
>variable</EM
></A
> in a language like C that contains the exact memory
location of some other item.  Perl handles pointers internally so you
don't have to worry about them.  Instead, you just use symbolic pointers
in the form of <EM
CLASS="emphasis"
>keys</EM
> and <A
CLASS="glossterm"
HREF="glossary.htm#G-VARIABLE"
><EM
CLASS="emphasis"
>variable</EM
></A
> names, or <EM
CLASS="emphasis"
>hard
references</EM
>, which aren't pointers (but act like pointers, and do in
fact contain pointers).</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PORT"
><B
CLASS="emphasis.bold"
>port</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The part of the address
of a TCP or UDP socket that directs packets to the correct process after
finding the right machine, something like the phone extension number you
give when you reach the company operator.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PRAGMA"
><B
CLASS="emphasis.bold"
>pragma</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A library module whose practical hints and suggestions are received (and
possibly ignored) by the compiler.  [&lt; Gr]</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PRECEDENCE"
><B
CLASS="emphasis.bold"
>precedence</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The rules of conduct that, in the absence of other guidance, determine
what should happen first (i.e., in the absence of parentheses,
you always do multiplication before addition).</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PREPROCESSING"
><B
CLASS="emphasis.bold"
>preprocessing</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>What some other helper <A
CLASS="glossterm"
HREF="glossary.htm#G-PROCESS"
><EM
CLASS="emphasis"
>process</EM
></A
> did to transform the incoming data
into a form more suitable for the current process.  Often done with an
incoming <A
CLASS="glossterm"
HREF="glossary.htm#G-PIPE"
><EM
CLASS="emphasis"
>pipe</EM
></A
>.  See also <A
CLASS="glossterm"
HREF="glossary.htm#G-C-PREPROCESSOR"
><EM
CLASS="emphasis"
>C preprocessor</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PROCEDURE"
><B
CLASS="emphasis.bold"
>procedure</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-SUBROUTINE"
><EM
CLASS="emphasis"
>subroutine</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PROCESS"
><B
CLASS="emphasis.bold"
>process</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An instance of a running program.  Under multi-tasking systems like
UNIX, two or more separate processes could be running the same program
independently at the same time&nbsp;- in fact, the <A
CLASS="xref"
HREF="ch03_040.htm"
TITLE="fork"
><B
CLASS="xref.cmd"
>fork</B
></A
> function is designed
to bring about this happy state of affairs.  Under other operating
systems processes are sometimes called &quot;tasks&quot; or &quot;jobs&quot;.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PROTOCOL"
><B
CLASS="emphasis.bold"
>protocol</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>In networking, an agreed-upon way of sending messages back and forth
so that neither correspondent will get too confused.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PSEUDO-LITERAL"
><B
CLASS="emphasis.bold"
>pseudo literal</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An <A
CLASS="glossterm"
HREF="glossary.htm#G-OPERATOR"
><EM
CLASS="emphasis"
>operator</EM
></A
> that looks something like a <A
CLASS="glossterm"
HREF="glossary.htm#G-LITERAL"
><EM
CLASS="emphasis"
>literal</EM
></A
>, such as the
output-grabbing operator, <CODE
CLASS="literal"
>`</CODE
><CODE
CLASS="replaceable"
><I
>command</I
></CODE
><CODE
CLASS="literal"
>`</CODE
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PSEUDO-TERMINAL"
><B
CLASS="emphasis.bold"
>pseudo terminal</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A thing that looks like an ordinary terminal to the computer, but instead
of being attached to a real terminal, is really attached to another
computer program, which is doing the pseudotyping.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PUBLIC-DOMAIN"
><B
CLASS="emphasis.bold"
>public domain</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Something not owned by anybody.  Perl is copyrighted, and is thus
<EM
CLASS="emphasis"
>not</EM
> in the public domain&nbsp;- it's just <A
CLASS="glossterm"
HREF="glossary.htm#G-FREELY-AVAILABLE"
><EM
CLASS="emphasis"
>freely available</EM
></A
> and
<A
CLASS="glossterm"
HREF="glossary.htm#G-FREELY-REDISTRIBUTABLE"
><EM
CLASS="emphasis"
>freely redistributable</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-PV"
><B
CLASS="emphasis.bold"
>PV</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A &quot;pointer value&quot;, which is Perl Internals Talk for a <CODE
CLASS="literal"
>char*</CODE
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-QUALIFIED"
><B
CLASS="emphasis.bold"
>qualified</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Possessing an explicit package name.  The symbol <CODE
CLASS="literal"
>$ex::loser</CODE
> is
qualified; <CODE
CLASS="literal"
>$loser</CODE
> is unqualified.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-READABLE"
><B
CLASS="emphasis.bold"
>readable</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>With regard to files, one that has the proper permission bit set
to let you access the file. With regard to computer programs, one that's well enough written that
someone can come back later and have a chance of figuring out what
it's trying to do.  Who knows, you might even have to come back and figure
out your own program.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-RECORD"
><B
CLASS="emphasis.bold"
>record</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A set of related data values in a <A
CLASS="glossterm"
HREF="glossary.htm#G-FILE"
><EM
CLASS="emphasis"
>file</EM
></A
> or stream, often associated
with a unique <A
CLASS="glossterm"
HREF="glossary.htm#G-KEY"
><EM
CLASS="emphasis"
>key</EM
></A
> field.  In UNIX, often commensurate with a <A
CLASS="glossterm"
HREF="glossary.htm#G-LINE"
><EM
CLASS="emphasis"
>line</EM
></A
>,
or a blank-line-delimited set of lines (a &quot;paragraph&quot;).  Each line of
the <EM
CLASS="emphasis"
>/etc/passwd</EM
> file is a record, keyed on login name, containing
information about that user.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-RECURSION"
><B
CLASS="emphasis.bold"
>recursion</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The art of defining something (at least partly) in terms of itself by
means of <EM
CLASS="emphasis"
>recursion</EM
>,
which is a naughty no-no in dictionaries.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-REFERENCE"
><B
CLASS="emphasis.bold"
>reference</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A place you look to find a pointer to information stored somewhere else.  (See
<A
CLASS="glossterm"
HREF="glossary.htm#G-INDIRECTION"
><EM
CLASS="emphasis"
>indirection</EM
></A
>.)  References come in two flavors, <EM
CLASS="emphasis"
>symbolic
references</EM
>, and <EM
CLASS="emphasis"
>hard references</EM
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-REGULAR-EXPRESSION"
><B
CLASS="emphasis.bold"
>regular expression</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A single entity with various interpretations, like an elephant.  To a
computer scientist, it's a grammar for a little language in which some
strings are legal and others aren't.  To normal people, it's a pattern
that you can use to find what you're looking for when it varies from
case to case.  Example of a regular expression:</P
><PRE
CLASS="programlisting"
>/Oh s.*t./</PRE
><P
CLASS="para"
>This pattern will match strings like <CODE
CLASS="literal"
>&quot;Oh say can you see by the dawn's early
light,&quot;</CODE
> and <CODE
CLASS="literal"
>&quot;Oh sit!&quot;</CODE
>.  See the section &quot;Regular Expressions&quot;
in <A
CLASS="xref"
HREF="ch02_01.htm"
TITLE="The Gory Details"
>Chapter 2</A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-REGULAR-FILE"
><B
CLASS="emphasis.bold"
>regular file</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-FILE"
><EM
CLASS="emphasis"
>file</EM
></A
> that's not a <A
CLASS="glossterm"
HREF="glossary.htm#G-DIRECTORY"
><EM
CLASS="emphasis"
>directory</EM
></A
>, a <A
CLASS="glossterm"
HREF="glossary.htm#G-DEVICE"
><EM
CLASS="emphasis"
>device</EM
></A
>, a named
<A
CLASS="glossterm"
HREF="glossary.htm#G-PIPE"
><EM
CLASS="emphasis"
>pipe</EM
></A
> or <A
CLASS="glossterm"
HREF="glossary.htm#G-SOCKET"
><EM
CLASS="emphasis"
>socket</EM
></A
>, or a <A
CLASS="glossterm"
HREF="glossary.htm#G-SYMBOLIC-LINK"
><EM
CLASS="emphasis"
>symbolic link</EM
></A
>.
Perl uses the <CODE
CLASS="literal"
>-f</CODE
> <EM
CLASS="emphasis"
>file test
operator</EM
> to identify regular files.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-RELATION"
><B
CLASS="emphasis.bold"
>relation</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Jargon used by relational database folks to mean a <A
CLASS="glossterm"
HREF="glossary.htm#G-FILE"
><EM
CLASS="emphasis"
>file</EM
></A
>&nbsp;- albeit a
particular sort of file, tabular in form, in which all the tuples
(<EM
CLASS="emphasis"
>records</EM
>) are of the same kind, each containing the same domains
(<EM
CLASS="emphasis"
>keys</EM
>) and ranges (<EM
CLASS="emphasis"
>fields</EM
>).  The UNIX <EM
CLASS="emphasis"
>/etc/passwd</EM
> file
is a relation keyed on login name.  It's called a relation because it
relates keys and fields in much the same way as an hash associates
keys and values.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-RELATIONAL-OPERATOR"
><B
CLASS="emphasis.bold"
>relational operator</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An operator that says whether a particular ordering relationship is
<A
CLASS="glossterm"
HREF="glossary.htm#G-TRUE"
><EM
CLASS="emphasis"
>true</EM
></A
> about a pair of operands.  Perl has both numeric and string
relational operators.  See <A
CLASS="glossterm"
HREF="glossary.htm#G-COLLATING-SEQUENCE"
><EM
CLASS="emphasis"
>collating sequence</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-RESERVED-WORDS"
><B
CLASS="emphasis.bold"
>reserved words</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A word with a specific, built-in meaning to a <A
CLASS="glossterm"
HREF="glossary.htm#G-COMPILER"
><EM
CLASS="emphasis"
>compiler</EM
></A
>, such as
<B
CLASS="emphasis.bold"
>if</B
> or <A
CLASS="xref"
HREF="ch03_026.htm"
TITLE="delete"
><B
CLASS="xref.cmd"
>delete</B
></A
>.  In many languages (not Perl) it's illegal to
use reserved words to name anything else.  (Which is why they're
reserved, after all.)  In Perl, you just can't use them to name
<EM
CLASS="emphasis"
>labels</EM
> or <EM
CLASS="emphasis"
>filehandles</EM
>.  Also called &quot;keywords&quot;.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-RETURN-VALUE"
><B
CLASS="emphasis.bold"
>return value</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The <A
CLASS="glossterm"
HREF="glossary.htm#G-VALUE"
><EM
CLASS="emphasis"
>value</EM
></A
> produced by a <A
CLASS="glossterm"
HREF="glossary.htm#G-SUBROUTINE"
><EM
CLASS="emphasis"
>subroutine</EM
></A
> or <A
CLASS="glossterm"
HREF="glossary.htm#G-EXPRESSION"
><EM
CLASS="emphasis"
>expression</EM
></A
> when
evaluated.  In Perl, a return value may be either a <A
CLASS="glossterm"
HREF="glossary.htm#G-OLIST"
><EM
CLASS="emphasis"
>list</EM
></A
> or a
<A
CLASS="glossterm"
HREF="glossary.htm#G-SCALAR"
><EM
CLASS="emphasis"
>scalar</EM
></A
> value.  The subroutine call <CODE
CLASS="literal"
>piglatin('bingo')</CODE
> returns
the value &quot;<CODE
CLASS="literal"
>ingobay</CODE
>&quot;.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-RIGHT-SHIFT"
><B
CLASS="emphasis.bold"
>right shift</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-BIT-SHIFT"
><EM
CLASS="emphasis"
>bit shift</EM
></A
> that divides a number by some power of two.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-RUNTIME"
><B
CLASS="emphasis.bold"
>run-time</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The time when Perl is actually doing what your script says to do, as
opposed to the earlier period of time when it was trying to figure out
whether what you said made any sense whatsoever.  See also <A
CLASS="glossterm"
HREF="glossary.htm#G-COMPILE-TIME"
><EM
CLASS="emphasis"
>compile-time</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-RUNTIME-PATTERN"
><B
CLASS="emphasis.bold"
>run-time pattern</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A pattern that contains one or more variables to be interpolated
before parsing the pattern as a <A
CLASS="glossterm"
HREF="glossary.htm#G-REGULAR-EXPRESSION"
><EM
CLASS="emphasis"
>regular expression</EM
></A
>, and that therefore
cannot be analyzed at compile time, but must be re-analyzed each time
the pattern match operator is evaluated.  Run-time patterns are useful
but expensive.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-RVALUE"
><B
CLASS="emphasis.bold"
>rvalue</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-VALUE"
><EM
CLASS="emphasis"
>value</EM
></A
> that you might find on the right side of an
<A
CLASS="glossterm"
HREF="glossary.htm#G-ASSIGNMENT"
><EM
CLASS="emphasis"
>assignment</EM
></A
>.  See also <A
CLASS="glossterm"
HREF="glossary.htm#G-LVALUE"
><EM
CLASS="emphasis"
>lvalue</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SCALAR"
><B
CLASS="emphasis.bold"
>scalar</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A simple value, such as a number or string.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SCALAR-CONTEXT"
><B
CLASS="emphasis.bold"
>scalar context</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The situation in which an <A
CLASS="glossterm"
HREF="glossary.htm#G-EXPRESSION"
><EM
CLASS="emphasis"
>expression</EM
></A
> is expected by its
surroundings (the code calling it) to return a single <A
CLASS="glossterm"
HREF="glossary.htm#G-VALUE"
><EM
CLASS="emphasis"
>value</EM
></A
> rather
than a <A
CLASS="glossterm"
HREF="glossary.htm#G-OLIST"
><EM
CLASS="emphasis"
>list</EM
></A
> of values.  See also <A
CLASS="glossterm"
HREF="glossary.htm#G-CONTEXT"
><EM
CLASS="emphasis"
>context</EM
></A
> and <EM
CLASS="emphasis"
>list
context</EM
>. A scalar context sometimes imposes additional constraints on the return
value&nbsp;- see <A
CLASS="glossterm"
HREF="glossary.htm#G-STRING-CONTEXT"
><EM
CLASS="emphasis"
>string context</EM
></A
> and <A
CLASS="glossterm"
HREF="glossary.htm#G-NUMERIC-CONTEXT"
><EM
CLASS="emphasis"
>numeric context</EM
></A
>.  Sometimes we
talk about a <A
CLASS="glossterm"
HREF="glossary.htm#G-BOOLEAN-CONTEXT"
><EM
CLASS="emphasis"
>Boolean context</EM
></A
> inside conditionals, but this imposes no
additional constraints, since any scalar value, whether numeric or
<A
CLASS="glossterm"
HREF="glossary.htm#G-STRING"
><EM
CLASS="emphasis"
>string</EM
></A
>, is already true or false.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SCALAR-LITERAL"
><B
CLASS="emphasis.bold"
>scalar literal</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A number or quoted <A
CLASS="glossterm"
HREF="glossary.htm#G-STRING"
><EM
CLASS="emphasis"
>string</EM
></A
>&nbsp;- an
actual <A
CLASS="glossterm"
HREF="glossary.htm#G-VALUE"
><EM
CLASS="emphasis"
>value</EM
></A
> in the text of your program, as opposed to a
<A
CLASS="glossterm"
HREF="glossary.htm#G-VARIABLE"
><EM
CLASS="emphasis"
>variable</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SCALAR-VALUE"
><B
CLASS="emphasis.bold"
>scalar value</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A value that happens to be a
<A
CLASS="glossterm"
HREF="glossary.htm#G-SCALAR"
><EM
CLASS="emphasis"
>scalar</EM
></A
> as opposed to a <A
CLASS="glossterm"
HREF="glossary.htm#G-OLIST"
><EM
CLASS="emphasis"
>list</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SCALAR-VARIABLE"
><B
CLASS="emphasis.bold"
>scalar variable</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-VARIABLE"
><EM
CLASS="emphasis"
>variable</EM
></A
> prefixed with
<CODE
CLASS="literal"
>$</CODE
> that holds a single value.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SCOPE"
><B
CLASS="emphasis.bold"
>scope</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>How far away you can see a variable from, looking through one.  Perl has
two visibility mechanisms: it does <A
CLASS="glossterm"
HREF="glossary.htm#G-DYNAMIC-SCOPING"
><EM
CLASS="emphasis"
>dynamic scoping</EM
></A
> of <A
CLASS="xref"
HREF="ch03_087.htm"
TITLE="local"
><B
CLASS="xref.cmd"
>local</B
></A
>
<EM
CLASS="emphasis"
>variables</EM
>, meaning that the rest of the <A
CLASS="glossterm"
HREF="glossary.htm#G-BLOCK"
><EM
CLASS="emphasis"
>block</EM
></A
>, and any
<EM
CLASS="emphasis"
>subroutines</EM
> that are called by the rest of the block, can see the
variables that are local to the block.  Perl does <A
CLASS="glossterm"
HREF="glossary.htm#G-LEXICAL-SCOPING"
><EM
CLASS="emphasis"
>lexical scoping</EM
></A
>
of <A
CLASS="xref"
HREF="ch03_097.htm"
TITLE="my"
><B
CLASS="xref.cmd"
>my</B
></A
> variables, meaning that the rest of the block can see the
variable, but other subroutines called by the block <EM
CLASS="emphasis"
>cannot</EM
> see the
variable.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SCRIPT"
><B
CLASS="emphasis.bold"
>script</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A text <A
CLASS="glossterm"
HREF="glossary.htm#G-FILE"
><EM
CLASS="emphasis"
>file</EM
></A
> that is a program intended to be <EM
CLASS="emphasis"
>executed</EM
>
directly rather than <EM
CLASS="emphasis"
>compiled</EM
> to another form of file before
execution.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SED"
><B
CLASS="emphasis.bold"
>sed</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A venerable stream editor from which Perl derives some of its ideas.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SERVER"
><B
CLASS="emphasis.bold"
>server</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>In networking, a <A
CLASS="glossterm"
HREF="glossary.htm#G-PROCESS"
><EM
CLASS="emphasis"
>process</EM
></A
> that either advertises a <A
CLASS="glossterm"
HREF="glossary.htm#G-SERVICE"
><EM
CLASS="emphasis"
>service</EM
></A
> or
just hangs around at a known location and waits for <EM
CLASS="emphasis"
>clients</EM
> who
need service to get in touch with it.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SERVICE"
><B
CLASS="emphasis.bold"
>service</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Something you do for someone else to make them happy, like giving them
the time of day (or of their life).  On some UNIX machines, well-known
services are listed by the <A
CLASS="xref"
HREF="ch03_066.htm"
TITLE="getservent"
><B
CLASS="xref.cmd"
>getservent</B
></A
> function.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SETGID"
><B
CLASS="emphasis.bold"
>setgid</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Same as setuid, only having to do with giving away <A
CLASS="glossterm"
HREF="glossary.htm#G-GROUP"
><EM
CLASS="emphasis"
>group</EM
></A
> privileges.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SETUID"
><B
CLASS="emphasis.bold"
>setuid</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Said of a program that runs with the privileges of its <A
CLASS="glossterm"
HREF="glossary.htm#G-OWNER"
><EM
CLASS="emphasis"
>owner</EM
></A
>
rather than (as is usually the case) the privileges of whoever is running
it. Also describes the bit in the mode word (<EM
CLASS="emphasis"
>permission
flags</EM
>) that implements the feature. This bit must be explicitly set
by the owner to implement this feature, and the program must be
written not to give away more privileges than it ought.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SHELL"
><B
CLASS="emphasis.bold"
>shell</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-COMMAND"
><EM
CLASS="emphasis"
>command</EM
></A
>-<EM
CLASS="emphasis"
>line</EM
> <A
CLASS="glossterm"
HREF="glossary.htm#G-INTERPRETER"
><EM
CLASS="emphasis"
>interpreter</EM
></A
>.  The program that interactively
gives you a prompt, accepts one or more <EM
CLASS="emphasis"
>lines</EM
> of input, and
executes the programs you mentioned, feeding each of them their proper
<EM
CLASS="emphasis"
>arguments</EM
> and input data.  Shells can also execute scripts
containing such commands.  Under the UNIX <A
CLASS="glossterm"
HREF="glossary.htm#G-OPERATING-SYSTEM"
><EM
CLASS="emphasis"
>operating system</EM
></A
>,
typical shells are the Bourne shell (<EM
CLASS="emphasis"
>/bin/sh</EM
>), the C shell
(<EM
CLASS="emphasis"
>/bin/csh</EM
>), and the Korn shell (<EM
CLASS="emphasis"
>/bin/ksh</EM
>).  Perl is not
strictly a shell because it's not interactive (although Perl programs
can be interactive).</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SIDE-EFFECTS"
><B
CLASS="emphasis.bold"
>side effects</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Something extra that happens when you evaluate an <A
CLASS="glossterm"
HREF="glossary.htm#G-EXPRESSION"
><EM
CLASS="emphasis"
>expression</EM
></A
>.
Nowadays it can refer to almost anything.  For example, evaluating a simple
assignment statement typically has the &quot;side effect&quot; of assigning a value
to a variable.  (And you thought assigning the value was your primary
intent in the first place!)  Likewise, assigning a value to the special
variable <CODE
CLASS="literal"
>$|</CODE
> has the side effect of forcing a flush after every
<A
CLASS="xref"
HREF="ch03_193.htm"
TITLE="write"
><B
CLASS="xref.cmd"
>write</B
></A
> or <A
CLASS="xref"
HREF="ch03_110.htm"
TITLE="print"
><B
CLASS="xref.cmd"
>print</B
></A
> on the currently selected filehandle.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SIGNAL-HANDLER"
><B
CLASS="emphasis.bold"
>signal handler</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-SUBROUTINE"
><EM
CLASS="emphasis"
>subroutine</EM
></A
> that, instead of being content to be called in the
normal fashion, sits around waiting for a bolt out of the blue before it
will deign to <A
CLASS="glossterm"
HREF="glossary.htm#G-EXECUTE"
><EM
CLASS="emphasis"
>execute</EM
></A
>.  Under UNIX, bolts out of the blue are called
signals, and you send them with a <A
CLASS="xref"
HREF="ch03_080.htm"
TITLE="kill"
><B
CLASS="xref.cmd"
>kill</B
></A
> command.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SINGLE-INHERITANCE"
><B
CLASS="emphasis.bold"
>single inheritance</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The features you got from your mother, if she told you you don't have a
father.  (See also <A
CLASS="glossterm"
HREF="glossary.htm#G-INHERITANCE"
><EM
CLASS="emphasis"
>inheritance</EM
></A
>, and <A
CLASS="glossterm"
HREF="glossary.htm#G-MULTIPLE-INHERITANCE"
><EM
CLASS="emphasis"
>multiple inheritance</EM
></A
>.)
In computer languages, the notion that <EM
CLASS="emphasis"
>classes</EM
> reproduce
asexually, so that a given class can only have one direct ancestor or
<A
CLASS="glossterm"
HREF="glossary.htm#G-BASE-CLASS"
><EM
CLASS="emphasis"
>base class</EM
></A
>.  Perl enforces no such restriction.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SLICE"
><B
CLASS="emphasis.bold"
>slice</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A selection of <A
CLASS="glossterm"
HREF="glossary.htm#G-ARRAY"
><EM
CLASS="emphasis"
>array</EM
></A
> <EM
CLASS="emphasis"
>elements</EM
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SOCKET"
><B
CLASS="emphasis.bold"
>socket</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An endpoint for network communication between two <EM
CLASS="emphasis"
>processes</EM
>, that
works much like a telephone.  The most important thing about a socket is
its <A
CLASS="glossterm"
HREF="glossary.htm#G-NETWORK-ADDRESS"
><EM
CLASS="emphasis"
>network address</EM
></A
> (like a phone number).  Different kinds of
sockets have different kinds of addresses&nbsp;- some look like filenames, and
some don't.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SOFT-REFERENCE"
><B
CLASS="emphasis.bold"
>soft reference</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>See <A
CLASS="glossterm"
HREF="glossary.htm#G-SYMBOLIC-REFERENCE"
><EM
CLASS="emphasis"
>symbolic reference</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-STANDARD-ERROR"
><B
CLASS="emphasis.bold"
>standard error</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The default output stream for making nasty remarks that don't belong in
<A
CLASS="glossterm"
HREF="glossary.htm#G-STANDARD-OUTPUT"
><EM
CLASS="emphasis"
>standard output</EM
></A
>.  Represented within a Perl program by the
<A
CLASS="glossterm"
HREF="glossary.htm#G-FILEHANDLE"
><EM
CLASS="emphasis"
>filehandle</EM
></A
> <CODE
CLASS="literal"
>STDERR</CODE
>.  You can use this stream explicitly, but the
operators <A
CLASS="xref"
HREF="ch03_027.htm"
TITLE="die"
><B
CLASS="xref.cmd"
>die</B
></A
> and <A
CLASS="xref"
HREF="ch03_192.htm"
TITLE="warn"
><B
CLASS="xref.cmd"
>warn</B
></A
> write to your standard error stream
automatically.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-STANDARD-IO"
><B
CLASS="emphasis.bold"
>standard I/O</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A standard C library for doing <EM
CLASS="emphasis"
>buffered</EM
> input and output to the
<A
CLASS="glossterm"
HREF="glossary.htm#G-OPERATING-SYSTEM"
><EM
CLASS="emphasis"
>operating system</EM
></A
>.  (The &quot;standard&quot; of standard I/O is only marginally
related to the &quot;standard&quot; of standard input and output.)  In general,
Perl relies on whatever implementation of standard I/O a given operating
system supplies, so the buffering characteristics of a Perl program on
one machine may not exactly match those on another machine.  Normally
this only influences efficiency, not semantics.  If your standard I/O
package is doing block buffering and you want it to <A
CLASS="glossterm"
HREF="glossary.htm#G-FLUSH"
><EM
CLASS="emphasis"
>flush</EM
></A
> the buffer
more often, just set the <B
CLASS="emphasis.bold"
>$|</B
> variable to a nonzero value.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-STANDARD-INPUT"
><B
CLASS="emphasis.bold"
>standard input</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The default input stream for your program, which if possible shouldn't
care where its data is coming from.  Represented within a Perl program
by the <A
CLASS="glossterm"
HREF="glossary.htm#G-FILEHANDLE"
><EM
CLASS="emphasis"
>filehandle</EM
></A
> <CODE
CLASS="literal"
>STDIN</CODE
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-STANDARD-OUTPUT"
><B
CLASS="emphasis.bold"
>standard output</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The default output stream for your program, which if possible shouldn't
care where its data is going.  Represented within a Perl program by the
<A
CLASS="glossterm"
HREF="glossary.htm#G-FILEHANDLE"
><EM
CLASS="emphasis"
>filehandle</EM
></A
> <CODE
CLASS="literal"
>STDOUT</CODE
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-STAT-STRUCTURE"
><B
CLASS="emphasis.bold"
>stat structure</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A special internal buffer in which Perl keeps the information about the
last <A
CLASS="glossterm"
HREF="glossary.htm#G-FILE"
><EM
CLASS="emphasis"
>file</EM
></A
> you requested information on.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-STATEMENT"
><B
CLASS="emphasis.bold"
>statement</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-COMMAND"
><EM
CLASS="emphasis"
>command</EM
></A
> to the computer about what to do next, like a step in a
recipe:  &quot;Add marmalade to batter and mix until mixed.&quot;  Not to be
confused with a <A
CLASS="glossterm"
HREF="glossary.htm#G-DECLARATION"
><EM
CLASS="emphasis"
>declaration</EM
></A
>, which doesn't tell the computer to do
anything, but just to learn something.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-STATIC"
><B
CLASS="emphasis.bold"
>static</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Varying slowly, compared to something else.  (Unfortunately, everything
is relatively stable compared to something else, except for certain
elementary particles, and we're not so sure about them.)  In computers,
where things are supposed to vary rapidly, &quot;static&quot; has a derogatory
connotation, indicating a slightly dysfunctional <A
CLASS="glossterm"
HREF="glossary.htm#G-VARIABLE"
><EM
CLASS="emphasis"
>variable</EM
></A
>, 
<A
CLASS="glossterm"
HREF="glossary.htm#G-SUBROUTINE"
><EM
CLASS="emphasis"
>subroutine</EM
></A
>,
or <A
CLASS="glossterm"
HREF="glossary.htm#G-METHOD"
><EM
CLASS="emphasis"
>method</EM
></A
>.  In
Perl culture, the word is considered to be politically incorrect.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-STATIC-METHOD"
><B
CLASS="emphasis.bold"
>static method</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>See <A
CLASS="glossterm"
HREF="glossary.htm#G-CLASS-METHOD"
><EM
CLASS="emphasis"
>class method</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-STATIC-SCOPING"
><B
CLASS="emphasis.bold"
>static scoping</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Same as <A
CLASS="glossterm"
HREF="glossary.htm#G-LEXICAL-SCOPING"
><EM
CLASS="emphasis"
>lexical scoping</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-STATUS"
><B
CLASS="emphasis.bold"
>status</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The <A
CLASS="glossterm"
HREF="glossary.htm#G-VALUE"
><EM
CLASS="emphasis"
>value</EM
></A
> returned to the parent <A
CLASS="glossterm"
HREF="glossary.htm#G-PROCESS"
><EM
CLASS="emphasis"
>process</EM
></A
> when one of its
child processes dies.  This value is placed in the special variable
<B
CLASS="emphasis.bold"
>$?</B
>.  Its upper eight <EM
CLASS="emphasis"
>bits</EM
> are the exit status of the defunct
process, and its lower eight bits identify the signal (if any) that the
process died from.  On UNIX systems, this status value is the same as the
status word returned by <EM
CLASS="emphasis"
>wait</EM
>(2).  See <A
CLASS="xref"
HREF="ch03_167.htm"
TITLE="system"
><B
CLASS="xref.cmd"
>system</B
></A
> in <A
CLASS="xref"
HREF="ch03_01.htm"
TITLE="Functions"
>Chapter 3</A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-STDERR"
><B
CLASS="emphasis.bold"
>STDERR</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>See <A
CLASS="glossterm"
HREF="glossary.htm#G-STANDARD-ERROR"
><EM
CLASS="emphasis"
>standard error</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-STDIN"
><B
CLASS="emphasis.bold"
>STDIN</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>See <A
CLASS="glossterm"
HREF="glossary.htm#G-STANDARD-INPUT"
><EM
CLASS="emphasis"
>standard input</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-STDIO"
><B
CLASS="emphasis.bold"
>STDIO</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>See <A
CLASS="glossterm"
HREF="glossary.htm#G-STANDARD-IO"
><EM
CLASS="emphasis"
>standard I/O</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-STDOUT"
><B
CLASS="emphasis.bold"
>STDOUT</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>See <A
CLASS="glossterm"
HREF="glossary.htm#G-STANDARD-OUTPUT"
><EM
CLASS="emphasis"
>standard output</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-STRING"
><B
CLASS="emphasis.bold"
>string</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A sequence of characters such as &quot;He said <B
CLASS="emphasis.bold"
>!@#*&amp;%@#*?\n</B
>.&quot;  A string
does not have to be entirely printable.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-STRING-CONTEXT"
><B
CLASS="emphasis.bold"
>string context</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The situation in which an expression is
expected by its surroundings (the code calling it) to return a <A
CLASS="glossterm"
HREF="glossary.htm#G-STRING"
><EM
CLASS="emphasis"
>string</EM
></A
>.
See also <A
CLASS="glossterm"
HREF="glossary.htm#G-CONTEXT"
><EM
CLASS="emphasis"
>context</EM
></A
> and <A
CLASS="glossterm"
HREF="glossary.htm#G-NUMERIC-CONTEXT"
><EM
CLASS="emphasis"
>numeric context</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-STRUCT"
><B
CLASS="emphasis.bold"
>struct</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>C keyword introducing a structure definition or name.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-STRUCTURE"
><B
CLASS="emphasis.bold"
>structure</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>See <A
CLASS="glossterm"
HREF="glossary.htm#G-DATA-STRUCTURE"
><EM
CLASS="emphasis"
>data structure</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SUBCLASS"
><B
CLASS="emphasis.bold"
>subclass</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>See <A
CLASS="glossterm"
HREF="glossary.htm#G-DERIVED-CLASS"
><EM
CLASS="emphasis"
>derived class</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SUBROUTINE"
><B
CLASS="emphasis.bold"
>subroutine</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A named
piece of program that can be invoked from elsewhere in the program in
order to accomplish some sub-goal of the program.  A subroutine is often
parameterized to accomplish different but related things depending on
its input <EM
CLASS="emphasis"
>arguments</EM
>.  If the subroutine returns a meaningful
<A
CLASS="glossterm"
HREF="glossary.htm#G-VALUE"
><EM
CLASS="emphasis"
>value</EM
></A
>, it is also called a <A
CLASS="glossterm"
HREF="glossary.htm#G-FUNCTION"
><EM
CLASS="emphasis"
>function</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SUBSCRIPT"
><B
CLASS="emphasis.bold"
>subscript</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-VALUE"
><EM
CLASS="emphasis"
>value</EM
></A
> that indicates the position of a particular <EM
CLASS="emphasis"
>array
element</EM
> in an array.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SUBSTRING"
><B
CLASS="emphasis.bold"
>substring</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A portion of a <A
CLASS="glossterm"
HREF="glossary.htm#G-STRING"
><EM
CLASS="emphasis"
>string</EM
></A
>, starting at a certain <A
CLASS="glossterm"
HREF="glossary.htm#G-CHARACTER"
><EM
CLASS="emphasis"
>character</EM
></A
> position
(<A
CLASS="glossterm"
HREF="glossary.htm#G-OFFSET"
><EM
CLASS="emphasis"
>offset</EM
></A
>), and proceeding for a certain number of characters.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SUPERCLASS"
><B
CLASS="emphasis.bold"
>superclass</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>See <A
CLASS="glossterm"
HREF="glossary.htm#G-BASE-CLASS"
><EM
CLASS="emphasis"
>base class</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SUPERUSER"
><B
CLASS="emphasis.bold"
>superuser</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The person whom the <A
CLASS="glossterm"
HREF="glossary.htm#G-OPERATING-SYSTEM"
><EM
CLASS="emphasis"
>operating system</EM
></A
> will let do almost anything.
Typically your system administrator or someone pretending to be your
system administrator.  On UNIX systems, the <EM
CLASS="emphasis"
>root</EM
> user.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SV"
><B
CLASS="emphasis.bold"
>SV</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Short for &quot;scalar value&quot;.  But within the Perl interpreter every
<A
CLASS="glossterm"
HREF="glossary.htm#G-THINGY"
><EM
CLASS="emphasis"
>thingy</EM
></A
> is treated as a kind of SV, in an object-oriented sort of
way.  Every <A
CLASS="glossterm"
HREF="glossary.htm#G-VALUE"
><EM
CLASS="emphasis"
>value</EM
></A
> inside Perl is passed around as an SV* pointer
in C.  The SV <A
CLASS="glossterm"
HREF="glossary.htm#G-STRUCT"
><EM
CLASS="emphasis"
>struct</EM
></A
> knows its own &quot;thingy type&quot;, and the code is
smart enough (we hope) not to try to call a <A
CLASS="glossterm"
HREF="glossary.htm#G-HASH"
><EM
CLASS="emphasis"
>hash</EM
></A
> function on a
<A
CLASS="glossterm"
HREF="glossary.htm#G-SUBROUTINE"
><EM
CLASS="emphasis"
>subroutine</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SWITCH"
><B
CLASS="emphasis.bold"
>switch</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An option you give on a command line to influence the way your program
works.  In UNIX, these are usually introduced with a minus sign.
The word is also used as a nickname for a <A
CLASS="glossterm"
HREF="glossary.htm#G-SWITCH-STATEMENT"
><EM
CLASS="emphasis"
>switch statement</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SWITCH-CLUSTERING"
><B
CLASS="emphasis.bold"
>switch clustering</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The combining of multiple command line switches <B
CLASS="emphasis.bold"
>-a -b -c</B
> into
one switch <B
CLASS="emphasis.bold"
>-abc</B
>.  In Perl, any switch with an additional <A
CLASS="glossterm"
HREF="glossary.htm#G-ARGUMENT"
><EM
CLASS="emphasis"
>argument</EM
></A
>
must be the last switch in a cluster.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SWITCH-STATEMENT"
><B
CLASS="emphasis.bold"
>switch statement</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A program construct that lets you evaluate an <A
CLASS="glossterm"
HREF="glossary.htm#G-EXPRESSION"
><EM
CLASS="emphasis"
>expression</EM
></A
> and,
based on the expression's value, do a multi-way branch to the
appropriate piece of code for that value.  Also called a &quot;case
structure&quot;, after the similar Pascal construct.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SYMBOL-TABLE"
><B
CLASS="emphasis.bold"
>symbol table</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Where a <A
CLASS="glossterm"
HREF="glossary.htm#G-COMPILER"
><EM
CLASS="emphasis"
>compiler</EM
></A
> remembers symbols.  A program
like Perl must somehow remember all the names of all the
<EM
CLASS="emphasis"
>variables</EM
>, <EM
CLASS="emphasis"
>filehandles</EM
>, and <EM
CLASS="emphasis"
>subroutines</EM
> you've used.
It does this by placing the names in a symbol table, which is
implemented in Perl using a <A
CLASS="glossterm"
HREF="glossary.htm#G-HASH-TABLE"
><EM
CLASS="emphasis"
>hash table</EM
></A
>.  There is a separate
symbol table for each <A
CLASS="glossterm"
HREF="glossary.htm#G-PACKAGE"
><EM
CLASS="emphasis"
>package</EM
></A
>, to give each package its own
<A
CLASS="glossterm"
HREF="glossary.htm#G-NAMESPACE"
><EM
CLASS="emphasis"
>namespace</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SYMBOLIC-DEBUGGER"
><B
CLASS="emphasis.bold"
>symbolic debugger</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A program that lets you step through the <EM
CLASS="emphasis"
>execution</EM
> of your
program, stopping or printing things out here and there to see if
anything has gone wrong, and if so, what.  The &quot;symbolic&quot; part just
means that you can talk to the debugger using the same symbols in which
your program is written.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SYMBOLIC-LINK"
><B
CLASS="emphasis.bold"
>symbolic link</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An alternate filename that points to the real <A
CLASS="glossterm"
HREF="glossary.htm#G-FILENAME"
><EM
CLASS="emphasis"
>filename</EM
></A
>.
Whenever the <A
CLASS="glossterm"
HREF="glossary.htm#G-OPERATING-SYSTEM"
><EM
CLASS="emphasis"
>operating system</EM
></A
> is trying to parse a pathname containing
a symbolic link, it merely substitutes the real name and continues
parsing.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SYMBOLIC-REFERENCE"
><B
CLASS="emphasis.bold"
>symbolic reference</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A variable whose value is the name of another variable or subroutine.  By
<EM
CLASS="emphasis"
>dereferencing</EM
> the first variable, you can get at the second one.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SYNTAX"
><B
CLASS="emphasis.bold"
>syntax</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>From Greek, &quot;with-arrangement&quot;.  How things (particularly symbols)
are put together with each other.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SYNTAX-TREE"
><B
CLASS="emphasis.bold"
>syntax tree</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An internal representation of your program wherein lower-level
<EM
CLASS="emphasis"
>constructs</EM
> dangle off the higher-level constructs enclosing them.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-SYSTEM-CALL"
><B
CLASS="emphasis.bold"
>system call</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-SUBROUTINE"
><EM
CLASS="emphasis"
>subroutine</EM
></A
> call directly to the <A
CLASS="glossterm"
HREF="glossary.htm#G-OPERATING-SYSTEM"
><EM
CLASS="emphasis"
>operating system</EM
></A
>.  Many of
the important subroutines and functions you use aren't direct system
calls, but are built up in one or more layers above the system call level.
In general, Perl users don't need to worry about the distinction.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-TAINTED"
><B
CLASS="emphasis.bold"
>tainted</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Said of data that might be derived from the grubby hands of a user, and
thus unsafe for a secure program to rely on.  Perl does taint checks if
you run a <A
CLASS="glossterm"
HREF="glossary.htm#G-SETUID"
><EM
CLASS="emphasis"
>setuid</EM
></A
> program or use the <B
CLASS="emphasis.bold"
>-T</B
> switch.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-TCP"
><B
CLASS="emphasis.bold"
>TCP</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Short for Transmission Control Protocol.  A protocol wrapped around the
Internet Protocol to make an unreliable packet transmission mechanism
appear to the application program to be a reliable stream of bytes.
(Well, usually.)</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-TEXT"
><B
CLASS="emphasis.bold"
>text</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Normally, a <A
CLASS="glossterm"
HREF="glossary.htm#G-STRING"
><EM
CLASS="emphasis"
>string</EM
></A
> or <A
CLASS="glossterm"
HREF="glossary.htm#G-FILE"
><EM
CLASS="emphasis"
>file</EM
></A
> containing primarily printable
characters.  The word has been usurped in some UNIX circles to mean the
portion of your <A
CLASS="glossterm"
HREF="glossary.htm#G-PROCESS"
><EM
CLASS="emphasis"
>process</EM
></A
> that contains machine code to be executed.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-THINGY"
><B
CLASS="emphasis.bold"
>thingy</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Something sort of like an object, that you may or may not know the name
of, but that you can refer to with circumlocutions like &quot;that hangy-down
thingy that dangles in the back of your throat&quot;.  Similarly in Perl, a value
that is sort of like an object, that you may or may not know the name of, but
that you can refer to via references from which the thingy dangles,
metaphorically speaking.  Specifically, the sort of value that your reference
points to when you create a reference to a variable.
See <A
CLASS="glossterm"
HREF="glossary.htm#G-ANONYMOUS"
><EM
CLASS="emphasis"
>anonymous</EM
></A
>, <A
CLASS="glossterm"
HREF="glossary.htm#G-HARD-REFERENCE"
><EM
CLASS="emphasis"
>hard reference</EM
></A
>, and
<A
CLASS="glossterm"
HREF="glossary.htm#G-OBJECT"
><EM
CLASS="emphasis"
>object</EM
></A
>, not necessarily in that order.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-THREAD"
><B
CLASS="emphasis.bold"
>thread</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An instance of running a program, but lighter weight than a process, in
that a process could have multiple threads running around in it, all
sharing the same process's resources.  (If you're a dragonrider, see
<A
CLASS="glossterm"
HREF="glossary.htm#G-PERN"
><EM
CLASS="emphasis"
>Pern</EM
></A
>.)</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-TIE"
><B
CLASS="emphasis.bold"
>tie</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The bond between a magical variable and its
implementation class.  See the <A
CLASS="xref"
HREF="ch03_171.htm"
TITLE="tie"
><B
CLASS="xref.cmd"
>tie</B
></A
> function in Chapters 3 and 5.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-TOKENIZING"
><B
CLASS="emphasis.bold"
>tokenizing</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Splitting up a program text into its separate words and symbols, each
of which is called a token.  Also known as &quot;lexing&quot;, in which case you
get &quot;lexemes&quot; instead of tokens.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-TOOLBOX-APPROACH"
><B
CLASS="emphasis.bold"
>toolbox approach</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>The notion that, with a complete set of simple tools that work well
together, you can build almost anything you want.  Which is fine if
you're assembling a tricycle, but if you're building a defranishizing
comboflux, you really want your own machine shop to build special tools
in.  Perl is sort of a machine shop.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-TRUE"
><B
CLASS="emphasis.bold"
>true</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>See <A
CLASS="glossterm"
HREF="glossary.htm#G-FALSE"
><EM
CLASS="emphasis"
>false</EM
></A
>.  (And hold it up to a mirror for the secret message.)</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-TUPLE"
><B
CLASS="emphasis.bold"
>tuple</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>In the lingo of relational databases, a <A
CLASS="glossterm"
HREF="glossary.htm#G-RECORD"
><EM
CLASS="emphasis"
>record</EM
></A
> or <A
CLASS="glossterm"
HREF="glossary.htm#G-LINE"
><EM
CLASS="emphasis"
>line</EM
></A
>
containing fields.  See <A
CLASS="glossterm"
HREF="glossary.htm#G-RELATION"
><EM
CLASS="emphasis"
>relation</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-TYPE"
><B
CLASS="emphasis.bold"
>type</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>See <A
CLASS="glossterm"
HREF="glossary.htm#G-DATA-TYPE"
><EM
CLASS="emphasis"
>data type</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-TYPE-CASTING"
><B
CLASS="emphasis.bold"
>type casting</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Converting data explicitly from one type to another.  C permits this.  Perl does not
need it.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-TYPEGLOB"
><B
CLASS="emphasis.bold"
>typeglob</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Used of a single identifier, prefaced with * (for example, <CODE
CLASS="literal"
>*name</CODE
>),
to stand for any or all of <CODE
CLASS="literal"
>$name</CODE
>, <CODE
CLASS="literal"
>@name</CODE
>, <CODE
CLASS="literal"
>%name</CODE
>,
<CODE
CLASS="literal"
>&amp;name</CODE
>, or just <CODE
CLASS="literal"
>name</CODE
>.  
How you use it determines whether it is interpreted as all of those, or only
one of them.  See &quot;Typeglobs and Filehandles&quot; in <A
CLASS="xref"
HREF="ch02_01.htm"
TITLE="The Gory Details"
>Chapter 2</A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-UID"
><B
CLASS="emphasis.bold"
>UID</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A User ID.  Often used in the context of file ownership.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-UNARY-OPERATOR"
><B
CLASS="emphasis.bold"
>unary operator</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An operator with only one <A
CLASS="glossterm"
HREF="glossary.htm#G-OPERAND"
><EM
CLASS="emphasis"
>operand</EM
></A
>, like <CODE
CLASS="literal"
>!</CODE
> or <A
CLASS="xref"
HREF="ch03_011.htm"
TITLE="chdir"
><B
CLASS="xref.cmd"
>chdir</B
></A
>.
Unary operators are usually prefix operators, that is, they precede
their operand.  The <CODE
CLASS="literal"
>++</CODE
> and <CODE
CLASS="literal"
>--</CODE
> operators can be either
prefix or postfix.  (Of course, that <EM
CLASS="emphasis"
>does</EM
> change their meaning.)</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-UNDEFINED"
><B
CLASS="emphasis.bold"
>undefined</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Nobody has ever given this a reasonable definition.  See also
<A
CLASS="glossterm"
HREF="glossary.htm#G-DEFINED"
><EM
CLASS="emphasis"
>defined</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-UNIX"
><B
CLASS="emphasis.bold"
>UNIX</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A very large and constantly evolving language with several alternate and
largely incompatible syntaxes, in which anyone can define
anything any way they choose, and usually do.  Speakers of this language
think it's easy to learn because it's so easily twisted to one's own
ends, but dialectical differences make tribal intercommunication nearly
impossible, and travelers are often reduced to a pidgin-like subset of
the language.  To be universally understood, a UNIX shell programmer
must spend years of study in the art.  Many have abandoned this
discipline and now communicate via an Esperanto-like language called
Perl. In ancient times UNIX was also used to refer to some code that a couple
of people at Bell Labs wrote to make use of a PDP-7 computer that wasn't
doing much of anything else at the time.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-UNQUALIFIED"
><B
CLASS="emphasis.bold"
>unqualified</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>See <A
CLASS="glossterm"
HREF="glossary.htm#G-QUALIFIED"
><EM
CLASS="emphasis"
>qualified</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-VALUE"
><B
CLASS="emphasis.bold"
>value</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>This is hard to define.  It's something like real data&nbsp;- the actual numbers
and strings that wander around in your program.  But we don't really
need to define it.  If you didn't know a value when you see it,
you wouldn't have this book.  <CODE
CLASS="literal"
>:-)</CODE
></P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-VARIABLE"
><B
CLASS="emphasis.bold"
>variable</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A named storage location that can hold any of various values, as your
program sees fit.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-VARIABLE-INTERPOLATION"
><B
CLASS="emphasis.bold"
>variable interpolation</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>See <A
CLASS="glossterm"
HREF="glossary.htm#G-INTERPOLATION"
><EM
CLASS="emphasis"
>interpolation</EM
></A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-VECTOR"
><B
CLASS="emphasis.bold"
>vector</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Mathematical jargon for a list of <EM
CLASS="emphasis"
>scalar values</EM
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-WARNING"
><B
CLASS="emphasis.bold"
>warning</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A message printed to the <CODE
CLASS="literal"
>STDERR</CODE
> stream to the effect that something
might be wrong but it isn't worth blowing up over.  See the <A
CLASS="xref"
HREF="ch03_192.htm"
TITLE="warn"
><B
CLASS="xref.cmd"
>warn</B
></A
>
operator in <A
CLASS="xref"
HREF="ch03_01.htm"
TITLE="Functions"
>Chapter 3</A
>.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-WHITESPACE"
><B
CLASS="emphasis.bold"
>whitespace</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A <A
CLASS="glossterm"
HREF="glossary.htm#G-CHARACTER"
><EM
CLASS="emphasis"
>character</EM
></A
> that moves your cursor around but doesn't otherwise
put anything on your screen.  Typically refers to any of the following: space, tab,
line feed, carriage return, form feed, or vertical tab.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-WORD"
><B
CLASS="emphasis.bold"
>word</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>In normal &quot;computerese&quot;, the piece of data of the size most efficiently
dealt with by your computer, typically 32 bits or so, give or take a few
powers of two.  In UNIX culture, it more often refers to an
alphanumeric identifier, or to a string of non-whitespace characters bounded by
whitespace or line boundaries.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-WORKING-DIRECTORY"
><B
CLASS="emphasis.bold"
>working directory</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>Your current <A
CLASS="glossterm"
HREF="glossary.htm#G-DIRECTORY"
><EM
CLASS="emphasis"
>directory</EM
></A
>, from which relative pathnames are
interpreted by the <A
CLASS="glossterm"
HREF="glossary.htm#G-OPERATING-SYSTEM"
><EM
CLASS="emphasis"
>operating system</EM
></A
>.  The operating system knows
your current directory because you told it with a <A
CLASS="xref"
HREF="ch03_011.htm"
TITLE="chdir"
><B
CLASS="xref.cmd"
>chdir</B
></A
>, or
because you started out in the same place where your parent <A
CLASS="glossterm"
HREF="glossary.htm#G-PROCESS"
><EM
CLASS="emphasis"
>process</EM
></A
> was
when you were born.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-WRAPPER"
><B
CLASS="emphasis.bold"
>wrapper</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>A program that runs some other program for you, modifying some of its input
or output to better suit your purposes.  More generally, just about anything
that wraps things up.  And that just about wraps things up, except for
the excess.</P
></DD
><DT
CLASS="glossterm"
><A
CLASS="glossterm"
NAME="G-XS"
><B
CLASS="emphasis.bold"
>XS</B
></A
></DT
><DD
CLASS="glossdef"
><P
CLASS="para"
>An extraordinarily exported, expeditiously excellent, expressly eXternal
Subroutine, executed in existing C or C++, or in an exciting new extension
language called (exasperatingly) XS.  Examine <A
CLASS="xref"
HREF="ch06_01.htm"
TITLE="Social Engineering"
>Chapter 6, <CITE
CLASS="chapter"
>Social Engineering</CITE
></A
>, for the
exact explanation.  <EM
CLASS="emphasis"
>Exeunt</EM
>.</P
></DD
></DL
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="CHAPTER"
HREF="ch09_01.htm"
TITLE="9. Diagnostic Messages"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 9. Diagnostic Messages"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>&nbsp;</TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>9. Diagnostic Messages</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>&nbsp;</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
