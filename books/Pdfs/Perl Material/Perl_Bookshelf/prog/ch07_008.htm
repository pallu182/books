<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.2.8 DB_File&nbsp;- Access to Berkeley DB</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T02:01:27Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_02.htm"
TITLE="7.2 Library Modules"><LINK
REL="prev"
HREF="ch07_007.htm"
TITLE="7.2.7 Cwd&nbsp;- Get Pathname of Current Working Directory"><LINK
REL="next"
HREF="ch07_009.htm"
TITLE="7.2.9 Devel::SelfStubber&nbsp;- Generate Stubs for a SelfLoading Module"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_007.htm"
TITLE="7.2.7 Cwd&nbsp;- Get Pathname of Current Working Directory"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.7 Cwd&nbsp;- Get Pathname of Current Working Directory"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. The Standard Perl Library"
>Chapter 7<BR>The Standard Perl Library</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_009.htm"
TITLE="7.2.9 Devel::SelfStubber&nbsp;- Generate Stubs for a SelfLoading Module"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.9 Devel::SelfStubber&nbsp;- Generate Stubs for a SelfLoading Module"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="AUTOID-19316"
>7.2.8 DB_File&nbsp;- Access to Berkeley DB</A
></H3
><PRE
CLASS="programlisting"
>use DB_File;

# brackets in following code indicate optional arguments
[$X =] tie %hash,  &quot;DB_File&quot;, $filename [, $flags, $mode, $DB_HASH];
[$X =] tie %hash,  &quot;DB_File&quot;, $filename, $flags, $mode, $DB_BTREE;
[$X =] tie @array, &quot;DB_File&quot;, $filename, $flags, $mode, $DB_RECNO;

$status = $X-&gt;del($key [, $flags]);
$status = $X-&gt;put($key, $value [, $flags]);
$status = $X-&gt;get($key, $value [, $flags]);
$status = $X-&gt;seq($key, $value [, $flags]);
$status = $X-&gt;sync([$flags]);
$status = $X-&gt;fd;

untie %hash;
untie @array;</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH07.DBF1"
></A
><A
CLASS="indexterm"
NAME="CH07.DBF2"
></A
>DB_File is the most flexible of the DBM-style tie modules.  It
allows Perl programs to make use of the
facilities provided by Berkeley DB (not included).  If you intend to use this
module you should really have a copy of the Berkeley DB manual page at
hand.  The interface defined here mirrors the Berkeley DB interface
closely.</P
><P
CLASS="para"
>Berkeley DB is a C library that provides a consistent interface to a
number of database formats.  DB_File provides an interface to all
three of the database (file) types currently supported by Berkeley DB.</P
><P
CLASS="para"
>The file types are:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>DB_HASH</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Allows arbitrary key/data pairs to be stored in data files.  This is
equivalent to the functionality provided by other hashing packages like
DBM, NDBM, ODBM, GDBM, and SDBM.  Remember, though, the files created
using <CODE
CLASS="literal"
>DB_HASH</CODE
> are not binary compatible with any of the other
packages mentioned.

A default hashing algorithm that will be adequate for most
applications is built into Berkeley DB.  If you do need to use your own
hashing algorithm, it's possible to write your own and have
DB_File use it instead.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>DB_BTREE</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The btree format allows arbitrary key/data pairs to be stored in a
sorted, balanced binary tree.

It is possible to provide a user-defined
Perl routine to perform the comparison of keys.  By default, though, the
keys are stored in lexical order.  This is useful for providing 
an ordering for your hash keys, and may be used on hashes that are 
only in memory and never go to disk.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>DB_RECNO</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><CODE
CLASS="literal"
>DB_RECNO</CODE
> allows both fixed-length and variable-length flat text files
to be manipulated using the same key/value pair interface as in <CODE
CLASS="literal"
>DB_HASH</CODE
>
and <CODE
CLASS="literal"
>DB_BTREE</CODE
>.  In this case the key will consist of a record (line)
number.</P
></DD
></DL
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.4"
>7.2.8.1 How does DB_File interface to Berkeley DB?</A
></H4
><P
CLASS="para"
>DB_File gives access to Berkeley DB files using Perl's <A
CLASS="xref"
HREF="ch03_171.htm"
TITLE="tie"
><B
CLASS="xref.cmd"
>tie</B
></A
>
function.  This allows DB_File to access Berkeley DB files using either a
hash (for <CODE
CLASS="literal"
>DB_HASH</CODE
> and <CODE
CLASS="literal"
>DB_BTREE</CODE
> file types) or
an ordinary array (for the <CODE
CLASS="literal"
>DB_RECNO</CODE
> file type).</P
><P
CLASS="para"
>In addition to the <A
CLASS="xref"
HREF="ch03_171.htm"
TITLE="tie"
><B
CLASS="xref.cmd"
>tie</B
></A
> interface, it is also possible to use most of
the functions provided in the Berkeley DB API.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.5"
>7.2.8.2 Differences from Berkeley DB</A
></H4
><P
CLASS="para"
>Berkeley DB uses the function <EM
CLASS="emphasis"
>dbopen</EM
>(3) to open or create a database.
Below is the C prototype for <EM
CLASS="emphasis"
>dbopen</EM
>(3).</P
><PRE
CLASS="programlisting"
>DB *
dbopen (const char *file, int flags, int mode,
        DBTYPE type, const void *openinfo)</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>type</CODE
> parameter is an enumeration selecting one of the
three interface methods, <CODE
CLASS="literal"
>DB_HASH</CODE
>, <CODE
CLASS="literal"
>DB_BTREE</CODE
> or
<CODE
CLASS="literal"
>DB_RECNO</CODE
>.
Depending on which of these is actually chosen, the final parameter,
<CODE
CLASS="literal"
>openinfo</CODE
>, points to a data structure that allows tailoring of the
specific interface method.</P
><P
CLASS="para"
>This interface is handled slightly differently in DB_File.  Here is
an equivalent call using DB_File.</P
><PRE
CLASS="programlisting"
>tie %array, &quot;DB_File&quot;, $filename, $flags, $mode, $DB_HASH;</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>filename</CODE
>, <CODE
CLASS="literal"
>flags</CODE
>, and <CODE
CLASS="literal"
>mode</CODE
> parameters are the direct
equivalent of their <EM
CLASS="emphasis"
>dbopen</EM
>(3) counterparts.  The final parameter
<CODE
CLASS="literal"
>$DB_HASH</CODE
> performs the function of both the <CODE
CLASS="literal"
>type</CODE
> and
<CODE
CLASS="literal"
>openinfo</CODE
> parameters in <EM
CLASS="emphasis"
>dbopen</EM
>(3).</P
><P
CLASS="para"
>In the example above <CODE
CLASS="literal"
>$DB_HASH</CODE
> is actually a reference to a hash
object.  DB_File has three of these predefined references.  Apart
from <CODE
CLASS="literal"
>$DB_HASH</CODE
>, there are also <CODE
CLASS="literal"
>$DB_BTREE</CODE
> and <CODE
CLASS="literal"
>$DB_RECNO</CODE
>.</P
><P
CLASS="para"
>The keys allowed in each of these predefined references are limited to
the names used in the equivalent C structure.  So, for example, the
<CODE
CLASS="literal"
>$DB_HASH</CODE
> reference will only allow keys called <CODE
CLASS="literal"
>bsize</CODE
>,
<CODE
CLASS="literal"
>cachesize</CODE
>, <CODE
CLASS="literal"
>ffactor</CODE
>, <CODE
CLASS="literal"
>hash</CODE
>, <CODE
CLASS="literal"
>lorder</CODE
>, and
<CODE
CLASS="literal"
>nelem</CODE
>.</P
><P
CLASS="para"
>To change one of these elements, just assign to it like this:</P
><PRE
CLASS="programlisting"
>$DB_HASH-&gt;{cachesize} = 10_000;</PRE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.6"
>7.2.8.3 Array offsets</A
></H4
><P
CLASS="para"
>In order to make <CODE
CLASS="literal"
>RECNO</CODE
> more compatible with Perl,
the array offset for all
<CODE
CLASS="literal"
>RECNO</CODE
> arrays begins at 0 rather than 1 as in Berkeley DB.</P
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.7"
>7.2.8.4 In-memory databases</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-19401"
></A
><A
CLASS="indexterm"
NAME="AUTOID-19404"
></A
>Berkeley DB allows the creation of in-memory databases by using <CODE
CLASS="literal"
>NULL</CODE
>
(that is, a <CODE
CLASS="literal"
>(char *)0</CODE
> in C) in place of the filename.  <CODE
CLASS="literal"
>DB_File</CODE
>
uses <A
CLASS="xref"
HREF="ch03_180.htm"
TITLE="undef"
><B
CLASS="xref.cmd"
>undef</B
></A
> instead of <CODE
CLASS="literal"
>NULL</CODE
> to provide this functionality.<A
CLASS="indexterm"
NAME="AUTOID-19411"
></A
><A
CLASS="indexterm"
NAME="AUTOID-19414"
></A
><A
CLASS="indexterm"
NAME="AUTOID-19417"
></A
></P
><PRE
CLASS="programlisting"
>use strict;
use Fcntl;
use DB_File;

my ($k, $v, %hash);

tie(%hash, 'DB_File', undef, O_RDWR|O_CREAT, 0, $DB_BTREE)
    or die &quot;can't tie DB_File: $!&quot;:

foreach $k (keys %ENV) {
    $hash{$k} = $ENV{$k};
}

# this will now come out in sorted lexical order 
# without the overhead of sorting the keys
while  (($k,$v) = each %hash) {
    print &quot;$k=$v\n&quot;;
}</PRE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.8"
>7.2.8.5 Using the Berkeley DB interface directly</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-19424"
></A
>In addition to accessing Berkeley DB using a tied hash or array, you can
also make direct use of most functions defined in the
Berkeley DB documentation.</P
><P
CLASS="para"
>To do this you need to remember the return value from <A
CLASS="xref"
HREF="ch03_171.htm"
TITLE="tie"
><B
CLASS="xref.cmd"
>tie</B
></A
>, or
use the <A
CLASS="xref"
HREF="ch03_172.htm"
TITLE="tied"
><B
CLASS="xref.cmd"
>tied</B
></A
> function to get at it yourself later on.</P
><PRE
CLASS="programlisting"
>$db = tie %hash, &quot;DB_File&quot;, &quot;filename&quot;;</PRE
><P
CLASS="para"
>Once you have done that, you can access the Berkeley DB API functions
directly.</P
><PRE
CLASS="programlisting"
>$db-&gt;put($key, $value, R_NOOVERWRITE);  # invoke the DB &quot;put&quot; function</PRE
><P
CLASS="para"
>All the functions defined in the <EM
CLASS="emphasis"
>dbopen</EM
>(3) manpage are available
except for
<CODE
CLASS="literal"
>close()</CODE
> and <CODE
CLASS="literal"
>dbopen()</CODE
> itself.  The DB_File interface to these
functions mirrors the way Berkeley DB
works.  In particular, note that all these functions return only a status
value.  Whenever a Berkeley DB function returns data via one of its
parameters, the DB_File equivalent does exactly the same thing.</P
><P
CLASS="para"
>All the constants defined in the <EM
CLASS="emphasis"
>dbopen</EM
> manpage are also available.</P
><P
CLASS="para"
>Below is a list of the functions available.  (The comments only tell you
the differences from the C version.)</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>get</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-19446"
></A
>The <CODE
CLASS="literal"
>$flags</CODE
> parameter is optional.
The value associated with the key you request is returned in
the <CODE
CLASS="literal"
>$value</CODE
> parameter.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>put</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-19455"
></A
>As usual the <CODE
CLASS="literal"
>flags</CODE
> parameter is optional.

If you use either the <CODE
CLASS="literal"
>R_IAFTER</CODE
> or <CODE
CLASS="literal"
>R_IBEFORE</CODE
> flags, the
<CODE
CLASS="literal"
>$key</CODE
> parameter will be set to the record number of the inserted
key/value pair.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>del</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The <CODE
CLASS="literal"
>$flags</CODE
> parameter is optional.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>fd  </CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>No differences encountered.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>seq</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-19477"
></A
>The <CODE
CLASS="literal"
>$flags</CODE
> parameter is optional.  Both the <CODE
CLASS="literal"
>$key</CODE
> and
<CODE
CLASS="literal"
>$value</CODE
> parameters will be set.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>sync</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-19487"
></A
>The <CODE
CLASS="literal"
>$flags</CODE
> parameter is optional.</P
></DD
></DL
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.9"
>7.2.8.6 Examples</A
></H4
><P
CLASS="para"
>Here are a few examples.  First, using <CODE
CLASS="literal"
>$DB_HASH</CODE
>:</P
><PRE
CLASS="programlisting"
>use DB_File;
use Fcntl;

tie %h,  &quot;DB_File&quot;, &quot;hashed&quot;, O_RDWR|O_CREAT, 0644, $DB_HASH;

# Add a key/value pair to the file
$h{apple} = &quot;orange&quot;;

# Check for value of a key
print &quot;No, we have some bananas.\n&quot; if $h{banana};

# Delete
delete $h{&quot;apple&quot;};
untie %h;</PRE
><P
CLASS="para"
>Here is an example using <CODE
CLASS="literal"
>$DB_BTREE</CODE
>.  Just to make life more
interesting, the default comparison function is not used.  Instead,
a Perl subroutine, <CODE
CLASS="literal"
>Compare()</CODE
>, does a case-insensitive comparison.</P
><PRE
CLASS="programlisting"
>use DB_File;
use Fcntl;

sub Compare {
    my ($key1, $key2) = @_;
    &quot;\L$key1&quot; cmp &quot;\L$key2&quot;;
}

$DB_BTREE-&gt;{compare} = 'Compare';
tie %h,  'DB_File', &quot;tree&quot;, O_RDWR|O_CREAT, 0644, $DB_BTREE;

# Add a key/value pair to the file
$h{Wall}  = 'Larry';
$h{Smith} = 'John';
$h{mouse} = 'mickey';
$h{duck}  = 'donald';

# Delete
delete $h{duck};

# Cycle through the keys printing them in order.
# Note it is not necessary to sort the keys as
# the btree will have kept them in order automatically.
while ($key = each %h) { print &quot;$key\n&quot; }

untie %h;</PRE
><P
CLASS="para"
>The preceding code yields this output:</P
><PRE
CLASS="programlisting"
>mouse
Smith
Wall</PRE
><P
CLASS="para"
>Next, an example using <CODE
CLASS="literal"
>$DB_RECNO</CODE
>.  You may access a regular textfile as 
an array of lines.  But the first line of the text file is the
zeroth element of the array, and so on.  This provides a clean 
way to seek to a particular line in a text file.<A
CLASS="indexterm"
NAME="AUTOID-19503"
></A
></P
><PRE
CLASS="programlisting"
>my(@line, $number);
$number = 10;
use Fcntl;
use DB_File;
tie(@line, &quot;DB_File&quot;, &quot;/tmp/text&quot;, O_RDWR|O_CREAT, 0644, $DB_RECNO)
    or die &quot;can't tie file: $!&quot;;
$line[$number - 1] = &quot;this is a new line $number&quot;;</PRE
><P
CLASS="para"
>Here's an example of updating a file in place:</P
><PRE
CLASS="programlisting"
>use Fcntl;
use DB_File;
tie(@file, 'DB_File', &quot;/tmp/sample&quot;, O_RDWR, 0644, $DB_RECNO)
    or die &quot;can't update /tmp/sample: $!&quot;;
print &quot;line #3 was &quot;, $file[2], &quot;\n&quot;;
$file[2] = `date`;
untie @file;</PRE
><P
CLASS="para"
>Note that the tied array interface is incomplete, causing
some operations on the resulting array to fail in strange ways.  See the
discussion of tied arrays in <A
CLASS="xref"
HREF="ch05_01.htm"
TITLE="Packages, Modules, and Object Classes"
>Chapter 5</A
>.  Some object methods are provided 
to avoid this.  
Here's an example of reading a file backward:<A
CLASS="indexterm"
NAME="AUTOID-19511"
></A
><A
CLASS="indexterm"
NAME="AUTOID-19514"
></A
></P
><PRE
CLASS="programlisting"
>use DB_File;
use Fcntl;
$H = tie(@h, &quot;DB_File&quot;, $file, O_RDWR, 0640, $DB_RECNO)
        or die &quot;Cannot open file $file: $!\n&quot;;
# print the records in reverse order
for ($i = $H-&gt;length - 1; $i &gt;= 0; --$i) { 
    print &quot;$i: $h[$i]\n&quot;;
}
untie @h;</PRE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.10"
>7.2.8.7 Locking databases</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-19521"
></A
><A
CLASS="indexterm"
NAME="AUTOID-19523"
></A
><A
CLASS="indexterm"
NAME="AUTOID-19525"
></A
>Concurrent access of a read-write database by several parties requires
that each use some kind of locking.  Here's an example that uses the
<CODE
CLASS="literal"
>fd()</CODE
> method to get the file descriptor, and then a careful
<A
CLASS="xref"
HREF="ch03_102.htm"
TITLE="open"
><B
CLASS="xref.cmd"
>open</B
></A
> to give something Perl will <A
CLASS="xref"
HREF="ch03_039.htm"
TITLE="flock"
><B
CLASS="xref.cmd"
>flock</B
></A
> for you.  Run this
repeatedly in the background to watch the locks granted in proper order.
You have to call the <CODE
CLASS="literal"
>sync()</CODE
> method to ensure that the writes make
it to disk between access, or else the library would normally hold some
in its own cache.</P
><PRE
CLASS="programlisting"
>use Fcntl;
use DB_File;</PRE
><PRE
CLASS="programlisting"
>use strict;</PRE
><PRE
CLASS="programlisting"
>sub LOCK_SH { 1 }
sub LOCK_EX { 2 }
sub LOCK_NB { 4 }
sub LOCK_UN { 8 }</PRE
><PRE
CLASS="programlisting"
>my($oldval, $fd, $db_obj, %db_hash, $value, $key);</PRE
><PRE
CLASS="programlisting"
>$key   = shift || 'default';
$value = shift || 'magic';</PRE
><PRE
CLASS="programlisting"
>$value .= &quot; $$&quot;;</PRE
><PRE
CLASS="programlisting"
>$db_obj = tie(%db_hash, 'DB_File', '/tmp/foo.db', O_CREAT|O_RDWR, 0644)
                    or die &quot;dbcreat /tmp/foo.db $!&quot;;
$fd = $db_obj-&gt;fd;
print &quot;$$: db fd is $fd\n&quot;;
open(DB_FH, &quot;+&lt;&amp;=$fd&quot;) or die &quot;fdopen $!&quot;;</PRE
><PRE
CLASS="programlisting"
>unless (flock (DB_FH, LOCK_SH | LOCK_NB)) {
    print &quot;$$: CONTENTION; can't read during write update!
                Waiting for read lock ($!) ....&quot;;
    unless (flock (DB_FH, LOCK_SH)) { die &quot;flock: $!&quot; }
}
print &quot;$$: Read lock granted\n&quot;;</PRE
><PRE
CLASS="programlisting"
>$oldval = $db_hash{$key};
print &quot;$$: Old value was $oldval\n&quot;;
flock(DB_FH, LOCK_UN);</PRE
><PRE
CLASS="programlisting"
>unless (flock (DB_FH, LOCK_EX | LOCK_NB)) {
    print &quot;$$: CONTENTION; must have exclusive lock!
                Waiting for write lock ($!) ....&quot;;
    unless (flock (DB_FH, LOCK_EX)) { die &quot;flock: $!&quot; }
}</PRE
><PRE
CLASS="programlisting"
>print &quot;$$: Write lock granted\n&quot;;
$db_hash{$key} = $value;
sleep 10;</PRE
><PRE
CLASS="programlisting"
>$db_obj-&gt;sync();                   # to flush
flock(DB_FH, LOCK_UN);
undef $db_obj;                     # removing the last reference to the DB
                                   # closes it. Closing DB_FH is implicit.
untie %db_hash;
print &quot;$$: Updated db to $key=$value\n&quot;;</PRE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.11"
>7.2.8.8 See also</A
></H4
><P
CLASS="para"
>Related manpages: <EM
CLASS="emphasis"
>dbopen</EM
>(3),
<EM
CLASS="emphasis"
>hash</EM
>(3), <EM
CLASS="emphasis"
>recno</EM
>(3),
<EM
CLASS="emphasis"
>btree</EM
>(3).</P
><P
CLASS="para"
>Berkeley DB is available from these locations:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="systemitem.url"
HREF="ftp://ftp.cs.berkeley.edu/ucb/4bsd/db.1.85.tar.gz"
>ftp://ftp.cs.berkeley.edu/ucb/4bsd/db.1.85.tar.gz</A
></P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="systemitem.url"
HREF="http://www.perl.com/CPAN/src/misc/db.1.85.tar.gz"
>http://www.perl.com/CPAN/src/misc/db.1.85.tar.gz</A
><A
CLASS="indexterm"
NAME="AUTOID-19558"
></A
><A
CLASS="indexterm"
NAME="AUTOID-19559"
></A
></P
></LI
></UL
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_007.htm"
TITLE="7.2.7 Cwd&nbsp;- Get Pathname of Current Working Directory"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.7 Cwd&nbsp;- Get Pathname of Current Working Directory"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_009.htm"
TITLE="7.2.9 Devel::SelfStubber&nbsp;- Generate Stubs for a SelfLoading Module"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.9 Devel::SelfStubber&nbsp;- Generate Stubs for a SelfLoading Module"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.2.7 Cwd&nbsp;- Get Pathname of Current Working Directory</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.2.9 Devel::SelfStubber&nbsp;- Generate Stubs for a SelfLoading Module</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
