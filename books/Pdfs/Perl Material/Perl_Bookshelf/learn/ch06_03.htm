<HTML
><HEAD
>
<TITLE>[Chapter 6] 6.3 Output to STDOUT</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:32:47Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch06_01.htm"
TITLE="6. Basic I/O"><LINK
REL="prev"
HREF="ch06_02.htm"
TITLE="6.2 Input from the Diamond Operator"><LINK
REL="next"
HREF="ch06_04.htm"
TITLE="6.4 Exercises"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_02.htm"
TITLE="6.2 Input from the Diamond Operator"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.2 Input from the Diamond Operator"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch06_01.htm"
TITLE="6. Basic I/O"
>Chapter 6<BR>Basic I/O</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_04.htm"
TITLE="6.4 Exercises"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.4 Exercises"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch06-33352"
>6.3 Output to STDOUT</A
></H2
><P
CLASS="para"
>Perl uses the <CODE
CLASS="literal"
>print</CODE
> and <CODE
CLASS="literal"
>printf</CODE
> functions to write to standard output. Let's look at how they are used.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-560917"
>6.3.1 Using print for Normal Output</A
></H3
><P
CLASS="para"
>We've already used <CODE
CLASS="literal"
>print</CODE
> to display text on standard output. Let's expand on that a bit.</P
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch06-idx-560853-0"
></A
><CODE
CLASS="literal"
>print</CODE
> function takes a list of strings and sends each string to standard output in turn, without any intervening or trailing characters added. What might not be obvious is that <CODE
CLASS="literal"
>print</CODE
> is really just a function that takes a list of arguments, and returns a value like any other function. In other words,</P
><PRE
CLASS="programlisting"
>$a = print(&quot;hello &quot;, &quot;world&quot;, &quot;\n&quot;);</PRE
><P
CLASS="para"
>would be another way to say <CODE
CLASS="literal"
>hello world</CODE
>. The <A
CLASS="indexterm"
NAME="ch06-idx-560855-0"
></A
><A
CLASS="indexterm"
NAME="ch06-idx-560855-1"
></A
>return value of <CODE
CLASS="literal"
>print</CODE
> is a true or false value, indicating the success of the <CODE
CLASS="literal"
>print</CODE
>. It nearly always succeeds, unless you get some I/O error, so <CODE
CLASS="literal"
>$a</CODE
> in this case would usually be 1.</P
><P
CLASS="para"
>Sometimes you'll need to add <A
CLASS="indexterm"
NAME="ch06-idx-560854-0"
></A
>parentheses to <CODE
CLASS="literal"
>print</CODE
> as shown in the example, especially when the first thing you want to print itself starts with a left parenthesis, as in:</P
><PRE
CLASS="programlisting"
>print (2+3),&quot;hello&quot;;   # wrong! prints 5, ignores &quot;hello&quot;
print ((2+3),&quot;hello&quot;); # right, prints 5hello
print 2+3,&quot;hello&quot;;     # also right, prints 5hello</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch06-pgfId-560918"
>6.3.2 Using printf for Formatted Output</A
></H3
><P
CLASS="para"
>You may wish a little more control over your output than <CODE
CLASS="literal"
>print</CODE
> provides. In fact, you may be accustomed to the <A
CLASS="indexterm"
NAME="ch06-idx-560860-0"
></A
>formatted output of C's <CODE
CLASS="literal"
>printf</CODE
> function. Fear not: Perl provides a comparable operation with the same name.</P
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch06-idx-562254-0"
></A
><CODE
CLASS="literal"
>printf</CODE
> function takes a list of arguments (enclosed in optional parentheses, like the <CODE
CLASS="literal"
>print</CODE
> function). The first argument is a format control string, defining how to print the remaining arguments. If you're not familiar with the standard <CODE
CLASS="literal"
>printf</CODE
> function, you should probably check out the manpage for <EM
CLASS="emphasis"
>printf </EM
>(3) or <EM
CLASS="emphasis"
>perlfunc</EM
> (1), if you have one, or look at the description in <A
CLASS="olink"
HREF="../prog/ch03_01.htm"
>Chapter 3</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>.</P
><P
CLASS="para"
>As an example, however</P
><PRE
CLASS="programlisting"
>printf &quot;%15s %5d %10.2f\n&quot;, $s, $n, $r;</PRE
><P
CLASS="para"
>prints <CODE
CLASS="literal"
>$s</CODE
> in a 15-character field, then space, then <CODE
CLASS="literal"
>$n</CODE
> as a decimal integer in a 5-character field, then another space, then <CODE
CLASS="literal"
>$r</CODE
> as a floating-point value with 2 decimal places in a 10-character field, and finally a newline.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_02.htm"
TITLE="6.2 Input from the Diamond Operator"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 6.2 Input from the Diamond Operator"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch06_04.htm"
TITLE="6.4 Exercises"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 6.4 Exercises"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>6.2 Input from the Diamond Operator</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>6.4 Exercises</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
