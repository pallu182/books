<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.2.36 Getopt::Std&nbsp;- Process Single-Character Options with Option Clustering</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T02:02:40Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_02.htm"
TITLE="7.2 Library Modules"><LINK
REL="prev"
HREF="ch07_035.htm"
TITLE="7.2.35 Getopt::Long&nbsp;- Extended Processing of Command-Line Options"><LINK
REL="next"
HREF="ch07_037.htm"
TITLE="7.2.37 I18N::Collate&nbsp;- Compare 8-bit Scalar Data According to the Current Locale"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_035.htm"
TITLE="7.2.35 Getopt::Long&nbsp;- Extended Processing of Command-Line Options"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.35 Getopt::Long&nbsp;- Extended Processing of Command-Line Options"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. The Standard Perl Library"
>Chapter 7<BR>The Standard Perl Library</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_037.htm"
TITLE="7.2.37 I18N::Collate&nbsp;- Compare 8-bit Scalar Data According to the Current Locale"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.37 I18N::Collate&nbsp;- Compare 8-bit Scalar Data According to the Current Locale"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="AUTOID-23074"
>7.2.36 Getopt::Std&nbsp;- Process Single-Character Options with Option Clustering</A
></H3
><PRE
CLASS="programlisting"
>use Getopt::Std;

getopt('oDI');    # -o, -D &amp; -I take arg.  Sets opt_* as a side effect.
getopts('oif:');  # -o &amp; -i are boolean flags, -f takes an argument.
                  # Sets opt_* as a side effect.</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-23078"
></A
><A
CLASS="indexterm"
NAME="AUTOID-23080"
></A
><A
CLASS="indexterm"
NAME="AUTOID-23082"
></A
><A
CLASS="indexterm"
NAME="AUTOID-23084"
></A
><A
CLASS="indexterm"
NAME="AUTOID-23086"
></A
><A
CLASS="indexterm"
NAME="AUTOID-23088"
></A
>The <CODE
CLASS="literal"
>getopt()</CODE
> and <CODE
CLASS="literal"
>getopts()</CODE
> functions give
your program simple mechanisms for processing single-character options.  These
options can be clustered (for example, <CODE
CLASS="literal"
>-bdLc</CODE
> might be
interpreted as four single-character options), and you can specify individual
options that require an accompanying argument.  When you invoke
<CODE
CLASS="literal"
>getopt()</CODE
> or <CODE
CLASS="literal"
>getopts()</CODE
>, you pass along
information about the kinds of options your program expects.  These functions
then analyze <CODE
CLASS="literal"
>@ARGV</CODE
>, extract information about the options,
and return this information to your program in a set of variables.  The
processing of <CODE
CLASS="literal"
>@ARGV</CODE
> stops when an argument without a leading
&quot;<CODE
CLASS="literal"
>-</CODE
>&quot; is encountered, if that argument is not
associated with a preceding option.  Otherwise, <CODE
CLASS="literal"
>@ARGV</CODE
> is
processed to its end and left empty.</P
><P
CLASS="para"
>For each option in your program's invocation, both <CODE
CLASS="literal"
>getopt()</CODE
> and
<CODE
CLASS="literal"
>getopts()</CODE
> define a variable <CODE
CLASS="literal"
>$opt_</CODE
><CODE
CLASS="replaceable"
><I
>x</I
></CODE
> where <CODE
CLASS="replaceable"
><I
>x</I
></CODE
> is the
option name.  If the option takes an argument, then the argument is read
and assigned to <CODE
CLASS="literal"
>$opt_</CODE
><CODE
CLASS="replaceable"
><I
>x</I
></CODE
> as its value; otherwise, a value of 1 is
assigned to the variable.</P
><P
CLASS="para"
>Invoke <CODE
CLASS="literal"
>getopt()</CODE
> with one argument, which should contain all
options that require a following argument.  For example:</P
><PRE
CLASS="programlisting"
>getopt('dV');</PRE
><P
CLASS="para"
>If your program is then invoked as:</P
><PRE
CLASS="programlisting"
>myscr -bfd January -V 10.4</PRE
><P
CLASS="para"
>then these variables will be set in the program:</P
><PRE
CLASS="programlisting"
>$opt_b = 1;
$opt_f = 1;
$opt_d = &quot;January&quot;;
$opt_V = 10.4;</PRE
><P
CLASS="para"
>Space between an option and its following argument is unnecessary.  The
previous command line could have been given this way:</P
><PRE
CLASS="programlisting"
>myscr -bfdJanuary -V10.4</PRE
><P
CLASS="para"
>In general, your program can be invoked with options given in any order.
All options not &quot;declared&quot; in the invocation of <CODE
CLASS="literal"
>getopt()</CODE
> are
assumed to be without accompanying argument.</P
><P
CLASS="para"
>Where <CODE
CLASS="literal"
>getopt()</CODE
> allows any single-character option,
<CODE
CLASS="literal"
>getopts()</CODE
> allows only those options you declare explicitly.  For
example, this invocation:</P
><PRE
CLASS="programlisting"
>getopts('a:bc:');</PRE
><P
CLASS="para"
>legitimizes only the options <CODE
CLASS="literal"
>-a</CODE
>, <CODE
CLASS="literal"
>-b</CODE
>, and <CODE
CLASS="literal"
>-c</CODE
>.  The
colon following the <CODE
CLASS="literal"
>a</CODE
> and <CODE
CLASS="literal"
>c</CODE
> means that these two options
require an accompanying argument; <CODE
CLASS="literal"
>b</CODE
> is not allowed to have an
argument.  Accordingly, here are some ways to invoke the program:</P
><PRE
CLASS="programlisting"
>myscr -abc              # WRONG unless bc is really the argument to -a
myscr -a -bc            # WRONG, with same qualification
myscr -a foo -bc bar    # $opt_a = &quot;foo&quot;; $opt_b = 1; $opt_c = &quot;bar&quot;
myscr -bafoo -cbar      # same as previous</PRE
><P
CLASS="para"
><CODE
CLASS="literal"
>getopts()</CODE
> returns false if it encounters errors during option
processing.  However, it continues to process arguments and assign values
as best it can to <CODE
CLASS="literal"
>$opt_</CODE
><CODE
CLASS="replaceable"
><I
>x</I
></CODE
>
variables.  You should always check for
errors before assuming that the variables hold meaningful values.</P
><P
CLASS="para"
><CODE
CLASS="literal"
>getopt()</CODE
> does not return a meaningful value.</P
><P
CLASS="para"
>Remember that both <CODE
CLASS="literal"
>getopt()</CODE
> and <CODE
CLASS="literal"
>getopts()</CODE
> halt argument
processing upon reading an argument (without leading &quot;<CODE
CLASS="literal"
>-</CODE
>&quot;) where
none was called for.  This is not considered an error.  So a user might
invoke your program with invalid arguments, without your being notified of
the fact.  However, you can always check to see whether <CODE
CLASS="literal"
>@ARGV</CODE
> has
been completely emptied or not&nbsp;- that is, whether all arguments have been
processed.
If you're using the <CODE
CLASS="literal"
>use&nbsp;strict</CODE
> pragma, which requires you to employ
only lexical variables or else globals that are fully declared, you 
will have to use the double-colon package delimiter or else the 
<CODE
CLASS="literal"
>use vars</CODE
> pragma.  For example:</P
><PRE
CLASS="programlisting"
>use strict;
use vars qw($opt_o $opt_i $opt_D);
use Getopt::Std;</PRE
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_035.htm"
TITLE="7.2.35 Getopt::Long&nbsp;- Extended Processing of Command-Line Options"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.35 Getopt::Long&nbsp;- Extended Processing of Command-Line Options"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_037.htm"
TITLE="7.2.37 I18N::Collate&nbsp;- Compare 8-bit Scalar Data According to the Current Locale"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.37 I18N::Collate&nbsp;- Compare 8-bit Scalar Data According to the Current Locale"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.2.35 Getopt::Long&nbsp;- Extended Processing of Command-Line Options</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.2.37 I18N::Collate&nbsp;- Compare 8-bit Scalar Data According to the Current Locale</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
