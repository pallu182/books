<HTML
><HEAD
>
<TITLE>[Appendix B] Libraries and Modules</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl on Win32 Systems"><META
NAME="DC.creator"
CONTENT="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:37:57Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-324-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"><LINK
REL="prev"
HREF="appa_18.htm"
TITLE="A.18 Chapter 19, OLE Automation"><LINK
REL="next"
HREF="appb_02.htm"
TITLE="B.2 Standard Modules"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl on Win32 Systems"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl on Win32 Systems"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/wsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_18.htm"
TITLE="A.18 Chapter 19, OLE Automation"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: A.18 Chapter 19, OLE Automation"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Appendix B</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appb_02.htm"
TITLE="B.2 Standard Modules"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: B.2 Standard Modules"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="appendix"
><H1
CLASS="appendix"
><A
CLASS="title"
NAME="appb-pgfId-1000000445"
>B. Libraries and Modules</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#appb-pgfId-35"
TITLE="B.1 Library Terminology"
>Library Terminology</A
><BR><A
CLASS="sect1"
HREF="appb_02.htm"
TITLE="B.2 Standard Modules"
>Standard Modules</A
><BR><A
CLASS="sect1"
HREF="appb_03.htm"
TITLE="B.3 CPAN: Beyond the Standard Library"
>CPAN: Beyond the Standard Library</A
><BR><A
CLASS="sect1"
HREF="appb_04.htm"
TITLE="B.4 Win32 Extensions"
>Win32 Extensions</A
></P
><P
></P
></DIV
><P
CLASS="para"
>For simple programs, you can easily write your own Perl routines and subroutines. As the tasks to which you apply Perl become more difficult, however, sometimes you'll find yourself thinking, "someone must have done this already." You are probably more right than you imagine. </P
><P
CLASS="para"
>For most common tasks, other people have already written the code. Moreover, they've placed it either in the standard Perl distribution or in the freely downloadable CPAN archive. To use this existing code (and save yourself some time), you'll have to understand how to make use of a Perl library. This task was briefly discussed in <A
CLASS="xref"
HREF="ch18_01.htm"
TITLE="CGI Programming"
>Chapter 18, <CITE
CLASS="chapter"
>CGI Programming</CITE
></A
>. </P
><P
CLASS="para"
>One advantage in using modules from the standard distribution is that you can then share your program with others without having to take any special steps. This statement is true because the same standard library is available to Perl programs almost everywhere. </P
><P
CLASS="para"
>You'll save yourself time in the long run if you get to know the standard library. No one benefits from reinventing the wheel. You should be aware, however, that the library contains a wide range of material. While some modules may be extremely helpful, others may be completely irrelevant to your needs. For example, some modules are useful only if you are creating extensions to Perl. </P
><P
CLASS="para"
>To read the documentation for a standard module, use the <EM
CLASS="emphasis"
>perldoc</EM
> program (if you have the standard distribution), or perhaps your web browser on HTML versions of the documentation. If all else fails, just look in the module itself; the documentation is contained within each module in pod format. To locate the module on your system, try executing this Perl program from the command line: </P
><PRE
CLASS="programlisting"
>perl -e &quot;print \&quot;@INC\n\&quot;&quot;</PRE
><P
CLASS="para"
>You should find the module in one of the directories listed by this command. </P
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="appb-pgfId-35"
>B.1 Library Terminology</A
></H2
><P
CLASS="para"
>Before we list the standard modules, let's untangle some terminology: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="appb-idx-1000002666-0"
></A
>Package</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A package is a simple namespace management device, which allows two different parts of a Perl program to each have a (different) variable named <CODE
CLASS="literal"
>$fred</CODE
>. These namespaces are managed with the <CODE
CLASS="literal"
>package</CODE
> declaration, described in <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>Chapter 5</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>. </P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="appb-idx-1000002667-0"
></A
>Library</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A library is a set of subroutines for a particular purpose. Often the library declares itself a separate package so that related variables and subroutines can be kept together, and so that they won't interfere with other variables in your program. Generally, an old-style library used to be placed in a separate file, often with a name ending in <EM
CLASS="emphasis"
>.pl</EM
>. The library routines were then pulled into the main program via the <CODE
CLASS="literal"
>require</CODE
> function. More recently this older approach has been replaced by the use of <EM
CLASS="emphasis"
>modules</EM
> (see next paragraph), and the term <EM
CLASS="emphasis"
>library</EM
> often refers to the entire system of modules that come with Perl. </P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="appb-idx-1000002668-0"
></A
>Module</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A module is a library that conforms to specific conventions, allowing the library routines to be brought into your program with the <CODE
CLASS="literal"
>use</CODE
> directive at compile time. Module filenames end in <EM
CLASS="emphasis"
>.pm</EM
>, because the <CODE
CLASS="literal"
>use</CODE
> directive insists on that convention. <A
CLASS="olink"
HREF="../prog/ch05_01.htm"
>Chapter 5</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> describes Perl modules in greater detail.</P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="appb-idx-1000002669-0"
></A
>Extension</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>An extension is a combination of a module written in Perl and a library written in C (or C++). On Win32 systems, these extensions are implemented as dynamic-link libraries and have a <EM
CLASS="emphasis"
>.pll</EM
> file extension. Extension modules are used just like modules&nbsp;- with the <CODE
CLASS="literal"
>use</CODE
> directive at compile time. The case is important here: it doesn't necessarily need to match the filename that the package is stored in, but should match the case used in the package declaration.</P
></DD
><DT
CLASS="term"
><A
CLASS="indexterm"
NAME="appb-idx-1000002670-0"
></A
>Pragma</DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A pragma is a module that affects the compilation phase of your program as well as the execution phase. Think of it as something that contains hints to the compiler. Unlike other modules, pragmas often (but not always) limit the scope of their effects to the innermost enclosing block of your program (that is, the block enclosing the pragma invocation). The names of pragmas are by convention all lowercase. </P
></DD
></DL
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_18.htm"
TITLE="A.18 Chapter 19, OLE Automation"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: A.18 Chapter 19, OLE Automation"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl on Win32 Systems"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appb_02.htm"
TITLE="B.2 Standard Modules"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: B.2 Standard Modules"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>A.18 Chapter 19, OLE Automation</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>B.2 Standard Modules</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
