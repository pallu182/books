<HTML
><HEAD
>
<TITLE>[Chapter 3] 3.4 Array Operators and Functions</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:32:11Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_01.htm"
TITLE="3. Arrays and List Data"><LINK
REL="prev"
HREF="ch03_03.htm"
TITLE="3.3 Variables"><LINK
REL="next"
HREF="ch03_05.htm"
TITLE="3.5 Scalar and List Context"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_03.htm"
TITLE="3.3 Variables"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.3 Variables"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. Arrays and List Data"
>Chapter 3<BR>Arrays and List Data</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_05.htm"
TITLE="3.5 Scalar and List Context"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.5 Scalar and List Context"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch03-30736"
>3.4 Array Operators and Functions</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-685433-0"
></A
>Array functions and operators act on entire arrays. Some return a list, which can then either be used as a value for another array function, or assigned into an array variable.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-pgfId-685561"
>3.4.1 Assignment</A
></H3
><P
CLASS="para"
>Probably the most important array operator is the <A
CLASS="indexterm"
NAME="ch03-idx-685434-0"
></A
>array assignment operator, which gives an array variable a value. It is an <A
CLASS="indexterm"
NAME="ch03-idx-685435-0"
></A
>equal sign, just like the scalar assignment operator. Perl determines whether the assignment is a scalar assignment or an array assignment by noticing whether the assignment is to a scalar or an array variable. For example:</P
><PRE
CLASS="programlisting"
>@fred = (1,2,3); # The fred array gets a three-element literal
@barney = @fred; # now that is copied to @barney</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-685436-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-685436-1"
></A
>If a scalar value is assigned to an array variable, the scalar value becomes the single element of an array:</P
><PRE
CLASS="programlisting"
>@huh = 1; # 1 is promoted to the list (1) automatically</PRE
><P
CLASS="para"
>A<A
CLASS="indexterm"
NAME="ch03-idx-685437-0"
></A
>rray variable names may appear in a list literal list. When the value of the list is computed, Perl replaces the names with the current values of the array, like so:</P
><PRE
CLASS="programlisting"
>@fred = qw(one two);
@barney = (4,5,@fred,6,7); # @barney becomes 
                           # (4,5,&quot;one&quot;,&quot;two&quot;,6,7)
@barney = (8,@barney);     # puts 8 in front of @barney
@barney = (@barney,&quot;last&quot;);# and a &quot;last&quot; at the end
                        # @barney is now (8,4,5,&quot;one&quot;,&quot;two&quot;,6,7,&quot;last&quot;)</PRE
><P
CLASS="para"
>Note that the inserted array elements are at the same level as the rest of the literal: a <A
CLASS="indexterm"
NAME="ch03-idx-685439-0"
></A
>list cannot contain another list as an element.[<A
CLASS="footnote"
HREF="#ch03-pgfId-687147"
>2</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch03-pgfId-687147"
>[2]</A
> Although a <EM
CLASS="emphasis"
>list reference</EM
><A
CLASS="indexterm"
NAME="ch03-idx-687146-0"
></A
> is permitted as a list element, it's not really a list as a list element. Still, it works out to nearly the same thing, allowing for multidimensional arrays. See <A
CLASS="olink"
HREF="../prog/ch04_01.htm"
>Chapter 4</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> or <EM
CLASS="emphasis"
>perllol </EM
> (1) for details.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>If a list literal contains only variable references (not expressions), the list literal can also be treated as a variable. In other words, such a list literal can be used on the left side of an assignment. Each scalar variable in the list literal takes on the corresponding value from the list on the right side of the assignment. For example:</P
><PRE
CLASS="programlisting"
>($a,$b,$c) = (1,2,3);    # give 1 to $a, 2 to $b, 3 to $c
($a,$b) = ($b,$a);       # swap $a and $b
($d,@fred) = ($a,$b,$c); # give $a to $d, and ($b,$c) to @fred
($e,@fred) = @fred;      # remove first element of @fred to $e
                         # this makes @fred = ($c) and $e = $b</PRE
><P
CLASS="para"
>If the number of elements being assigned does not match the number of variables to hold the values, any excess values (on the right side of the equal sign) are silently discarded, and any excess variables (on the left side of the equal sign) are given the value of <A
CLASS="indexterm"
NAME="ch03-idx-685442-0"
></A
><CODE
CLASS="literal"
>undef</CODE
>.</P
><P
CLASS="para"
>An array variable appearing in the array literal list must be last, because the array variable is "greedy" and consumes all remaining values. (Well, you could put other variables after it, but they would just get <CODE
CLASS="literal"
>undef</CODE
> values.)</P
><P
CLASS="para"
>If an <A
CLASS="indexterm"
NAME="ch03-idx-685443-0"
></A
>array variable is assigned to a scalar variable, the number assigned is the <EM
CLASS="emphasis"
>length</EM
> of the array, as in:</P
><PRE
CLASS="programlisting"
>@fred = (4,5,6);   # initialize @fred
$a = @fred;        # $a gets 3, the current length of @fred</PRE
><P
CLASS="para"
>The length is also returned whenever an array variable name is used where a scalar value is needed. (In the upcoming section called <A
CLASS="xref"
HREF="ch03_05.htm"
TITLE="Scalar and List Context"
>"Scalar and List Context</A
>," we'll see that this is called using the array name in a <A
CLASS="indexterm"
NAME="ch03-idx-685444-0"
></A
><EM
CLASS="emphasis"
>scalar context</EM
>.) For example, to get one less than the length of the array, you can use <CODE
CLASS="literal"
>@fred-1</CODE
>, since the scalar subtraction operator wants scalars for both of its operands. Notice the following:</P
><PRE
CLASS="programlisting"
>$a = @fred;    # $a gets the length of @fred
($a) = @fred;  # $a gets the first element of @fred</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-685445-0"
></A
>The first assignment is a scalar assignment, and so <CODE
CLASS="literal"
>@fred</CODE
> is treated as a scalar, yielding its length. The second assignment is an array assignment (even if only one value is wanted), and thus yields the first element of <CODE
CLASS="literal"
>@fred</CODE
>, silently discarding all the rest.</P
><P
CLASS="para"
>The value of an array assignment is itself a list value, and can be cascaded as you can with scalar assignments. For example:</P
><PRE
CLASS="programlisting"
>@fred = (@barney =  (2,3,4));    # @fred and @barney get (2,3,4)
@fred = @barney =  (2,3,4);    # same thing</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-pgfId-685568"
>3.4.2 Array Element Access</A
></H3
><P
CLASS="para"
>So far, we've been treating the array as a whole, adding and removing values by doing array assignments. Many useful programs are constructed using arrays without ever accessing any specific array element. However, Perl provides a traditional <A
CLASS="indexterm"
NAME="ch03-idx-685446-0"
></A
>subscripting function to access an <A
CLASS="indexterm"
NAME="ch03-idx-685447-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-685447-1"
></A
>array element by numeric index.</P
><P
CLASS="para"
>For the subscripting function, <A
CLASS="indexterm"
NAME="ch03-idx-685448-0"
></A
>array elements are numbered using sequential integers, beginning at zero[<A
CLASS="footnote"
HREF="#ch03-pgfId-685708"
>3</A
>] and increasing by one for each element. The first element of the <CODE
CLASS="literal"
>@fred</CODE
> array is accessed as <CODE
CLASS="literal"
>$fred[0]</CODE
>. Note that the <CODE
CLASS="literal"
>@</CODE
> on the array name becomes a <CODE
CLASS="literal"
>$</CODE
> on the element reference. This is because accessing an element of the array identifies a scalar variable (part of the array), which can either be assigned to or have its current value used in an expression, like so:<PRE
CLASS="programlisting"
>@fred = (7,8,9);
$b = $fred[0];  # give 7 to $b (first element of @fred)
$fred[0] = 5;   # now @fred = (5,8,9)</PRE
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch03-pgfId-685708"
>[3]</A
> It's possible to change the index value of the first element to something else (like "1"). However, doing so has drastic effects, will probably confuse people maintaining your code, and might break the routines you take from other people. Thus, it's highly recommended that you consider this an unusable feature.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Other elements can be accessed with equal ease, as in:</P
><PRE
CLASS="programlisting"
>$c = $fred[1];                   # give 8 to $c
$fred[2]++;                      # increment the third element of @fred
$fred[1] += 4;                   # add 4 to the second element
($fred[0],$fred[1]) = ($fred[1],$fred[0]); # swap the first two</PRE
><P
CLASS="para"
>Accessing a list of elements from the same array (as in that last example) is called a <A
CLASS="indexterm"
NAME="ch03-idx-685449-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-685449-1"
></A
><EM
CLASS="emphasis"
>slice</EM
>, and occurs often enough that there is a special representation for it:</P
><PRE
CLASS="programlisting"
>@fred[0,1];                 # same as ($fred[0],$fred[1])
@fred[0,1] = @fred[1,0];    # swap the first two elements
@fred[0,1,2] = @fred[1,1,1];# make all 3 elements like the 2nd
@fred[1,2] = (9,10);        # change the last two values to 9 and 10</PRE
><P
CLASS="para"
>Note that this slice uses an <CODE
CLASS="literal"
>@</CODE
> prefix rather than a <CODE
CLASS="literal"
>$</CODE
>. This is because you are creating an array variable by selecting part of the array rather than a scalar variable accessing just one element.</P
><P
CLASS="para"
>Slices also work on <A
CLASS="indexterm"
NAME="ch03-idx-685450-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-685450-1"
></A
>literal lists, or any function that returns a list value:</P
><PRE
CLASS="programlisting"
>@who = (qw(fred barney betty wilma))[2,3];
# like @x = qw(fred barney betty wilma); @who = @x[2,3];</PRE
><P
CLASS="para"
>The index values in these examples have been literal integers, but the index can also be any expression that returns a number, which is then used to select the appropriate element:</P
><PRE
CLASS="programlisting"
>@fred = (7,8,9);
$a = 2;
$b = $fred[$a];       # like $fred[2], or the value of 9
$c = $fred[$a-1];     # $c gets $fred[1], or 8
($c) = (7,8,9)[$a-1]; # same thing using slice</PRE
><P
CLASS="para"
>Perl programs can thus have array accesses similar to many traditional programming languages.</P
><P
CLASS="para"
>This idea of using an expression for the subscript also works for slices. Remember, however, that the subscript for a slice is a list of values, so the expression is an <A
CLASS="indexterm"
NAME="ch03-idx-685451-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-685451-1"
></A
>array expression, rather than a scalar expression.</P
><PRE
CLASS="programlisting"
>@fred = (7,8,9); # as in previous example
@barney = (2,1,0);
@backfred = @fred[@barney];
# same as @fred[2,1,0], or ($fred[2],$fred[1],$fred[0]), or
# (9,8,7)</PRE
><P
CLASS="para"
>If you access an array element beyond the end of the current array (that is, an index of greater than the last element's index), the <A
CLASS="indexterm"
NAME="ch03-idx-685452-0"
></A
><CODE
CLASS="literal"
>undef</CODE
> value is returned without warning. For example:</P
><PRE
CLASS="programlisting"
>@fred = (1,2,3);
$barney = $fred[7]; # $barney is now undef</PRE
><P
CLASS="para"
>Assigning a value beyond the end of the current <A
CLASS="indexterm"
NAME="ch03-idx-685453-0"
></A
>array automatically extends the array (giving a value of <CODE
CLASS="literal"
>undef</CODE
> to all intermediate values, if any). For example:</P
><PRE
CLASS="programlisting"
>@fred = (1,2,3);
$fred[3] = &quot;hi&quot;; # @fred is now (1,2,3,&quot;hi&quot;)
$fred[6] = &quot;ho&quot;; # @fred is now (1,2,3,&quot;hi&quot;,undef,undef,&quot;ho&quot;)</PRE
><P
CLASS="para"
>You can use <A
CLASS="indexterm"
NAME="ch03-idx-685455-0"
></A
><CODE
CLASS="literal"
>$#fred</CODE
> to get the index value of the last element of <CODE
CLASS="literal"
>@fred</CODE
>. You can even assign this value to change the length of <CODE
CLASS="literal"
>@fred</CODE
>, making it grow or shrink, but that's generally unnecessary, because the array grows and shrinks automatically.</P
><P
CLASS="para"
>A negative subscript on an array counts back from the end. So, another way to get at the last element is with the subscript <KBD
CLASS="command"
>-1</KBD
>. The second to the last element would be <KBD
CLASS="command"
>-2</KBD
>, and so on. For example:</P
><PRE
CLASS="programlisting"
>@fred = (&quot;fred&quot;, &quot;wilma&quot;, &quot;pebbles&quot;, &quot;dino&quot;);
print $fred[-1];        # prints &quot;dino&quot;
print $#fred;           # prints 3
print $fred[$#fred];    # prints &quot;dino&quot;</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-pgfId-685562"
>3.4.3 The push and pop Functions</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-685456-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-685456-1"
></A
>One common use of an array is as a stack of information, where new values are added to and removed from the right-hand side of the list. These operations occur often enough to have their own special functions:</P
><PRE
CLASS="programlisting"
>push(@mylist,$newvalue);    # like @mylist = (@mylist,$newvalue)
$oldvalue = pop(@mylist);   # removes the last element of @mylist</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>pop</CODE
> function returns <A
CLASS="indexterm"
NAME="ch03-idx-685457-0"
></A
><CODE
CLASS="literal"
>undef</CODE
> if given an empty list, rather than doing something un-Perl-like such as complaining or generating a warning message.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>push</CODE
> function also accepts a list of values to be pushed. The values are pushed together onto the end of the list. For example:</P
><PRE
CLASS="programlisting"
>@mylist = (1,2,3);
push(@mylist,4,5,6); # @mylist = (1,2,3,4,5,6)</PRE
><P
CLASS="para"
>Note that the first argument must be an array variable name; pushing and popping wouldn't make sense on a literal list.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-pgfId-685563"
>3.4.4 The shift and unshift Functions</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-685459-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-685459-1"
></A
>The <CODE
CLASS="literal"
>push</CODE
> and <CODE
CLASS="literal"
>pop</CODE
> functions do things to the "right" side of a list (the portion with the highest subscripts). Similarly, the <CODE
CLASS="literal"
>unshift</CODE
> and <CODE
CLASS="literal"
>shift</CODE
> functions perform the corresponding actions on the "left" side of a list (the portion with the lowest subscripts). Here are a few examples:</P
><PRE
CLASS="programlisting"
>unshift(@fred,$a);       # like @fred = ($a,@fred);
unshift(@fred,$a,$b,$c); # like @fred = ($a,$b,$c,@fred);
$x = shift(@fred);       # like ($x,@fred) = @fred;
                         # with some real values
@fred = (5,6,7);
unshift(@fred,2,3,4);    # @fred is now (2,3,4,5,6,7)
$x = shift(@fred);       # $x gets 2, @fred is now (3,4,5,6,7)</PRE
><P
CLASS="para"
>As with <CODE
CLASS="literal"
>pop</CODE
>, <CODE
CLASS="literal"
>shift</CODE
> returns <CODE
CLASS="literal"
>undef</CODE
> if given an empty array variable.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-pgfId-685510"
>3.4.5 The reverse Function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-685460-0"
></A
>The <CODE
CLASS="literal"
>reverse</CODE
> function reverses the order of the elements of its argument, returning the resulting list. For example:</P
><PRE
CLASS="programlisting"
>@a = (7,8,9);
@b = reverse(@a);    # gives @b the value of (9,8,7)
@b = reverse(7,8,9); # same thing</PRE
><P
CLASS="para"
>Note that the argument list is unaltered; the <CODE
CLASS="literal"
>reverse</CODE
> function works on a copy. If you want to reverse an array "in place," you'll need to assign it back into the same variable:</P
><PRE
CLASS="programlisting"
>@b = reverse(@b); # give @b the reverse of itself</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-pgfId-685565"
>3.4.6 The sort Function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-685461-0"
></A
>The <CODE
CLASS="literal"
>sort</CODE
> function takes its arguments, and sorts them as if they were single strings in ascending ASCII order. It returns the sorted list without altering the original list. For example:</P
><PRE
CLASS="programlisting"
>@x = sort(&quot;small&quot;,&quot;medium&quot;,&quot;large&quot;);
               # @x gets &quot;large&quot;,&quot;medium&quot;,&quot;small&quot;
@y = (1,2,4,8,16,32,64);
@y = sort(@y); # @y gets 1,16,2,32,4,64,8</PRE
><P
CLASS="para"
>Note that sorting numbers does not happen numerically, but by the string values of each number (<CODE
CLASS="literal"
>1</CODE
>, <CODE
CLASS="literal"
>16</CODE
>, <CODE
CLASS="literal"
>2</CODE
>, <CODE
CLASS="literal"
>32</CODE
>, and so on). In <A
CLASS="xref"
HREF="ch15_04.htm"
TITLE="Advanced Sorting"
>Section 15.4, "Advanced Sorting"</A
>, you'll learn how to sort numerically, or in descending order, or by the third character of each string, or by any other method that you choose.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch03-pgfId-685512"
>3.4.7 The chomp Function</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch03-idx-685462-0"
></A
><CODE
CLASS="literal"
>chomp</CODE
> function works on an array variable as well as a scalar variable. Each element of the array has its last record separator removed. This can be handy when you've read a list of lines as separate array elements, and you want to remove the newline from each of the lines at once. For example:</P
><PRE
CLASS="programlisting"
>@stuff = (&quot;hello\n&quot;,&quot;world\n&quot;,&quot;happy days&quot;);
chomp(@stuff); # @stuff is now (&quot;hello&quot;,&quot;world&quot;,&quot;happy days&quot;)</PRE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_03.htm"
TITLE="3.3 Variables"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.3 Variables"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_05.htm"
TITLE="3.5 Scalar and List Context"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.5 Scalar and List Context"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.3 Variables</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.5 Scalar and List Context</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
