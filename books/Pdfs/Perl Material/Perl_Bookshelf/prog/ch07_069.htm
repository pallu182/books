<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.2.69 Text::Soundex&nbsp;- The Soundex Algorithm Described by Knuth</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T02:04:36Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_02.htm"
TITLE="7.2 Library Modules"><LINK
REL="prev"
HREF="ch07_068.htm"
TITLE="7.2.68 Text::ParseWords&nbsp;- Parse Text into a List of Tokens"><LINK
REL="next"
HREF="ch07_070.htm"
TITLE="7.2.70 Text::Tabs&nbsp;- Expand and Unexpand Tabs"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_068.htm"
TITLE="7.2.68 Text::ParseWords&nbsp;- Parse Text into a List of Tokens"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.68 Text::ParseWords&nbsp;- Parse Text into a List of Tokens"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. The Standard Perl Library"
>Chapter 7<BR>The Standard Perl Library</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_070.htm"
TITLE="7.2.70 Text::Tabs&nbsp;- Expand and Unexpand Tabs"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.70 Text::Tabs&nbsp;- Expand and Unexpand Tabs"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="AUTOID-27279"
>7.2.69 Text::Soundex&nbsp;- The Soundex Algorithm Described by Knuth</A
></H3
><PRE
CLASS="programlisting"
>use Text::Soundex;

$code = soundex $string;  # get soundex code for a string
@codes = soundex @list;   # get list of codes for list of strings

# set value to be returned for strings without soundex code
$soundex_nocode = 'Z000';</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-27283"
></A
><A
CLASS="indexterm"
NAME="AUTOID-27285"
></A
><A
CLASS="indexterm"
NAME="AUTOID-27288"
></A
>This module implements the soundex algorithm as described by Donald Knuth
in Volume 3 of <EM
CLASS="emphasis"
>The Art of Computer Programming</EM
>.  The algorithm is
intended to hash words (in particular surnames) into a small space using a
simple model that approximates the sound of the word when spoken by an English
speaker.  Each word is reduced to a four-character string, the first
character being an uppercase letter and the remaining three being digits.</P
><P
CLASS="para"
>If there is no soundex code representation for a string, then the value of
<CODE
CLASS="literal"
>$soundex_nocode</CODE
> is returned.  This variable is initially set to the
undefined value, but
many people seem to prefer an unlikely value like <CODE
CLASS="literal"
>Z000</CODE
>.
(How unlikely this is depends on the data set being dealt with.)  Any value
can be assigned to <CODE
CLASS="literal"
>$soundex_nocode</CODE
>.</P
><P
CLASS="para"
>In a scalar context <CODE
CLASS="literal"
>soundex()</CODE
> returns the soundex code of its first
argument, and in an array context a list is returned in which each element
is the soundex code for the corresponding argument passed to
<CODE
CLASS="literal"
>soundex()</CODE
>.</P
><P
CLASS="para"
>For example:</P
><PRE
CLASS="programlisting"
>@codes = soundex qw(Mike Stok);</PRE
><P
CLASS="para"
>leaves <CODE
CLASS="literal"
>@codes</CODE
> containing 
<CODE
CLASS="literal"
>('M200', 'S320')</CODE
>.</P
><P
CLASS="para"
>Here are Knuth's examples of various names and the soundex codes they map to:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Names</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Code</TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Euler, Ellery</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>E460</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Gauss, Ghosh</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>G200</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Hilbert, Heilbronn</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>H416</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Knuth, Kant</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>K530</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Lloyd, Ladd</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>L300</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Lukasiewicz, Lissajous</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>L222</CODE
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>So we have:</P
><PRE
CLASS="programlisting"
>$code = soundex 'Knuth';              # $code contains 'K530'
@list = soundex qw(Lloyd Gauss);      # @list contains 'L300', 'G200'</PRE
><P
CLASS="para"
>As the soundex algorithm was originally used a <EM
CLASS="emphasis"
>long</EM
> time ago in the United States,
it considers only the English alphabet and pronunciation.</P
><P
CLASS="para"
>As it is mapping a large space (arbitrary-length strings) onto a small
space (single letter plus three digits), no inference can be made about the
similarity of two strings that end up with the same soundex code.  For
example, both <CODE
CLASS="literal"
>Hilbert</CODE
> and <CODE
CLASS="literal"
>Heilbronn</CODE
> end up with a soundex code
of <CODE
CLASS="literal"
>H416</CODE
>.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_068.htm"
TITLE="7.2.68 Text::ParseWords&nbsp;- Parse Text into a List of Tokens"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.68 Text::ParseWords&nbsp;- Parse Text into a List of Tokens"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_070.htm"
TITLE="7.2.70 Text::Tabs&nbsp;- Expand and Unexpand Tabs"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.70 Text::Tabs&nbsp;- Expand and Unexpand Tabs"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.2.68 Text::ParseWords&nbsp;- Parse Text into a List of Tokens</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.2.70 Text::Tabs&nbsp;- Expand and Unexpand Tabs</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
