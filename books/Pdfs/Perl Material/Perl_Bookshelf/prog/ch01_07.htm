<HTML
><HEAD
>
<TITLE>[Chapter 1] 1.7 Regular Expressions</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:29:50Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. An Overview of Perl"><LINK
REL="prev"
HREF="ch01_06.htm"
TITLE="1.6 Control Structures"><LINK
REL="next"
HREF="ch01_08.htm"
TITLE="1.8 List Processing"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch01_06.htm"
TITLE="1.6 Control Structures"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.6 Control Structures"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. An Overview of Perl"
>Chapter 1<BR>An Overview of Perl</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch01_08.htm"
TITLE="1.8 List Processing"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.8 List Processing"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="PERL2-CH-1-SECT-7"
>1.7 Regular Expressions</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH01.RE"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1423"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1426"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1429"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1432"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1435"
></A
><EM
CLASS="emphasis"
>Regular expressions</EM
> (aka regexps, regexes or REs) are used by many
UNIX programs, such as <EM
CLASS="emphasis"
>grep</EM
>, <EM
CLASS="emphasis"
>sed</EM
> and <EM
CLASS="emphasis"
>awk</EM
>,[<A
CLASS="footnote"
HREF="#AUTOID-1442"
>24</A
>]
editors like <EM
CLASS="emphasis"
>vi</EM
> and <EM
CLASS="emphasis"
>emacs</EM
>, and even some of the shells.  A
regular expression is a way of describing a set of strings without
having to list all the strings in your set.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-1442"
>[24]</A
> A good source of information on regular expression concepts is
the Nutshell Handbook <EM
CLASS="emphasis"
>sed &amp; awk</EM
> by Dale
Dougherty (O'Reilly &amp; Associates). You might also keep an eye out
for Jeffrey Friedl's forthcoming book, <EM
CLASS="emphasis"
>Mastering Regular
Expressions</EM
> (O'Reilly &amp; Associates).</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Regular expressions are used several ways in Perl.  First and
foremost, they're used in conditionals to determine whether a string
matches a particular pattern.  So when you see something that looks like
<CODE
CLASS="literal"
>/foo/</CODE
>, you know you're looking at an ordinary <EM
CLASS="emphasis"
>pattern-matching</EM
> operator.<A
CLASS="indexterm"
NAME="AUTOID-1451"
></A
></P
><P
CLASS="para"
>Second, if you can locate patterns within a string, you can replace them
with something else.  So when you see something that looks like
<CODE
CLASS="literal"
>s/foo/bar/</CODE
>, you know it's asking Perl to substitute &quot;bar&quot; for &quot;foo&quot;, if
possible.  We call that the <EM
CLASS="emphasis"
>substitution</EM
> operator.<A
CLASS="indexterm"
NAME="AUTOID-1456"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1458"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1460"
></A
></P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1464"
></A
>Finally, patterns can specify not only where something is, but also
where it isn't.  So the <A
CLASS="xref"
HREF="ch03_155.htm"
TITLE="split"
><B
CLASS="xref.cmd"
>split</B
></A
> operator uses a regular expression
to specify where the data isn't.  That is, the regular expression
defines the <EM
CLASS="emphasis"
>delimiters</EM
> that separate the fields of data.  Our grade
example has a couple of trivial examples of this.  Lines 5 and 12 each
split strings on the space character in order to return a list of words.
But you can split on any delimiter you can specify with a regular
expression.</P
><P
CLASS="para"
>(There are various modifiers you can use in each of these situations to do
exotic things like ignore case when matching alphabetic characters, but
these are the sorts of gory details that we'll cover in <A
CLASS="xref"
HREF="ch02_01.htm"
TITLE="The Gory Details"
>Chapter 2</A
>.)</P
><P
CLASS="para"
>The simplest use of regular expressions is to match a literal
expression.  In the case of the splits we just mentioned, we matched on
a single space.  But if you match on several characters in a row, they
all have to match sequentially.  That is, the pattern looks for a
substring, much as you'd expect.  Let's say we want to show all the
lines of an HTML file that are links to other HTML files (as opposed to
FTP links).  Let's imagine we're working with HTML for the first time,
and we're being a little naive yet.  We know that these links will
always have &quot;http:&quot; in them somewhere.  We could loop through our file
with this:[<A
CLASS="footnote"
HREF="#AUTOID-1471"
>25</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-1471"
>[25]</A
> This is very similar to what the UNIX command <CODE
CLASS="literal"
>grep 'http:' file</CODE
> would
do.  On MS-DOS you could use the <EM
CLASS="emphasis"
>find</EM
> command, but it doesn't know
how to do more complicated regular expressions.  (However, the misnamed
<EM
CLASS="emphasis"
>findstr</EM
> program of Windows NT does know about regular expressions.)</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
><PRE
CLASS="programlisting"
>while ($line = &lt;FILE&gt;) {
    if ($line =~ /http:/) {
        print $line;
    }
}</PRE
></P
><P
CLASS="para"
>Here, the <CODE
CLASS="literal"
>=~</CODE
> (pattern binding operator) is telling
Perl to look for a match of
the regular expression <CODE
CLASS="literal"
>http:</CODE
> in the variable <CODE
CLASS="literal"
>$line</CODE
>.  If it finds the
expression, the operator returns a true value and the block (a <B
CLASS="emphasis.bold"
>print</B
>
command) is executed.  By the way, if you don't use the <CODE
CLASS="literal"
>=~</CODE
> binding
operator, then Perl will search a default variable instead of <CODE
CLASS="literal"
>$line</CODE
>.
This default space is really just a special variable that goes by
the odd name of <B
CLASS="emphasis.bold"
>$_</B
>.  In fact, many of the operators in Perl
default to using the <B
CLASS="emphasis.bold"
>$_</B
> variable, so an expert Perl programmer might
write the above as:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>while (&lt;FILE&gt;) {
    print if /http:/;
}</PRE
></P
><P
CLASS="para"
>(Hmm, another one of those statement modifiers seems to have snuck in
there.  Insidious little beasties.)</P
><P
CLASS="para"
>This stuff is pretty handy, but what if we wanted to find all the links,
not just the HTTP links?  We could give a list of links, like &quot;<CODE
CLASS="literal"
>http:</CODE
>&quot;,
&quot;<CODE
CLASS="literal"
>ftp:</CODE
>&quot;, &quot;<CODE
CLASS="literal"
>mailto:</CODE
>&quot;, and so on.  But that list could get long, and what would we
do when a new kind of link was added?</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>while (&lt;FILE&gt;) {
    print if /http:/;
    print if /ftp:/;
    print if /mailto:/;
    # What next?
}</PRE
></P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1497"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1499"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1502"
></A
>Since regular expressions are descriptive of a set of strings, we can
just describe what we are looking for: a number of alphabetic characters
followed by a colon.  In regular expression talk (Regexpese?), that
would be <CODE
CLASS="literal"
>/[a-zA-Z]+:/</CODE
>, where the brackets define a <EM
CLASS="emphasis"
>character
class</EM
>.  The <CODE
CLASS="literal"
>a-z</CODE
> and <CODE
CLASS="literal"
>A-Z</CODE
> represent all alphabetic characters (the
dash means the range of all characters between the starting and ending
character, inclusive).  And the <CODE
CLASS="literal"
>+</CODE
> is a special character which says
&quot;one or more of whatever was before me&quot;.  It's what we call a
<EM
CLASS="emphasis"
>quantifier</EM
>, meaning a gizmo that says how many times something is
allowed to repeat.  (The slashes aren't really part of the regular
expression, but rather part of the pattern match operator.   The slashes
are acting like quotes that just happen to contain a regular
expression.)</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1512"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1514"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1516"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1518"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1520"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1522"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1524"
></A
>Because certain classes like the alphabetics are so commonly used, Perl
defines special cases for them.  See <A
CLASS="xref"
HREF="ch01_07.htm#PERL2-CH-1-TAB-7"
TITLE="Regular Expression Character Classes"
>Table 1.7</A
> for these special cases.</P
><BR><TABLE
CLASS="table"
BORDER="1"
CELLPADDING="3"
><CAPTION
CLASS="table"
><A
CLASS="title"
NAME="PERL2-CH-1-TAB-7"
>Table 1.7: Regular Expression Character Classes</A
></CAPTION
><THEAD
CLASS="thead"
><TR
CLASS="row"
VALIGN="TOP"
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Name</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Definition</TH
><TH
CLASS="entry"
ALIGN="LEFT"
ROWSPAN="1"
COLSPAN="1"
>Code</TH
></TR
></THEAD
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Whitespace</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>[ \t\n\r\f]</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>\s</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Word character</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>[a-zA-Z_0-9]</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>\w</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
>Digit</TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>[0-9]</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>\d</CODE
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Note that these match <EM
CLASS="emphasis"
>single</EM
> characters.  A <CODE
CLASS="literal"
>\w</CODE
> will match any single
word character, not an entire word.  (Remember that <CODE
CLASS="literal"
>+</CODE
> quantifier?  You
can say <CODE
CLASS="literal"
>\w+</CODE
> to match a word.)  Perl also provides the negation of
these classes by using the uppercased character, such as <CODE
CLASS="literal"
>\D</CODE
> for a
non-digit character.</P
><P
CLASS="para"
>(We should note that <CODE
CLASS="literal"
>\w</CODE
> is not always equivalent to <CODE
CLASS="literal"
>[a-zA-Z_0-9]</CODE
>.
Some locales define additional alphabetic characters outside the ASCII
sequence, and <CODE
CLASS="literal"
>\w</CODE
> respects them.)</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1566"
></A
>There is one other very special character class, written with a &quot;<CODE
CLASS="literal"
>.</CODE
>&quot;,
that will match any character whatsoever.[<A
CLASS="footnote"
HREF="#AUTOID-1570"
>26</A
>]
For example, <CODE
CLASS="literal"
>/a./</CODE
> will match any string containing an &quot;<CODE
CLASS="literal"
>a</CODE
>&quot; that is not
the last character in the string.  Thus it will match &quot;<CODE
CLASS="literal"
>at</CODE
>&quot; or &quot;<CODE
CLASS="literal"
>am</CODE
>&quot; or
even &quot;<CODE
CLASS="literal"
>a+</CODE
>&quot;, but not &quot;<CODE
CLASS="literal"
>a</CODE
>&quot;, since there's nothing after the &quot;<CODE
CLASS="literal"
>a</CODE
>&quot; for the dot
to match.  Since it's searching for the pattern anywhere in the string,
it'll match &quot;<CODE
CLASS="literal"
>oasis</CODE
>&quot; and &quot;<CODE
CLASS="literal"
>camel</CODE
>&quot;, but not &quot;<CODE
CLASS="literal"
>sheba</CODE
>&quot;.  It matches &quot;<CODE
CLASS="literal"
>caravan</CODE
>&quot;
on the first &quot;<CODE
CLASS="literal"
>a</CODE
>&quot;.  It could match on the second &quot;<CODE
CLASS="literal"
>a</CODE
>&quot;, but it stops after
it finds the first suitable match, searching from left to right.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-1570"
>[26]</A
> Except that it won't normally match a newline.  When you think about it,
a &quot;<CODE
CLASS="literal"
>.</CODE
>&quot; doesn't normally match a newline in <EM
CLASS="emphasis"
>grep</EM
>(1) either.</P
></DIV
></BLOCKQUOTE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-1-SECT-7.1"
>1.7.1 Quantifiers</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1590"
></A
>The characters and character classes we've talked about all match single
characters.  We mentioned that you could match multiple &quot;word&quot;
characters with <CODE
CLASS="literal"
>\w+</CODE
> in order to match an entire word.  The <CODE
CLASS="literal"
>+</CODE
>
is one kind of quantifier, but there are others.  (All of them are placed
after the item being quantified.)</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1595"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1598"
></A
>The most general form of quantifier specifies both the minimum and
maximum number of times an item can match.  You put the two numbers in
braces, separated by a comma.  For example, if you were trying
to match North American phone numbers, <CODE
CLASS="literal"
>/\d{7,11}/</CODE
> would match at least seven digits,
but no more than eleven digits.  If you put a single number in the braces,
the number specifies both the minimum and the maximum; that is, the
number specifies the exact number of times the item can match.  (If you
think about it, all unquantified items have an implicit <CODE
CLASS="literal"
>{1}</CODE
>
quantifier.)</P
><P
CLASS="para"
>If you put the minimum and the comma but omit the maximum, then the
maximum is taken to be infinity.  In other words, it will match at least
the minimum number of times, plus as many as it can get after that.
For example, <CODE
CLASS="literal"
>/\d{7}/</CODE
> will only match a local (North American) phone number (7
digits), while <CODE
CLASS="literal"
>/\d{7,}/</CODE
> will match any phone number, even an
international one (unless it happens to be shorter than 7 digits).
There is no
special way of saying &quot;at most&quot; a certain number of times. Just
say <CODE
CLASS="literal"
>/.{0,5}/</CODE
>, for example, to find at most five arbitrary characters.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1608"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1611"
></A
>Certain combinations of minimum and maximum occur frequently, so Perl
defines special quantifiers for them.  We've already seen <CODE
CLASS="literal"
>+</CODE
>, which is
the same as <CODE
CLASS="literal"
>{1,}</CODE
>, or &quot;at least one of the preceding item&quot;.  There is
also <CODE
CLASS="literal"
>*</CODE
>, which is the same as <CODE
CLASS="literal"
>{0,}</CODE
>, or &quot;zero or more of the
preceding item&quot;, and <CODE
CLASS="literal"
>?</CODE
>, which is the same as <CODE
CLASS="literal"
>{0,1}</CODE
>, or &quot;zero or
one of the preceding item&quot; (that is, the preceding item is optional).</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1621"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1623"
></A
>There are a couple things about quantification that you need
to be careful of.  First of all, Perl quantifiers are by default
<EM
CLASS="emphasis"
>greedy</EM
>.  This means that they will attempt to match as much as they
can as long as the entire expression still matches.  For example, if you
are matching <CODE
CLASS="literal"
>/\d+/</CODE
> against &quot;<CODE
CLASS="literal"
>1234567890</CODE
>&quot;, it will match the entire
string.  This is something to especially watch out for when you are using
&quot;<CODE
CLASS="literal"
>.</CODE
>&quot;, any character.  Often, someone will have a string like:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>spp:Fe+H20=FeO2;H:2112:100:Stephen P Potter:/home/spp:/bin/tcsh</PRE
></P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1633"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1636"
></A
>and try to match &quot;<CODE
CLASS="literal"
>spp:</CODE
>&quot; with
<CODE
CLASS="literal"
>/.+:/</CODE
>.  However, since the <CODE
CLASS="literal"
>+</CODE
>
quantifier is greedy, this pattern will match everything up to and
including &quot;<CODE
CLASS="literal"
>/home/spp:</CODE
>&quot;. Sometimes you can avoid
this by using a negated character class, that is, by saying <CODE
CLASS="literal"
>/[^:]+:/</CODE
>, which says
to match one or more non-colon characters (as many as possible), up to
the first colon.  It's that little caret in there that negates the sense
of the character class.[<A
CLASS="footnote"
HREF="#AUTOID-1644"
>27</A
>]
The other point to be careful about is that regular expressions will try
to match as <EM
CLASS="emphasis"
>early</EM
> as possible.  This even takes precedence over being
greedy.  Since scanning happens left-to-right, this means that the
pattern will match as far left as possible, even if there is some other
place where it could match longer.  (Regular expressions are greedy, but
they aren't into delayed gratification.)  For example, suppose you're
using the substitution command (<CODE
CLASS="literal"
>s///</CODE
>) on the default variable space
(variable <B
CLASS="emphasis.bold"
>$_</B
>, that is), and you want to remove a string of x's from
the middle of the string.  If you say:</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-1644"
>[27]</A
> Sorry, we didn't pick that notation, so don't blame us.  That's just how
regular expressions are customarily written in UNIX culture.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
><PRE
CLASS="programlisting"
>$_ = &quot;fred xxxxxxx barney&quot;;
s/x*//;</PRE
></P
><P
CLASS="para"
>it will have absolutely no effect.  This is because the <CODE
CLASS="literal"
>x*</CODE
> (meaning zero or
more &quot;<CODE
CLASS="literal"
>x</CODE
>&quot; characters) will be able to match the &quot;nothing&quot; at the beginning of the
string, since the null string happens to be zero characters wide and there's
a null string just sitting there plain as day before the &quot;<CODE
CLASS="literal"
>f</CODE
>&quot; of &quot;<CODE
CLASS="literal"
>fred</CODE
>&quot;.[<A
CLASS="footnote"
HREF="#AUTOID-1656"
>28</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-1656"
>[28]</A
> Even the authors get caught by this from time to time.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>There's one other thing you need to know.  By default quantifiers apply
to a single preceding character, so <CODE
CLASS="literal"
>/bam{2}/</CODE
> will match &quot;<CODE
CLASS="literal"
>bamm</CODE
>&quot; but not
&quot;<CODE
CLASS="literal"
>bambam</CODE
>&quot;.  To apply a quantifier to more than one character, use parentheses.
So to match &quot;<CODE
CLASS="literal"
>bambam</CODE
>&quot;, use the pattern <CODE
CLASS="literal"
>/(bam){2}/</CODE
>.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-1-SECT-7.2"
>1.7.2 Minimal Matching</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1667"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1669"
></A
>If you were using an ancient version of Perl and you didn't want greedy
matching, you had to use a negated character class.  (And really,
you were still getting greedy matching of a constrained variety.)</P
><P
CLASS="para"
>In modern versions of Perl, you can force nongreedy, minimal
matching by use of a question mark after any quantifier.  Our same
username match would now be <CODE
CLASS="literal"
>/.*?:/</CODE
>.  That <CODE
CLASS="literal"
>.*?</CODE
> will now try to
match as few characters as possible, rather than as many as possible,
so it stops at the first colon rather than the last.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-1-SECT-7.3"
>1.7.3 Nailing Things Down</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1678"
></A
>Whenever you try to match a pattern, it's going to try to match in every
location till it finds a match.  An <EM
CLASS="emphasis"
>anchor</EM
> allows you to restrict
where the pattern can match.  Essentially, an anchor is something that
matches a &quot;nothing&quot;, but a special kind of nothing that depends on its
surroundings.  You could also call it a rule, or a constraint, or an
assertion.  Whatever you care to call it, it tries to match something of
zero width, and either succeeds or fails.  (If it fails, it merely means
that the pattern can't match that particular way.  The pattern will go
on trying to match some other way, if there are any other ways to try.)</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1682"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1684"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1686"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1689"
></A
>The special character string <CODE
CLASS="literal"
>\b</CODE
> matches at a word boundary, which is
defined as the &quot;nothing&quot; between a word character (<CODE
CLASS="literal"
>\w</CODE
>) and a non-word
character (<CODE
CLASS="literal"
>\W</CODE
>), in either order.  (The characters that don't exist off the
beginning and end of your string are considered to be non-word characters.)
For example,</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>/\bFred\b/</PRE
></P
><P
CLASS="para"
>would match both &quot;<CODE
CLASS="literal"
>The Great Fred</CODE
>&quot; and
&quot;<CODE
CLASS="literal"
>Fred the Great</CODE
>&quot;, but would not match
&quot;<CODE
CLASS="literal"
>Frederick the Great</CODE
>&quot; because the &quot;<CODE
CLASS="literal"
>de</CODE
>&quot; in &quot;<CODE
CLASS="literal"
>Frederick</CODE
>&quot; does not contain a
word boundary.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1704"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1707"
></A
>In a similar vein, there are also anchors for the beginning of the
string and the end of the string.  If it is the first character of a
pattern, the caret (<CODE
CLASS="literal"
>^</CODE
>) matches the &quot;nothing&quot; at the beginning of the
string.  Therefore, the pattern <CODE
CLASS="literal"
>/^Fred/</CODE
> would match &quot;Frederick the
Great&quot; and not &quot;The Great Fred&quot;, whereas <CODE
CLASS="literal"
>/Fred^/</CODE
> wouldn't match
either.  (In fact, it doesn't even make much sense.)  The dollar sign
(<CODE
CLASS="literal"
>$</CODE
>) works like the caret, except that it matches the &quot;nothing&quot; at the
end of the string instead of the beginning.[<A
CLASS="footnote"
HREF="#AUTOID-1714"
>29</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-1714"
>[29]</A
> This is a bit oversimplified, since we're assuming here that your string
contains only one line.  <CODE
CLASS="literal"
>^</CODE
> and <CODE
CLASS="literal"
>$</CODE
> are actually anchors for the
beginnings and endings of lines rather than strings.  We'll try to
straighten this all out in <A
CLASS="xref"
HREF="ch02_01.htm"
TITLE="The Gory Details"
>Chapter 2</A
> (to the extent that it can
be straightened out).</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>So now you can probably figure out that when we said:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>next LINE if $line =~ /^#/;</PRE
></P
><P
CLASS="para"
>we meant &quot;Go to the next iteration of <CODE
CLASS="literal"
>LINE</CODE
> loop if this line happens to
begin with a <CODE
CLASS="literal"
>#</CODE
> character.&quot;</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-1-SECT-7.4"
>1.7.4 Backreferences</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-1728"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1730"
></A
><A
CLASS="indexterm"
NAME="AUTOID-1733"
></A
>We mentioned earlier that you can use parentheses to group things
for quantifiers, but you can also use parentheses to remember bits and
pieces of what you matched.  A pair of parentheses around a part of a
regular expression causes whatever was matched by that part to be
remembered for later use.  It doesn't change what the part matches, so
<CODE
CLASS="literal"
>/\d+/</CODE
> and <CODE
CLASS="literal"
>/(\d+)/</CODE
> will still match as many digits as possible, but
in the latter case they will be remembered in a special variable to be
backreferenced later.</P
><P
CLASS="para"
>How you refer back to the remembered part of the string depends on where
you want to do it from.  Within the same regular expression, you
use a backslash followed by an integer.  The integer corresponding to a
given pair of parentheses is determined by counting left parentheses
from the beginning of the pattern, starting with one.  So for example, to
match something similar to an HTML tag (like &quot;<CODE
CLASS="literal"
>&lt;B&gt;Bold&lt;/B&gt;</CODE
>&quot;, you might
use <CODE
CLASS="literal"
>/&lt;(.*?)&gt;.*?&lt;\/\1&gt;/</CODE
>.  This forces the two parts of the
pattern to match the exact same string, such as the &quot;<CODE
CLASS="literal"
>B</CODE
>&quot; above.</P
><P
CLASS="para"
>Outside the regular expression itself, such as in the replacement
part of a substitution, the special variable is used as if it were a
normal scalar variable named by the integer.  So, if you wanted to swap
the first two words of a string, for example, you could use:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>s/(\S+)\s+(\S+)/$2 $1/</PRE
></P
><P
CLASS="para"
>The right side of the substitution is really just a funny kind of
double-quoted string, which is why you can interpolate variables there,
including backreference variables.  This is a powerful concept:
interpolation (under controlled circumstances) is one of the reasons
Perl is a good text-processing language.  The other reason is the pattern
matching, of course.  Regular expressions are good for picking things apart,
and interpolation is good for putting things back together again.  Perhaps
there's hope for Humpty Dumpty after all.<A
CLASS="indexterm"
NAME="AUTOID-1746"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch01_06.htm"
TITLE="1.6 Control Structures"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.6 Control Structures"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch01_08.htm"
TITLE="1.8 List Processing"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.8 List Processing"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.6 Control Structures</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.8 List Processing</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
