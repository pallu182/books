<HTML
><HEAD
>
<TITLE>[Chapter 2] 2.8 Formats</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:45:50Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch02_01.htm"
TITLE="2. The Gory Details"><LINK
REL="prev"
HREF="ch02_07.htm"
TITLE="2.7 Subroutines"><LINK
REL="next"
HREF="ch02_09.htm"
TITLE="2.9 Special Variables"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch02_07.htm"
TITLE="2.7 Subroutines"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.7 Subroutines"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch02_01.htm"
TITLE="2. The Gory Details"
>Chapter 2<BR>The Gory Details</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch02_09.htm"
TITLE="2.9 Special Variables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.9 Special Variables"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="PERL2-CH-2-SECT-8"
>2.8 Formats</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH02.FORMAT"
></A
>Perl has a mechanism to help you generate simple, formatted reports
and charts.  It can keep track of things like how many lines on a
page, what page you're on, when to print page headers, and so on.
Keywords are borrowed from FORTRAN: <A
CLASS="xref"
HREF="ch03_041.htm"
TITLE="format"
><B
CLASS="xref.cmd"
>format</B
></A
> to declare and <A
CLASS="xref"
HREF="ch03_193.htm"
TITLE="write"
><B
CLASS="xref.cmd"
>write</B
></A
> to execute; see the relevant entries in <A
CLASS="xref"
HREF="ch03_01.htm"
TITLE="Functions"
>Chapter 3</A
>.  Fortunately, the layout is much more legible,
more like the <CODE
CLASS="literal"
>PRINT USING</CODE
> statement of BASIC.
Think of it as a poor man's <EM
CLASS="emphasis"
>nroff</EM
>(1).  (If you
know <EM
CLASS="emphasis"
>nroff</EM
>, that may not sound like a
recommendation.)</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7198"
></A
>Formats, like packages and subroutines, are declared rather than
executed, so they may occur at any point in your program.  (Usually
it's best to keep them all together.) They have their own namespace
apart from all the other types in Perl.  This means that if you have a
function named &quot;<CODE
CLASS="literal"
>Foo</CODE
>&quot;, it is not the same thing as a format named
&quot;<CODE
CLASS="literal"
>Foo</CODE
>&quot;.  However, the default name for the format associated with a
given filehandle is the same as the name of the filehandle.  Thus, the
default format for <CODE
CLASS="literal"
>STDOUT</CODE
> is named
&quot;<CODE
CLASS="literal"
>STDOUT</CODE
>&quot;, and the default format for filehandle
<CODE
CLASS="literal"
>TEMP</CODE
> is named &quot;<CODE
CLASS="literal"
>TEMP</CODE
>&quot;.  They just
look the same.  They really aren't.</P
><P
CLASS="para"
>Output record formats are declared as follows:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>format <CODE
CLASS="replaceable"
><I
>NAME</I
></CODE
> =
<CODE
CLASS="replaceable"
><I
>FORMLIST</I
></CODE
>
.</PRE
></P
><P
CLASS="para"
>If <CODE
CLASS="replaceable"
><I
>NAME</I
></CODE
> is omitted, format <CODE
CLASS="literal"
>STDOUT</CODE
> is defined.
<CODE
CLASS="replaceable"
><I
>FORMLIST</I
></CODE
> consists of a
sequence of lines, each of which may be of one of three types:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>A comment, indicated by putting a <CODE
CLASS="literal"
>#</CODE
> in the first column.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>A &quot;picture&quot; line giving the format for one output line.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>An argument line supplying values to plug into the previous picture line.</P
></LI
></UL
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7225"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7227"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7229"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7232"
></A
>Picture lines are printed exactly as they look, except for certain fields
that substitute values into the line.[<A
CLASS="footnote"
HREF="#AUTOID-7235"
>48</A
>]
Each substitution field in a picture line starts
with either <CODE
CLASS="literal"
>@</CODE
> (at) or <CODE
CLASS="literal"
>^</CODE
> (caret).  These lines do not undergo any kind
of variable interpolation.  The <CODE
CLASS="literal"
>@</CODE
> field (not to be confused with the array
marker <CODE
CLASS="literal"
>@</CODE
>) is the normal kind of field; the other kind,
the ^ field, is used to do rudimentary multiline text-block filling.  The length of the field
is indicated by padding out the field with multiple <CODE
CLASS="literal"
>&lt;</CODE
>, <CODE
CLASS="literal"
>&gt;</CODE
>, or <CODE
CLASS="literal"
>|</CODE
>
characters to specify, respectively, left justification, right
justification, or centering.  If the variable would exceed the width
specified, it is truncated.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-7235"
>[48]</A
> Even those fields maintain the
integrity of the columns you put them in, however.  There is nothing
in a picture line that can cause fields to grow or shrink or shift back
and forth.  The columns you see are sacred in a WYSIWYG sense.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7245"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7248"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7251"
></A
>As an alternate form of right justification, you may also use <CODE
CLASS="literal"
>#</CODE
> characters
(after an initial <CODE
CLASS="literal"
>@</CODE
> or <CODE
CLASS="literal"
>^</CODE
>, and
with an optional &quot;.&quot;) to specify a numeric field.  This way
you can line up the decimal points.  If any value supplied for these
fields contains a newline, only the text up to the newline is printed.
Finally, the special field <CODE
CLASS="literal"
>@*</CODE
> can be used for printing multi-line,
non-truncated values; it should generally appear on a picture line by itself.</P
><P
CLASS="para"
>The values are specified on the following line in the same order as
the picture fields.  The expressions providing the values should be
separated by commas.  The expressions are all evaluated in a list context
before the line is processed, so a single list expression could produce
multiple list elements.  The expressions may be spread out to more than
one line if enclosed in braces.  If so, the opening brace must be the first
token on the first line.</P
><P
CLASS="para"
>Picture fields that begin with <CODE
CLASS="literal"
>^</CODE
> rather than
<CODE
CLASS="literal"
>@</CODE
> are treated specially.  With a <CODE
CLASS="literal"
>#</CODE
> field, the field
is blanked out if the value is undefined.  For other field types, the
caret enables a kind of fill mode.  Instead of an arbitrary
expression, the value supplied must be a scalar variable name that
contains a text string.  Perl puts as much text as it can into the
field, and then chops off the front of the string so that the next
time the variable is referenced, more of the text can be printed.
(Yes, this means that the variable itself is altered during execution
of the <A
CLASS="xref"
HREF="ch03_193.htm"
TITLE="write"
><B
CLASS="xref.cmd"
>write</B
></A
> call, and is not
preserved. Use a scratch variable if you want to preserve the original value.)  Normally you would use a sequence of fields in a vertical
stack to print out a block of text.  You might wish to end the final
field with the text &quot;<CODE
CLASS="literal"
>...</CODE
>&quot;, which will appear in the output if the text
was too long to appear in its entirety.  You can change which
characters are legal to &quot;break&quot; on (or after) by changing the variable <B
CLASS="emphasis.bold"
>$:</B
> (that's
<CODE
CLASS="literal"
>$FORMAT_LINE_BREAK_CHARACTERS</CODE
> if you're using the
English module) to a list of the desired characters.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7267"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7269"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7272"
></A
>Using ^ fields can produce variable-length records.  If the text to
be formatted is short, just repeat the format line with the ^ field
in it a few times.  If you just do this for short data you'd end
up getting a few blank lines.  To suppress lines that would end up blank,
put a <CODE
CLASS="literal"
>~</CODE
> (tilde) character anywhere in the line.  (The tilde itself will be
translated to a space upon output.)  If you put a second tilde contiguous
to the first, the line will be repeated until all the text in the fields
on that line have been printed.  (This works because the ^ fields chew
up the strings they print.  But if you use a field of the <CODE
CLASS="literal"
>@</CODE
> variety
in conjunction with two tildes, the expression you supply had better
not give the same value every time forever!  Use a <A
CLASS="xref"
HREF="ch03_143.htm"
TITLE="shift"
><B
CLASS="xref.cmd"
>shift</B
></A
>, or some
other operator with a side effect that exhausts the set of values.)</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7279"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7281"
></A
>Top-of-form processing is by default handled by a format with the same
name as the current filehandle with &quot;<CODE
CLASS="literal"
>_TOP</CODE
>&quot;
concatenated to it.  It's triggered at the top of each page.  See
<A
CLASS="xref"
HREF="ch03_193.htm"
TITLE="write"
><B
CLASS="xref.cmd"
>write</B
></A
> in <A
CLASS="xref"
HREF="ch03_01.htm"
TITLE="Functions"
>Chapter 3</A
>.</P
><P
CLASS="para"
>Examples:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
># a report on the /etc/passwd file
format STDOUT_TOP =
                    Passwd File
Name                Login    Office   Uid   Gid Home
------------------------------------------------------------------
.
format STDOUT =
@&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; @||||||| @&lt;&lt;&lt;&lt;&lt;&lt;@&gt;&gt;&gt;&gt; @&gt;&gt;&gt;&gt; @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
$name,              $login,  $office,$uid,$gid, $home
.

# a report from a bug report form
format STDOUT_TOP =
                         Bug Reports
@&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;     @|||         @&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
$system,                      $%,         $date
------------------------------------------------------------------
.
format STDOUT =
Subject: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
         $subject
Index: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
       $index,                       $description
Priority: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Date: @&lt;&lt;&lt;&lt;&lt;&lt;&lt; ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
          $priority,        $date,   $description
From: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
      $from,                         $description
Assigned to: @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
             $programmer,            $description
~                                    ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                                     $description
~                                    ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                                     $description
~                                    ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                                     $description
~                                    ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
                                     $description
~                                    ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;...
                                     $description
.</PRE
></P
><P
CLASS="para"
>It is possible to intermix <A
CLASS="xref"
HREF="ch03_110.htm"
TITLE="print"
><B
CLASS="xref.cmd"
>print</B
></A
>s with
<A
CLASS="xref"
HREF="ch03_193.htm"
TITLE="write"
><B
CLASS="xref.cmd"
>write</B
></A
>s on the same output channel, but
you'll have to handle the <B
CLASS="emphasis.bold"
>$-</B
> special
variable (<CODE
CLASS="literal"
>$FORMAT_LINES_LEFT</CODE
> if you're using the
English module) yourself.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-2-SECT-8.1"
>2.8.1 Format Variables</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH02.VARI"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7301"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7304"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7307"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7310"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7313"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7316"
></A
>The current format name is stored in the variable <B
CLASS="emphasis.bold"
>$~</B
> (<CODE
CLASS="literal"
>$FORMAT_NAME</CODE
>), and the
current top-of-form format name is in <B
CLASS="emphasis.bold"
>$^</B
> (<CODE
CLASS="literal"
>$FORMAT_TOP_NAME</CODE
>).  The
current output page number is stored in <B
CLASS="emphasis.bold"
>$%</B
> (<CODE
CLASS="literal"
>$FORMAT_PAGE_NUMBER</CODE
>), and
the number of lines on the page is in <B
CLASS="emphasis.bold"
>$=</B
> (<CODE
CLASS="literal"
>$FORMAT_LINES_PER_PAGE</CODE
>).
Whether to autoflush output on this handle is stored in <B
CLASS="emphasis.bold"
>$|</B
> (<CODE
CLASS="literal"
>$OUTPUT_AUTOFLUSH</CODE
>).  The
string to be output before each top of page (except the first) is
stored in <B
CLASS="emphasis.bold"
>$^L</B
>
(<CODE
CLASS="literal"
>$FORMAT_FORMFEED</CODE
>).  These variables are set on a
per-filehandle basis, so you'll need to <B
CLASS="emphasis.bold"
>select</B
> the filehandle associated with a format in
order to affect its format variables.<A
CLASS="indexterm"
NAME="AUTOID-7332"
></A
></P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>select((select(OUTF), 
        $~ = &quot;My_Other_Format&quot;,
        $^ = &quot;My_Top_Format&quot;
       )[0]);</PRE
></P
><P
CLASS="para"
>Pretty ugly, eh?  It's a common idiom though, so don't be too surprised
when you see it.  You can at least use a temporary variable to hold
the previous filehandle (this is a much better approach in general,
because not only does legibility improve, but you now have an intermediary
statement in the code to stop on when you're single-stepping the debugger):</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>$ofh = select(OUTF);
$~ = &quot;My_Other_Format&quot;;
$^ = &quot;My_Top_Format&quot;;
select($ofh);</PRE
></P
><P
CLASS="para"
>If you use the English module, you can even read the variable names:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>use English;
$ofh = select(OUTF);
$FORMAT_NAME     = &quot;My_Other_Format&quot;;
$FORMAT_TOP_NAME = &quot;My_Top_Format&quot;;
select($ofh);</PRE
></P
><P
CLASS="para"
>But you still have those funny calls to <B
CLASS="emphasis.bold"
>select</B
>.  So just use the
FileHandle module.  Now you can access these special variables using
lowercase method names instead:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>use FileHandle;
OUTF-&gt;format_name(&quot;My_Other_Format&quot;);
OUTF-&gt;format_top_name(&quot;My_Top_Format&quot;);</PRE
></P
><P
CLASS="para"
>Much better!</P
><P
CLASS="para"
>Since the values line following your picture line may contain arbitrary
expressions (for <CODE
CLASS="literal"
>@</CODE
> fields, not <CODE
CLASS="literal"
>^</CODE
> fields), you can farm out more
sophisticated processing to other functions, like <A
CLASS="xref"
HREF="ch03_156.htm"
TITLE="sprintf"
><B
CLASS="xref.cmd"
>sprintf</B
></A
> or one of
your own.  For example, to insert commas into a number:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>format Ident = 
    @&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
    commify($n)
.</PRE
></P
><P
CLASS="para"
>To get a real <CODE
CLASS="literal"
>@</CODE
>, <CODE
CLASS="literal"
>~</CODE
>, or <CODE
CLASS="literal"
>^</CODE
> into the field, do this:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>format Ident = 
I have an @ here.
         &quot;@&quot;
.</PRE
></P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7361"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7364"
></A
>To center a whole line of text, do something like this:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>format Ident = 
@||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
                          &quot;Some text line&quot;
.</PRE
></P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7369"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7372"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7375"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7377"
></A
><A
CLASS="indexterm"
NAME="AUTOID-7379"
></A
>The <CODE
CLASS="literal"
>&gt;</CODE
> field-length indicator ensures that the text will be
right-justified within the field, but the field as a whole occurs
exactly where you show it occurring.
There is no built-in way to say &quot;float this field to the right-hand side
of the page, however wide it is.&quot;  You have to specify where it goes
relative to the left margin.
The truly desperate can generate their own format on the fly, based
on the current number of columns, and then <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
> it:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>$format  = &quot;format STDOUT = \n&quot;
         . '^' . '&lt;' x $cols . &quot;\n&quot;
         . '$entry' . &quot;\n&quot;
         . &quot;\t^&quot; . &quot;&lt;&quot; x ($cols-8) . &quot;~~\n&quot;
         . '$entry' . &quot;\n&quot;
         . &quot;.\n&quot;;
print $format if $Debugging;
eval $format; 
die $@ if $@;</PRE
></P
><P
CLASS="para"
>The most important line there is probably the <A
CLASS="xref"
HREF="ch03_110.htm"
TITLE="print"
><B
CLASS="xref.cmd"
>print</B
></A
>.
What the <A
CLASS="xref"
HREF="ch03_110.htm"
TITLE="print"
><B
CLASS="xref.cmd"
>print</B
></A
> would print out looks something like this:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>format STDOUT = 
^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
$entry
    ^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;~~
$entry
.</PRE
></P
><P
CLASS="para"
>Here's a little program that's somewhat like <EM
CLASS="emphasis"
>fmt</EM
>(1):</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>format = 
^&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; ~~
$_

.

$/ = &quot;&quot;;
while (&lt;&gt;) {
    s/\s*\n\s*/ /g;
    write;
}</PRE
><A
CLASS="indexterm"
NAME="AUTOID-7395"
></A
></P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-2-SECT-8.2"
>2.8.2 Footers</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7399"
></A
>While <CODE
CLASS="literal"
>$FORMAT_TOP_NAME</CODE
> contains the name of the current header format,
there is no corresponding mechanism to automatically do the same thing
for a footer.  Not knowing how big a format is going to be until you
evaluate it is one of the major problems.  It's on the TODO list.</P
><P
CLASS="para"
>Here's one strategy:  If you have a fixed-size footer, you can get footers
by checking <CODE
CLASS="literal"
>$FORMAT_LINES_LEFT</CODE
> before each <A
CLASS="xref"
HREF="ch03_193.htm"
TITLE="write"
><B
CLASS="xref.cmd"
>write</B
></A
> and then <B
CLASS="emphasis.bold"
>print</B
>
the footer yourself if necessary.</P
><P
CLASS="para"
>Here's another strategy; open a pipe to yourself, using <CODE
CLASS="literal"
>open(MESELF,
&quot;|-&quot;)</CODE
>  (see the <A
CLASS="xref"
HREF="ch03_102.htm"
TITLE="open"
><B
CLASS="xref.cmd"
>open</B
></A
> entry in <A
CLASS="xref"
HREF="ch03_01.htm"
TITLE="Functions"
>Chapter 3</A
>) and
always <A
CLASS="xref"
HREF="ch03_193.htm"
TITLE="write"
><B
CLASS="xref.cmd"
>write</B
></A
> to <CODE
CLASS="literal"
>MESELF</CODE
> instead of <CODE
CLASS="literal"
>STDOUT.</CODE
>  Have your
child process postprocess its <CODE
CLASS="literal"
>STDIN</CODE
> to rearrange headers and
footers however you like.  Not very convenient, but doable.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-2-SECT-8.3"
>2.8.3 Accessing Formatting Internals</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-7417"
></A
>For low-level access to the formatting mechanism, you may use
<A
CLASS="xref"
HREF="ch03_042.htm"
TITLE="formline"
><B
CLASS="xref.cmd"
>formline</B
></A
> and access <B
CLASS="emphasis.bold"
>$^A</B
> (the <CODE
CLASS="literal"
>$ACCUMULATOR</CODE
> variable)
directly.  (Formats essentially compile into a sequence of calls to
<A
CLASS="xref"
HREF="ch03_042.htm"
TITLE="formline"
><B
CLASS="xref.cmd"
>formline</B
></A
>.) For example:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>$str = formline &lt;&lt;'END', 1,2,3;
@&lt;&lt;&lt;  @|||  @&gt;&gt;&gt;
END

print &quot;Wow, I just stored `$^A' in the accumulator!\n&quot;;</PRE
></P
><P
CLASS="para"
>Or to make an <CODE
CLASS="literal"
>swrite()</CODE
> subroutine which is to <A
CLASS="xref"
HREF="ch03_193.htm"
TITLE="write"
><B
CLASS="xref.cmd"
>write</B
></A
> as
<A
CLASS="xref"
HREF="ch03_156.htm"
TITLE="sprintf"
><B
CLASS="xref.cmd"
>sprintf</B
></A
> is to <A
CLASS="xref"
HREF="ch03_111.htm"
TITLE="printf"
><B
CLASS="xref.cmd"
>printf</B
></A
>, do this:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>use Carp;
sub swrite {
    croak &quot;usage: swrite PICTURE ARGS&quot; unless @_;
    my $format = shift;
    $^A = &quot;&quot;;
    formline($format,@_);
    return $^A;
} 

$string = swrite(&lt;&lt;'END', 1, 2, 3);
Check me out
@&lt;&lt;&lt;  @|||  @&gt;&gt;&gt;
END
print $string;</PRE
></P
><P
CLASS="para"
>Lexical variables (declared with <A
CLASS="xref"
HREF="ch03_097.htm"
TITLE="my"
><B
CLASS="xref.cmd"
>my</B
></A
>) are not visible within a
format unless the format is declared within the scope of the lexical
variable.<A
CLASS="indexterm"
NAME="AUTOID-7435"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch02_07.htm"
TITLE="2.7 Subroutines"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 2.7 Subroutines"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch02_09.htm"
TITLE="2.9 Special Variables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 2.9 Special Variables"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>2.7 Subroutines</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>2.9 Special Variables</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
