<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.2.12 DynaLoader&nbsp;- Automatic Dynamic Loading of Perl Modules</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T02:01:53Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_02.htm"
TITLE="7.2 Library Modules"><LINK
REL="prev"
HREF="ch07_011.htm"
TITLE="7.2.11 DirHandle&nbsp;- Supply Object Methods for Directory Handles"><LINK
REL="next"
HREF="ch07_013.htm"
TITLE="7.2.13 English&nbsp;- Use English or awk Names for Punctuation Variables"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_011.htm"
TITLE="7.2.11 DirHandle&nbsp;- Supply Object Methods for Directory Handles"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.11 DirHandle&nbsp;- Supply Object Methods for Directory Handles"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. The Standard Perl Library"
>Chapter 7<BR>The Standard Perl Library</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_013.htm"
TITLE="7.2.13 English&nbsp;- Use English or awk Names for Punctuation Variables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.13 English&nbsp;- Use English or awk Names for Punctuation Variables"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="AUTOID-19707"
>7.2.12 DynaLoader&nbsp;- Automatic Dynamic Loading of Perl Modules</A
></H3
><PRE
CLASS="programlisting"
>package YourModule;
require DynaLoader;
@ISA = qw(... DynaLoader ...);

bootstrap YourModule;</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH07.DYNA1"
></A
><A
CLASS="indexterm"
NAME="CH07.DYNA2"
></A
><A
CLASS="indexterm"
NAME="CH07.DYNA3"
></A
><A
CLASS="indexterm"
NAME="CH07.DYNA4"
></A
>This module defines the standard Perl interface to the dynamic linking
mechanisms available on many platforms.  A common theme throughout the
module system is that <EM
CLASS="emphasis"
>using</EM
> a module should be easy, even if the
module itself (or the installation of the module) is more complicated as
a result.  This applies particularly to the DynaLoader.  To use it in
your own module, all you need are the incantations listed above in the
synopsis.  This will work whether YourModule is statically or
dynamically linked into Perl.  (This is a <EM
CLASS="emphasis"
>Configure</EM
> option for each
module.) The <CODE
CLASS="literal"
>bootstrap()</CODE
> method will either 
call YourModule's bootstrap routine directly if YourModule is statically 
linked into Perl, or if not, YourModule will inherit the <CODE
CLASS="literal"
>bootstrap()</CODE
> method from DynaLoader, which will do everything necessary to load in your module, and then call YourModule's <CODE
CLASS="literal"
>bootstrap()</CODE
> method for you, as
if it were there all the time and you called it yourself.  Piece of cake,
of the have-it-and-eat-it-too variety.</P
><P
CLASS="para"
>The rest of this description talks about the DynaLoader from the
viewpoint of someone who wants to extend the DynaLoader module to a new
architecture.  The <EM
CLASS="emphasis"
>Configure</EM
> process selects which kind of dynamic
loading to use by choosing to link in one of several C implementations,
which must be linked into <EM
CLASS="emphasis"
>perl</EM
> statically.  (This is unlike other
C extensions, which provide a single implementation, which may be linked
in either statically or dynamically.)</P
><P
CLASS="para"
>The DynaLoader is designed to be a very simple, high-level interface that
is sufficiently general to cover the requirements of SunOS, HP-UX,
NeXT, Linux, VMS, Win-32, and other platforms.  By itself, though,
DynaLoader is practically useless for accessing non-Perl libraries
because it provides almost no Perl-to-C &quot;glue&quot;.  There is, for example,
no mechanism for calling a C library function or supplying its arguments
in any sort of portable form.  This job is delegated to the other
extension modules that you may load in by using DynaLoader.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="AUTOID-19730"
>7.2.12.1 Internal interface summary</A
></H4
><PRE
CLASS="programlisting"
><EM
CLASS="emphasis"
>Variables:</EM
>
    @dl_library_path
    @dl_resolve_using
    @dl_require_symbols
    $dl_debug

<EM
CLASS="emphasis"
>Subroutines:</EM
>
    bootstrap($modulename);
    @filepaths = dl_findfile(@names);
    $filepath = dl_expandspec($spec);
    $libref  = dl_load_file($filename);
    $symref  = dl_find_symbol($libref, $symbol);
    @symbols = dl_undef_symbols();
    dl_install_xsub($name, $symref [, $filename]);
    $message = dl_error;</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-19736"
></A
>The <CODE
CLASS="literal"
>bootstrap()</CODE
> and <CODE
CLASS="literal"
>dl_findfile()</CODE
> routines
are standard across all platforms, and so are defined in
<EM
CLASS="emphasis"
>DynaLoader.pm</EM
>.  The rest of the functions are supplied by
the particular <EM
CLASS="emphasis"
>.xs</EM
> file that supplies the implementation
for the platform.  (You can examine the existing implementations in the
<EM
CLASS="emphasis"
>ext/DynaLoader/</EM
>*<EM
CLASS="emphasis"
>.xs</EM
> files in the Perl
source directory.  You should also read <EM
CLASS="emphasis"
>DynaLoader.pm</EM
>, of
course.)  These implementations may also tweak the default values of the
variables listed below.</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>@dl_library_path</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH07.DYNA6"
></A
>The default list of directories in which <CODE
CLASS="literal"
>dl_findfile()</CODE
> will
search for libraries.  Directories are searched in the order they are
given in this array variable, beginning with subscript 0.

<CODE
CLASS="literal"
>@dl_library_path</CODE
> is initialized to hold the list of &quot;normal&quot;
directories (<EM
CLASS="emphasis"
>/usr/lib</EM
> and so on) determined by the Perl installation
script, <EM
CLASS="emphasis"
>Configure</EM
>, and given by 
<CODE
CLASS="literal"
>$Config{'libpth'}</CODE
>.  This
is to ensure portability across a wide range of platforms.

<CODE
CLASS="literal"
>@dl_library_path</CODE
> should also be initialized with any other directories
that can be determined from the environment at run-time (such as
<CODE
CLASS="literal"
>LD_LIBRARY_PATH</CODE
> for SunOS).

After initialization, <CODE
CLASS="literal"
>@dl_library_path</CODE
> can be manipulated by an
application using <A
CLASS="xref"
HREF="ch03_112.htm"
TITLE="push"
><B
CLASS="xref.cmd"
>push</B
></A
> and <A
CLASS="xref"
HREF="ch03_183.htm"
TITLE="unshift"
><B
CLASS="xref.cmd"
>unshift</B
></A
> before calling
<CODE
CLASS="literal"
>dl_findfile()</CODE
>.
<A
CLASS="xref"
HREF="ch03_183.htm"
TITLE="unshift"
><B
CLASS="xref.cmd"
>unshift</B
></A
> can be used to add directories to the front of the search order
either to save search time or to override standard libraries with the same
name.

The load function that <CODE
CLASS="literal"
>dl_load_file()</CODE
> calls might require an absolute
pathname.  The <CODE
CLASS="literal"
>dl_findfile()</CODE
> function and <CODE
CLASS="literal"
>@dl_library_path</CODE
>
can be used to search for and return the absolute pathname for the
library/object that you wish to load.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>@dl_resolve_using</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A list of additional libraries or other shared objects that can be
used to resolve any undefined symbols that might be generated by a
later call to <CODE
CLASS="literal"
>dl_load_file()</CODE
>.
This is only required on some platforms that do not handle dependent
libraries automatically.  For example, the Socket extension shared library
(<EM
CLASS="emphasis"
>auto/Socket/Socket.so</EM
>) contains references to many socket functions
that need to be resolved when it's loaded.  Most platforms will
automatically know where to find the &quot;dependent&quot; library (for example,
<EM
CLASS="emphasis"
>/usr/lib/libsocket.so</EM
>). A few platforms 
need to be told the location
of the dependent library explicitly.  Use <CODE
CLASS="literal"
>@dl_resolve_using</CODE
> for this.

Example:</P
><PRE
CLASS="programlisting"
>@dl_resolve_using = dl_findfile('-lsocket');</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>@dl_require_symbols</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A list of one or more symbol names that are in the library/object file
to be dynamically loaded.  This is only required on some platforms.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>dl_error</CODE
></DT
><DD
CLASS="listitem"
><PRE
CLASS="programlisting"
>$message = dl_error();</PRE
><P
CLASS="para"
>Error message text from the last failed DynaLoader function.  Note that, similar
to <CODE
CLASS="literal"
>errno</CODE
> in UNIX, a successful function call does not reset
this message.  Implementations should detect the error as soon as it occurs in
any of the other functions and save the corresponding message for later
retrieval.  This will avoid problems on some platforms (such as SunOS) where the
error message is very temporary (see, for example, <EM
CLASS="emphasis"
>dlerror</EM
>(3)).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>$dl_debug</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Internal debugging messages are enabled when <CODE
CLASS="literal"
>$dl_debug</CODE
> is set
true.  Currently, setting <CODE
CLASS="literal"
>$dl_debug</CODE
> only affects the Perl side
of the DynaLoader.  These messages should help an application
developer to resolve any DynaLoader usage problems.

<CODE
CLASS="literal"
>$dl_debug</CODE
> is set to <CODE
CLASS="literal"
>$ENV{'PERL_DL_DEBUG'}</CODE
> if defined.

For the DynaLoader developer and porter there is a similar debugging
variable added to the C code (see <EM
CLASS="emphasis"
>dlutils.c</EM
>) and enabled if Perl was
built with the <CODE
CLASS="literal"
>-DDEBUGGING</CODE
> flag.  This can also be set via the
<CODE
CLASS="literal"
>PERL_DL_DEBUG</CODE
> environment variable.  Set to 1 for minimal information or
higher for more.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>dl_findfile</CODE
></DT
><DD
CLASS="listitem"
><PRE
CLASS="programlisting"
>@filepaths = dl_findfile(@names)</PRE
><P
CLASS="para"
>Determines the full paths (including file suffix) of one or more loadable files,
given their generic names and optionally one or more directories.  Searches
directories in <CODE
CLASS="literal"
>@dl_library_path</CODE
> by default and returns an
empty list if no files were found.  Names can be specified in a variety of
platform-independent forms.  Any names in the form <CODE
CLASS="literal"
>-lname</CODE
> are
converted into <EM
CLASS="emphasis"
>libname.</EM
>*, where .* is an appropriate suffix
for the platform.  If a name does not already have a suitable prefix or suffix,
then the corresponding file will be sought by trying prefix and suffix
combinations appropriate to the platform: <EM
CLASS="emphasis"
>$name.o</EM
>,
<EM
CLASS="emphasis"
>lib$name.</EM
>* and <EM
CLASS="emphasis"
>$name</EM
>.  If any
directories are included in <CODE
CLASS="literal"
>@names</CODE
>, they are searched before
<CODE
CLASS="literal"
>@dl_library_path</CODE
>.  Directories may be specified as
<CODE
CLASS="literal"
>-Ldir</CODE
>.  Any other names are treated as filenames to be
searched for.  
Using arguments of the form <CODE
CLASS="literal"
>-Ldir</CODE
> and
<CODE
CLASS="literal"
>-lname</CODE
> is recommended.  Example:</P
><PRE
CLASS="programlisting"
>@dl_resolve_using = dl_findfile(qw(-L/usr/5lib -lposix));</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>dl_expandspec</CODE
></DT
><DD
CLASS="listitem"
><PRE
CLASS="programlisting"
>$filepath = dl_expandspec($spec)</PRE
><P
CLASS="para"
>Some unusual systems such as VMS require special filename handling in order to
deal with symbolic names for files (that is, VMS's Logical Names).  To support
these systems a <CODE
CLASS="literal"
>dl_expandspec()</CODE
> function can be implemented
either in the <EM
CLASS="emphasis"
>dl_</EM
>*<EM
CLASS="emphasis"
>.xs</EM
> file or code can
be added to the autoloadable <CODE
CLASS="literal"
>dl_expandspec()</CODE
> function in
<EM
CLASS="emphasis"
>DynaLoader.pm</EM
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>dl_load_file</CODE
></DT
><DD
CLASS="listitem"
><PRE
CLASS="programlisting"
>$libref = dl_load_file($filename)</PRE
><P
CLASS="para"
>Dynamically load <CODE
CLASS="literal"
>$filename</CODE
>, which must be the path to a shared object
or library.  An opaque &quot;library reference&quot; is returned as a handle for
the loaded object.  <CODE
CLASS="literal"
>dl_load_file()</CODE
> returns the undefined value on error.
(On systems that provide a handle for the loaded object such as SunOS
and HP-UX, the returned handle will be <CODE
CLASS="literal"
>$libref</CODE
>.  On other systems
<CODE
CLASS="literal"
>$libref</CODE
> will typically be <CODE
CLASS="literal"
>$filename</CODE
> or a pointer to a
buffer containing <CODE
CLASS="literal"
>$filename</CODE
>.
The application should not examine or alter <CODE
CLASS="literal"
>$libref</CODE
> in any way.)
Below are some of the functions that do the real work.  Such functions
should use the current values of <CODE
CLASS="literal"
>@dl_require_symbols</CODE
> and
<CODE
CLASS="literal"
>@dl_resolve_using</CODE
> if required.</P
><PRE
CLASS="programlisting"
>SunOS:  dlopen($filename)
HP-UX:  shl_load($filename)
Linux:  dld_create_reference(@dl_require_symbols); dld_link($filename)
NeXT:   rld_load($filename, @dl_resolve_using)
VMS:    lib$find_image_symbol($filename, $dl_require_symbols[0])</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>dl_find_symbol</CODE
></DT
><DD
CLASS="listitem"
><PRE
CLASS="programlisting"
>$symref = dl_find_symbol($libref, $symbol)</PRE
><P
CLASS="para"
>Returns the address of the symbol <CODE
CLASS="literal"
>$symbol</CODE
>, or the undefined value
if not found.  If the
target system has separate functions to search for symbols of different
types, then <CODE
CLASS="literal"
>dl_find_symbol()</CODE
> should search for function symbols first
and then search for other types.

The exact manner in which the address is returned in <CODE
CLASS="literal"
>$symref</CODE
> is not
currently defined.  The only initial requirement is that <CODE
CLASS="literal"
>$symref</CODE
> can
be passed to, and understood by, <CODE
CLASS="literal"
>dl_install_xsub()</CODE
>.  Here are some
current implementations:</P
><PRE
CLASS="programlisting"
>SunOS:  dlsym($libref, $symbol)
HP-UX:  shl_findsym($libref, $symbol)
Linux:  dld_get_func($symbol) and/or dld_get_symbol($symbol)
NeXT:   rld_lookup(&quot;_$symbol&quot;)
VMS:    lib$find_image_symbol($libref, $symbol)</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>dl_undef_symbols</CODE
></DT
><DD
CLASS="listitem"
><PRE
CLASS="programlisting"
>@symbols = dl_undef_symbols()</PRE
><P
CLASS="para"
>Returns a list of symbol names which remain undefined after
<CODE
CLASS="literal"
>dl_load_file()</CODE
>.  It returns <CODE
CLASS="literal"
>()</CODE
> if these
names are not known.  Don't worry if your platform does not provide a mechanism
for this.  Most platforms do not need it and hence do not provide it; they just
return an empty list.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>dl_install_xsub</CODE
></DT
><DD
CLASS="listitem"
><PRE
CLASS="programlisting"
>dl_install_xsub($perl_name, $symref [, $filename])</PRE
><P
CLASS="para"
>Creates a new Perl external subroutine named <CODE
CLASS="literal"
>$perl_name</CODE
> using
<CODE
CLASS="literal"
>$symref</CODE
> as a pointer to the function that implements the routine.
This is simply a direct call to <CODE
CLASS="literal"
>newXSUB()</CODE
>. It returns a reference to
the installed function.

The <CODE
CLASS="literal"
>$filename</CODE
> parameter is used by Perl to identify the source file for
the function if required by <A
CLASS="xref"
HREF="ch03_027.htm"
TITLE="die"
><B
CLASS="xref.cmd"
>die</B
></A
>, <A
CLASS="xref"
HREF="ch03_010.htm"
TITLE="caller"
><B
CLASS="xref.cmd"
>caller</B
></A
>, or the debugger.  If
<CODE
CLASS="literal"
>$filename</CODE
> is not defined, then <EM
CLASS="emphasis"
>DynaLoader</EM
> will be used.<A
CLASS="indexterm"
NAME="AUTOID-19882"
></A
></P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>bootstrap()</CODE
></DT
><DD
CLASS="listitem"
><PRE
CLASS="programlisting"
>bootstrap($module);</PRE
><P
CLASS="para"
>This is the normal entry point for automatic dynamic loading in Perl.<A
CLASS="indexterm"
NAME="AUTOID-19889"
></A
></P
><P
CLASS="para"
>It performs the following actions:</P
><UL
CLASS="itemizedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
>Locates an <EM
CLASS="emphasis"
>auto/$module</EM
> directory by searching <CODE
CLASS="literal"
>@INC</CODE
></P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Uses <CODE
CLASS="literal"
>dl_findfile()</CODE
> to determine the filename to load</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Sets <CODE
CLASS="literal"
>@dl_require_symbols</CODE
> to <CODE
CLASS="literal"
>(&quot;boot_$module&quot;)</CODE
></P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Executes an <EM
CLASS="emphasis"
>auto/$module/$module.bs</EM
> file if it exists
(typically used to add to <CODE
CLASS="literal"
>@dl_resolve_using</CODE
> any files that
are required to load the module on the current platform)</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Calls <CODE
CLASS="literal"
>dl_load_file()</CODE
> to load the file</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Calls <CODE
CLASS="literal"
>dl_undef_symbols()</CODE
> and warns if any symbols are undefined</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Calls <CODE
CLASS="literal"
>dl_find_symbol()</CODE
> for <CODE
CLASS="literal"
>&quot;boot_$module&quot;</CODE
></P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Calls <CODE
CLASS="literal"
>dl_install_xsub()</CODE
> to install it as <CODE
CLASS="literal"
>${module}::bootstrap</CODE
></P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
>Calls <CODE
CLASS="literal"
>&amp;{&quot;${module}::bootstrap&quot;}</CODE
> to bootstrap the module (actually
it uses the function reference returned by <CODE
CLASS="literal"
>dl_install_xsub()</CODE
> for speed)</P
></LI
></UL
></DD
></DL
><A
CLASS="indexterm"
NAME="AUTOID-19926"
></A
><A
CLASS="indexterm"
NAME="AUTOID-19927"
></A
><A
CLASS="indexterm"
NAME="AUTOID-19928"
></A
><A
CLASS="indexterm"
NAME="AUTOID-19929"
></A
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_011.htm"
TITLE="7.2.11 DirHandle&nbsp;- Supply Object Methods for Directory Handles"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.11 DirHandle&nbsp;- Supply Object Methods for Directory Handles"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_013.htm"
TITLE="7.2.13 English&nbsp;- Use English or awk Names for Punctuation Variables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.13 English&nbsp;- Use English or awk Names for Punctuation Variables"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.2.11 DirHandle&nbsp;- Supply Object Methods for Directory Handles</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.2.13 English&nbsp;- Use English or awk Names for Punctuation Variables</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
