<HTML
><HEAD
>
<TITLE>[Appendix D] D.5 Many, Many More Functions</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl on Win32 Systems"><META
NAME="DC.creator"
CONTENT="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:38:23Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-324-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="appd_01.htm"
TITLE="D. Topics We Didn't Mention"><LINK
REL="prev"
HREF="appd_04.htm"
TITLE="D.4 Other Operators"><LINK
REL="next"
HREF="appd_06.htm"
TITLE="D.6 Many, Many Predefined Variables"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl on Win32 Systems"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl on Win32 Systems"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/wsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appd_04.htm"
TITLE="D.4 Other Operators"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: D.4 Other Operators"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="appendix"
REL="up"
HREF="appd_01.htm"
TITLE="D. Topics We Didn't Mention"
>Appendix D<BR>Topics We Didn't Mention</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appd_06.htm"
TITLE="D.6 Many, Many Predefined Variables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: D.6 Many, Many Predefined Variables"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="appd-pgfId-58911"
>D.5 Many, Many More Functions</A
></H2
><P
CLASS="para"
>Yes, Perl has a lot of functions. We're not going to list them here, because the fastest way to find out about them is to read through the function section of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
><A
CLASS="indexterm"
NAME="appd-idx-58855-0"
></A
> or the <EM
CLASS="emphasis"
>perlfunc</EM
> documentation and look at anything you don't recognize that sounds interesting. Here are a few of the more interesting ones.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="appd-pgfId-568"
>D.5.1 grep and map</A
></H3
><P
CLASS="para"
>The <CODE
CLASS="literal"
>grep</CODE
><A
CLASS="indexterm"
NAME="appd-idx-109209-0"
></A
> function selects elements from its argument list, based upon the result of an expression that's repeatedly evaluated for its truth value, with the <CODE
CLASS="literal"
>$_</CODE
> variable successively set to each element in the list. For example:</P
><PRE
CLASS="programlisting"
>@bigpowers = grep $_ &gt; 6, 1, 2, 4, 8, 16; # gets (8, 16)
@b_names = grep /^b/, qw(fred barney betty wilma);
@textfiles = grep -T, &lt;*&gt;;</PRE
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="appd-idx-109210-0"
></A
>map operator is similar, but instead of selecting or rejecting items, it merely collects the results of the expression (evaluated in a list context):</P
><PRE
CLASS="programlisting"
>@more = map $_ + 3, 3, 5, 7; # gets 6, 8, 10
@squares = map $_ * $_, 1..10; # first 10 squares
@that = map &quot;$_\n&quot;, @this; # like &quot;unchop&quot;
@triangle = map 1..$_, 1..5; # 1,1,2,1,2,3,1,2,3,4,1,2,3,4,5
%sizes = map { $_, -s } &lt;*&gt;; # hash of files and sizes</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="appd-40322"
>D.5.2 The eval Operator (and s///e)</A
></H3
><P
CLASS="para"
>Yes, you can construct a piece of code at runtime and then <A
CLASS="indexterm"
NAME="appd-idx-344-0"
></A
><CODE
CLASS="literal"
>eval</CODE
> it. This process forces a dynamic compilation of the code inside the <CODE
CLASS="literal"
>eval</CODE
>. This compilation is actually rather useful, because you can get some compile-time optimizations (like a compiled regular expression) at runtime. You can also use it to trap otherwise fatal errors in a section of code: a fatal error inside the <CODE
CLASS="literal"
>eval</CODE
> merely exits the <CODE
CLASS="literal"
>eval</CODE
> and gives you an error status.</P
><P
CLASS="para"
>For example, here's a program that reads a line of Perl code from the user and then executes it as if it were part of the Perl program:</P
><PRE
CLASS="programlisting"
>print &quot;code line: &quot;;
chop($code = &lt;STDIN&gt;);
eval $code; die &quot;eval: $@&quot; if $@;</PRE
><P
CLASS="para"
>You can put Perl code inside the replacement string of a substitute operator with the <A
CLASS="indexterm"
NAME="appd-idx-351-0"
></A
><CODE
CLASS="literal"
>e</CODE
> flag. This is handy if you want to construct something complicated for the replacement string, such as calling a subroutine that returns the results of a database lookup. Here's a loop that increments the value of the first column of a series of lines:</P
><PRE
CLASS="programlisting"
>while (&lt;&gt;) {
  s/^(\S+)/$1+1/e; # $1+1 is Perl code, not a string
  print;
}</PRE
><P
CLASS="para"
>Another use of <CODE
CLASS="literal"
>eval</CODE
> is as an error-trapping mechanism:</P
><PRE
CLASS="programlisting"
>eval {
  &amp;some_hairy_routine_that_might_die(@args);
};
if ($@) {
  print &quot;oops... some_hairy died with $@&quot;;
}</PRE
><P
CLASS="para"
>Here, <CODE
CLASS="literal"
>$@</CODE
> will be empty as long as the <CODE
CLASS="literal"
>eval</CODE
> block worked; otherwise, it will have the text of the die message.</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appd_04.htm"
TITLE="D.4 Other Operators"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: D.4 Other Operators"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl on Win32 Systems"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appd_06.htm"
TITLE="D.6 Many, Many Predefined Variables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: D.6 Many, Many Predefined Variables"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>D.4 Other Operators</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>D.6 Many, Many Predefined Variables</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
