<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.2.42 Math::BigFloat&nbsp;- Arbitrary-Length, Floating-Point Math Package</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T02:02:53Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_02.htm"
TITLE="7.2 Library Modules"><LINK
REL="prev"
HREF="ch07_041.htm"
TITLE="7.2.41 lib&nbsp;- Manipulate @INC at Compile-Time"><LINK
REL="next"
HREF="ch07_043.htm"
TITLE="7.2.43 Math::BigInt&nbsp;- Arbitrary-Length Integer Math Package"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_041.htm"
TITLE="7.2.41 lib&nbsp;- Manipulate @INC at Compile-Time"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.41 lib&nbsp;- Manipulate @INC at Compile-Time"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. The Standard Perl Library"
>Chapter 7<BR>The Standard Perl Library</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_043.htm"
TITLE="7.2.43 Math::BigInt&nbsp;- Arbitrary-Length Integer Math Package"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.43 Math::BigInt&nbsp;- Arbitrary-Length Integer Math Package"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="AUTOID-23392"
>7.2.42 Math::BigFloat&nbsp;- Arbitrary-Length, Floating-Point Math Package</A
></H3
><A
CLASS="indexterm"
NAME="AUTOID-23394"
></A
><A
CLASS="indexterm"
NAME="AUTOID-23396"
></A
><A
CLASS="indexterm"
NAME="AUTOID-23398"
></A
><A
CLASS="indexterm"
NAME="AUTOID-23401"
></A
><PRE
CLASS="programlisting"
>use Math::BigFloat;

$f = Math::BigFloat-&gt;new($string);

# <CODE
CLASS="replaceable"
><I
>NSTR</I
></CODE
> is a number string; <CODE
CLASS="replaceable"
><I
>SCALE</I
></CODE
> is an integer value.
# In all following cases $f remains unchanged.
# All methods except fcmp() return a number string.
$f-&gt;fadd(<CODE
CLASS="replaceable"
><I
>NSTR</I
></CODE
>);          # return sum of <CODE
CLASS="replaceable"
><I
>NSTR</I
></CODE
> and $f
$f-&gt;fsub(<CODE
CLASS="replaceable"
><I
>NSTR</I
></CODE
>);          # return $f minus <CODE
CLASS="replaceable"
><I
>NSTR</I
></CODE
>
$f-&gt;fmul(<CODE
CLASS="replaceable"
><I
>NSTR</I
></CODE
>);          # return $f multiplied by <CODE
CLASS="replaceable"
><I
>NSTR</I
></CODE
>
$f-&gt;fdiv(<CODE
CLASS="replaceable"
><I
>NSTR</I
></CODE
>[,<CODE
CLASS="replaceable"
><I
>SCALE</I
></CODE
>]);  # return $f divided by <CODE
CLASS="replaceable"
><I
>NSTR</I
></CODE
> to <CODE
CLASS="replaceable"
><I
>SCALE</I
></CODE
> places
$f-&gt;fneg();              # return negative of $f
$f-&gt;fabs();              # return absolute value of $f
$f-&gt;fcmp(<CODE
CLASS="replaceable"
><I
>NSTR</I
></CODE
>);          # compare $f to <CODE
CLASS="replaceable"
><I
>NSTR</I
></CODE
>; see below for return value
$f-&gt;fround(<CODE
CLASS="replaceable"
><I
>SCALE</I
></CODE
>);       # return rounded value of $f to <CODE
CLASS="replaceable"
><I
>SCALE</I
></CODE
> digits
$f-&gt;ffround(<CODE
CLASS="replaceable"
><I
>SCALE</I
></CODE
>);      # return rounded value of $f at <CODE
CLASS="replaceable"
><I
>SCALEth</I
></CODE
> place
$f-&gt;fnorm();             # return normalization of $f
$f-&gt;fsqrt([<CODE
CLASS="replaceable"
><I
>SCALE</I
></CODE
>]);      # return sqrt of $f to <CODE
CLASS="replaceable"
><I
>SCALE</I
></CODE
> places</PRE
><P
CLASS="para"
>This module allows you to use floating-point numbers of arbitrary length.
For example:</P
><PRE
CLASS="programlisting"
>$float = new Math::BigFloat &quot;2.123123123123123123123123123123123&quot;;</PRE
><P
CLASS="para"
>Number strings (<CODE
CLASS="replaceable"
><I
>NSTR</I
></CODE
>s) have the form, <CODE
CLASS="literal"
>/[+-]\d*\.?\d*E[+-]\d+/</CODE
>.
Embedded white space is ignored, so that the number strings used in the
following two lines are identical:</P
><PRE
CLASS="programlisting"
>$f = Math::BigFloat-&gt;new(&quot;-20.0    0732&quot;);
$g = $f-&gt;fmul(&quot;-20.00732&quot;);</PRE
><P
CLASS="para"
>The return value <CODE
CLASS="literal"
>NaN</CODE
> indicates either that an input parameter was &quot;Not
a Number&quot;, or else that you tried to divide by zero or take the square
root of a negative number.  The <CODE
CLASS="literal"
>fcmp()</CODE
> method returns <CODE
CLASS="literal"
>-1</CODE
>,
<CODE
CLASS="literal"
>0</CODE
>, or <CODE
CLASS="literal"
>1</CODE
> depending on whether <CODE
CLASS="literal"
>$f</CODE
> is less than,
equal to, or greater than the number string given as an argument.  If
the number string is undefined or null, the undefined value is returned.</P
><P
CLASS="para"
>If <CODE
CLASS="replaceable"
><I
>SCALE</I
></CODE
> is unspecified,
division is computed to the number of digits given by:</P
><PRE
CLASS="programlisting"
>max($div_scale, length(dividend)+length(divisor))</PRE
><P
CLASS="para"
>A similar default scale value is computed for square roots.</P
><P
CLASS="para"
>When you use this module, Perl's basic math operations are overloaded
with routines from Math::BigFloat.  Therefore, you don't have to employ the
methods shown above to multiply, divide, and so on.  You can rely instead
on the usual operators.  Given this code:</P
><PRE
CLASS="programlisting"
>$f = Math::BigFloat-&gt;new(&quot;20.00732&quot;);
$g = Math::BigFloat-&gt;new(&quot;1.7&quot;);</PRE
><P
CLASS="para"
>the following six lines all yield the corresponding values for <CODE
CLASS="literal"
>$h</CODE
>:</P
><PRE
CLASS="programlisting"
>$h = 20.00732 * 1.7;    # 34.012444 (ordinary math--$h is not an object)
$h = $f * $g;           # &quot;34.012444&quot; ($h is now a BigFloat object)
$h = $f * 1.7;          # &quot;34.012444&quot; ($h is now a BigFloat object)
$h = 20.00732 * $g;     # &quot;34.012444&quot; ($h is now a BigFloat object)
$h = $f-&gt;fmul($g);      # &quot;+34012444E-6&quot; ($h is now a BigFloat object)
$h = $f-&gt;fmul(1.7);     # &quot;+34012444E-6&quot; ($h is now a BigFloat object)</PRE
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_041.htm"
TITLE="7.2.41 lib&nbsp;- Manipulate @INC at Compile-Time"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.41 lib&nbsp;- Manipulate @INC at Compile-Time"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_043.htm"
TITLE="7.2.43 Math::BigInt&nbsp;- Arbitrary-Length Integer Math Package"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.43 Math::BigInt&nbsp;- Arbitrary-Length Integer Math Package"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.2.41 lib&nbsp;- Manipulate @INC at Compile-Time</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.2.43 Math::BigInt&nbsp;- Arbitrary-Length Integer Math Package</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
