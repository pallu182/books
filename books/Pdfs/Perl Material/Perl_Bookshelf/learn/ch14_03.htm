<HTML
><HEAD
>
<TITLE>[Chapter 14] 14.3 Using Processes as Filehandles</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:35:03Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch14_01.htm"
TITLE="14. Process Management"><LINK
REL="prev"
HREF="ch14_02.htm"
TITLE="14.2 Using Backquotes"><LINK
REL="next"
HREF="ch14_04.htm"
TITLE="14.4 Using fork"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_02.htm"
TITLE="14.2 Using Backquotes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.2 Using Backquotes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch14_01.htm"
TITLE="14. Process Management"
>Chapter 14<BR>Process Management</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_04.htm"
TITLE="14.4 Using fork"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.4 Using fork"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch14-11078"
>14.3 Using Processes as Filehandles</A
></H2
><P
CLASS="para"
>Yet another way to launch a process is to create a process that looks like a <A
CLASS="indexterm"
NAME="ch14-idx-744337-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-744337-1"
></A
>filehandle (similar to the <EM
CLASS="emphasis"
>popen </EM
><A
CLASS="indexterm"
NAME="ch14-idx-744336-0"
></A
>(3) C library routine if you're familiar with that). We can create a process-filehandle that either captures the output from or provides input to the process.[<A
CLASS="footnote"
HREF="#ch14-pgfId-744800"
>4</A
>] Here's an example of creating a filehandle out of a <EM
CLASS="emphasis"
>who</EM
>(1) process. Because the process is generating output that we want to read, we make a filehandle that is open for reading, like so:<PRE
CLASS="programlisting"
>open(WHOPROC, &quot;who|&quot;); # open who for reading</PRE
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch14-pgfId-744800"
>[4]</A
> But not both at once. See <A
CLASS="olink"
HREF="../prog/ch06_01.htm"
>Chapter 6</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
> or <EM
CLASS="emphasis"
>perlipc </EM
>(1) for examples of bidirectional communication.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Note the <A
CLASS="indexterm"
NAME="ch14-idx-744338-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-744338-1"
></A
>vertical bar on the right side of <CODE
CLASS="literal"
>who</CODE
>. That bar tells Perl that this <CODE
CLASS="literal"
>open</CODE
> is not about a filename, but rather a command to be started. Because the bar is on the right of the command, the filehandle is opened for reading, meaning that the standard output of <EM
CLASS="emphasis"
>who</EM
> is going to be captured. (The standard input and standard error remain shared with the Perl process.) To the rest of the program, the <CODE
CLASS="literal"
>WHOPROC</CODE
> handle is merely a filehandle that is open for reading, meaning that all normal file I/O operators apply. Here's a way to <A
CLASS="indexterm"
NAME="ch14-idx-744339-0"
></A
>read data from the <EM
CLASS="emphasis"
>who</EM
> command into an array:</P
><PRE
CLASS="programlisting"
>@whosaid = &lt;WHOPROC&gt;;</PRE
><P
CLASS="para"
>Similarly, to open a command that expects input, we can open a process-filehandle for writing by putting the vertical bar on the left of the command, like so:</P
><PRE
CLASS="programlisting"
>open(LPR,&quot;|<A
CLASS="indexterm"
NAME="ch14-idx-744344-0"
></A
>lpr -Pslatewriter&quot;);
print LPR @rockreport;
close(LPR);</PRE
><P
CLASS="para"
>In this case, after opening <CODE
CLASS="literal"
>LPR</CODE
>, we write some data to it and then close it. Opening a process with a process-filehandle allows the command to execute in parallel with the Perl program. Saying <A
CLASS="indexterm"
NAME="ch14-idx-744340-0"
></A
><CODE
CLASS="literal"
>close</CODE
> on the filehandle forces the Perl program to wait until the process exits. If you don't close the filehandle, the process can continue to run even beyond the execution of the Perl program.</P
><P
CLASS="para"
>Opening a <A
CLASS="indexterm"
NAME="ch14-idx-744341-0"
></A
>process for writing causes the command's standard input to come from the filehandle. The process shares the <A
CLASS="indexterm"
NAME="ch14-idx-744342-0"
></A
><A
CLASS="indexterm"
NAME="ch14-idx-744342-1"
></A
>standard output and <A
CLASS="indexterm"
NAME="ch14-idx-744343-0"
></A
>standard error with Perl. As before, you may use <EM
CLASS="emphasis"
>/bin/sh</EM
>-style I/O redirection, so here's one way to simply discard the error messages from the <EM
CLASS="emphasis"
>lpr</EM
> command in that last example:</P
><PRE
CLASS="programlisting"
>open(LPR,&quot;|lpr -Pslatewriter &gt;/dev/null 2&gt;&amp;1&quot;);</PRE
><P
CLASS="para"
>The <CODE
CLASS="literal"
>&gt;/dev/null</CODE
> causes standard output to be discarded by being redirected to the null device. The <CODE
CLASS="literal"
>2&gt;&amp;1</CODE
> causes standard error to be sent to where the standard output is sent, resulting in errors being discarded as well.</P
><P
CLASS="para"
>You could even combine all this, generating a report of everyone except Fred in the list of logged-on entries, like so:</P
><PRE
CLASS="programlisting"
>open (WHO,&quot;who|&quot;);
open (LPR,&quot;|lpr -Pslatewriter&quot;);
while (&lt;WHO&gt;) {
    unless (/fred/) { # don't show fred
        print LPR $_;
    }
}
close WHO;
close LPR;</PRE
><P
CLASS="para"
>As this code fragment reads from the <CODE
CLASS="literal"
>WHO</CODE
> handle one line at a time, it prints all of the lines that don't contain the string <CODE
CLASS="literal"
>fred</CODE
> to the <CODE
CLASS="literal"
>LPR</CODE
> handle. So the only output on the printer is the lines that don't contain <CODE
CLASS="literal"
>fred</CODE
>.</P
><P
CLASS="para"
>You don't have to open just one command at a time. You can open an entire pipeline. For example, the following line starts up an <EM
CLASS="emphasis"
>ls </EM
>(1) process, which pipes its output into a <EM
CLASS="emphasis"
>tail </EM
>(1) process, which finally sends its output along to the <CODE
CLASS="literal"
>WHOPR</CODE
> filehandle:</P
><PRE
CLASS="programlisting"
>open(WHOPR, &quot;ls | tail -r |&quot;);</PRE
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_02.htm"
TITLE="14.2 Using Backquotes"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 14.2 Using Backquotes"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch14_04.htm"
TITLE="14.4 Using fork"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 14.4 Using fork"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>14.2 Using Backquotes</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>14.4 Using fork</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
