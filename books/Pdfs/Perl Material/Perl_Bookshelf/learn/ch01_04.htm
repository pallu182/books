<HTML
><HEAD
>
<TITLE>[Chapter 1] 1.4 Basic Concepts</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:29:05Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch01_01.htm"
TITLE="1. Introduction"><LINK
REL="prev"
HREF="ch01_03.htm"
TITLE="1.3 Availability"><LINK
REL="next"
HREF="ch01_05.htm"
TITLE="1.5 A Stroll Through Perl"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_03.htm"
TITLE="1.3 Availability"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.3 Availability"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch01_01.htm"
TITLE="1. Introduction"
>Chapter 1<BR>Introduction</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_05.htm"
TITLE="1.5 A Stroll Through Perl"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.5 A Stroll Through Perl"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch01-37202"
>1.4 Basic Concepts</A
></H2
><P
CLASS="para"
>A <A
CLASS="indexterm"
NAME="ch01-idx-868841-0"
></A
>shell script is nothing more than a sequence of shell commands stuffed into a text file. The file is then "<A
CLASS="indexterm"
NAME="ch01-idx-868842-0"
></A
>made executable" by turning on the <A
CLASS="indexterm"
NAME="ch01-idx-868843-0"
></A
>execute bit (via <EM
CLASS="emphasis"
>chmod +x</EM
> <EM
CLASS="emphasis"
>filename</EM
>) and then the name of the file is typed at a shell prompt. Bingo, one shell program. For example, a script to run the <A
CLASS="indexterm"
NAME="ch01-idx-868844-0"
></A
><EM
CLASS="emphasis"
>date</EM
> command followed by the <A
CLASS="indexterm"
NAME="ch01-idx-868845-0"
></A
><EM
CLASS="emphasis"
>who</EM
> command can be created and executed like this:</P
><PRE
CLASS="programlisting"
>% <CODE
CLASS="userinput"
><B
>echo date &gt;somescript</B
></CODE
>
% <CODE
CLASS="userinput"
><B
>echo who &gt;&gt;somescript</B
></CODE
>
% <CODE
CLASS="userinput"
><B
>cat somescript</B
></CODE
>
date
who
% <CODE
CLASS="userinput"
><B
>chmod +x somescript</B
></CODE
>
% <CODE
CLASS="userinput"
><B
>somescript</B
></CODE
>
[output of date followed by who]
%</PRE
><P
CLASS="para"
>Similarly, a Perl program is a bunch of Perl statements and definitions thrown into a file. You then turn on the execute bit[<A
CLASS="footnote"
HREF="#ch01-pgfId-870139"
>2</A
>] and type the name of the file at a shell prompt. However, the file has to indicate that this is a Perl program and not a shell program, so you need an additional step.</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch01-pgfId-870139"
>[2]</A
> On UNIX systems, that is. For directions on how to render your scripts executable on non-UNIX systems, see the Perl FAQ or your port's release notes.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Most of the time, this step involves placing the line</P
><PRE
CLASS="programlisting"
><A
CLASS="indexterm"
NAME="ch01-idx-868846-0"
></A
>#!/usr/bin/perl</PRE
><P
CLASS="para"
>as the first line of the file. But if your Perl is stuck in some nonstandard place, or your system doesn't understand the <CODE
CLASS="literal"
>#!</CODE
> line, you'll have a little more work to do. Check with your Perl installer about this. The examples in this book assume that you use this common mechanism. </P
><P
CLASS="para"
>Perl is mostly a free-format language like C&nbsp;- <A
CLASS="indexterm"
NAME="ch01-idx-868847-0"
></A
>whitespace between tokens (elements of the program, like <CODE
CLASS="literal"
>print</CODE
> or <CODE
CLASS="literal"
>+</CODE
>) is optional, unless two tokens put together can be mistaken for another token, in which case whitespace of some kind is mandatory. (<A
CLASS="indexterm"
NAME="ch01-idx-868848-0"
></A
>Whitespace consists of spaces, tabs, newlines, returns, or formfeeds.) There are a few constructs that require a certain kind of whitespace in a certain place, but they'll be pointed out when we get to them. You can assume that the kind and amount of whitespace between tokens is otherwise arbitrary.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch01-idx-868849-0"
></A
>Although nearly any Perl program can be written all on one line, typically a Perl program is indented much like a C program, with nested parts of statements indented more than the surrounding parts. You'll see plenty of examples showing a typical indentation style throughout this book.</P
><P
CLASS="para"
>Just like a shell script, a Perl program consists of all of the Perl statements of the file taken collectively as one big routine to execute. There's no concept of a "<A
CLASS="indexterm"
NAME="ch01-idx-868850-0"
></A
>main" routine as in C.</P
><P
CLASS="para"
>Perl <A
CLASS="indexterm"
NAME="ch01-idx-868851-0"
></A
>comments are like (modern) shell comments. Anything from an unquoted <A
CLASS="indexterm"
NAME="ch01-idx-868852-0"
></A
>pound sign (<CODE
CLASS="literal"
>#</CODE
>) to the end of the line is a comment. There are no C-like multiline comments.</P
><P
CLASS="para"
>Unlike most shells (but like <EM
CLASS="emphasis"
>awk</EM
> and <EM
CLASS="emphasis"
>sed </EM
>), the <A
CLASS="indexterm"
NAME="ch01-idx-870146-0"
></A
><A
CLASS="indexterm"
NAME="ch01-idx-870146-1"
></A
>Perl interpreter completely parses and compiles the program into an internal format before executing any of it. This means that you can never get a syntax error from the program once the program has started, and that the whitespace and comments simply disappear and won't slow the program down. This compilation phase ensures the rapid execution of Perl operations once it is started, and it provides additional motivation for dropping C as a systems utility language merely on the grounds that C is compiled.</P
><P
CLASS="para"
>This compilation does take time; it's inefficient to have a voluminous Perl program that does one small quick task (out of many potential tasks) and then exits, because the run-time for the program will be dwarfed by the compile-time.</P
><P
CLASS="para"
>So Perl is like a compiler and an interpreter. It's a compiler because the program is completely read and parsed before the first statement is executed. It's an interpreter because there is no object code sitting around filling up disk space. In some ways, it's the best of both worlds. Admittedly, a caching of the compiled object code between invocations, or even translation into native machine code, would be nice. Actually, a working version of such a compiler already exists and is currently scheduled to be bundled into the 5.005 release. See the Perl FAQ for current status.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_03.htm"
TITLE="1.3 Availability"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 1.3 Availability"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch01_05.htm"
TITLE="1.5 A Stroll Through Perl"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 1.5 A Stroll Through Perl"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>1.3 Availability</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>1.5 A Stroll Through Perl</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
