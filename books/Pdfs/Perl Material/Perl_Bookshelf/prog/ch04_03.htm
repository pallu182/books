<HTML
><HEAD
>
<TITLE>[Chapter 4] 4.3 Using Hard References</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:57:39Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch04_01.htm"
TITLE="4. References and Nested Data Structures"><LINK
REL="prev"
HREF="ch04_02.htm"
TITLE="4.2 Creating Hard References"><LINK
REL="next"
HREF="ch04_04.htm"
TITLE="4.4 Symbolic References"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch04_02.htm"
TITLE="4.2 Creating Hard References"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.2 Creating Hard References"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch04_01.htm"
TITLE="4. References and Nested Data Structures"
>Chapter 4<BR>References and Nested Data Structures</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch04_04.htm"
TITLE="4.4 Symbolic References"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.4 Symbolic References"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="PERL2-CH-4-SECT-3"
>4.3 Using Hard References</A
></H2
><P
CLASS="para"
>Just as there are numerous ways to create references, there are also
several ways to use, or dereference, a reference.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-4-SECT-3.1"
>4.3.1 Using a Variable as a Variable Name</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14548"
></A
>Anywhere you might ordinarily put an alphanumeric identifier as part of
a variable or subroutine name, you can just replace the identifier with
a simple scalar variable containing a reference of the correct type.
For example:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>$foo         = &quot;two humps&quot;;
$scalarref   = \$foo;
$camel_model = $$scalarref;  # $camel_model is now &quot;two humps&quot;</PRE
></P
><P
CLASS="para"
>Here are various dereferences:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>$bar = $$scalarref;
push(@$arrayref, $filename);
$$arrayref[0] = &quot;January&quot;;
$$hashref{&quot;KEY&quot;} = &quot;VALUE&quot;;
&amp;$coderef(1,2,3);
print $globref &quot;output\n&quot;;</PRE
></P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14556"
></A
>It's important to understand that we are specifically
not dereferencing <CODE
CLASS="literal"
>$arrayref[0]</CODE
>
or <CODE
CLASS="literal"
>$hashref{&quot;KEY&quot;}</CODE
> there.  The dereferencing of the
scalar variable happens before any array or hash
lookups.  To dereference anything more complicated than a simple
scalar variable, you must use one of the next two methods described
below.  However, &quot;simple scalars&quot; can include an identifier that
itself uses this first method recursively.  Therefore, the following
prints &quot;howdy&quot;:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>$refrefref = \\\&quot;howdy&quot;;
print $$$$refrefref;</PRE
></P
><P
CLASS="para"
>You can think of the dollar signs as executing right to left.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-4-SECT-3.2"
>4.3.2 Using a BLOCK as a Variable Name</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14566"
></A
>The second way is just like the first, except using a
<CODE
CLASS="replaceable"
><I
>BLOCK</I
></CODE
> instead of a variable.  Anywhere you'd put
an alphanumeric identifier as part of a variable or subroutine name,
you can replace the identifier with a <CODE
CLASS="replaceable"
><I
>BLOCK</I
></CODE
>
returning a reference of the correct type.  In other words, the
previous examples could also be handled like this:</P
><P
CLASS="para"
><PRE
CLASS="programlisting"
>$bar = ${$scalarref};
push(@{$arrayref}, $filename);
${$arrayref}[0] = &quot;January&quot;;
${$hashref}{&quot;KEY&quot;} = &quot;VALUE&quot;;
&amp;{$coderef}(1,2,3);</PRE
></P
><P
CLASS="para"
>Admittedly, it's silly to use the braces in these simple cases, but
the <CODE
CLASS="replaceable"
><I
>BLOCK</I
></CODE
> can contain any arbitrary expression. In particular, it can
contain subscripted expressions. In the following example,
<CODE
CLASS="literal"
>$dispatch{$index}</CODE
> is assumed to contain a reference to a
subroutine. The example invokes the subroutine with three arguments.</P
><PRE
CLASS="programlisting"
>&amp;{ $dispatch{$index} }(1, 2, 3);</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-4-SECT-3.3"
>4.3.3 Using the Arrow Operator</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14579"
></A
><A
CLASS="indexterm"
NAME="AUTOID-14582"
></A
><A
CLASS="indexterm"
NAME="AUTOID-14584"
></A
><A
CLASS="indexterm"
NAME="AUTOID-14586"
></A
><A
CLASS="indexterm"
NAME="AUTOID-14590"
></A
>For references to arrays or hashes, a third method of dereferencing
the reference involves the use of the <CODE
CLASS="literal"
>-&gt;</CODE
> infix
operator.  This is a form of syntactic sugar that makes it easier to
get at individual array or hash elements, especially when the
reference expression is complicated.  Each of these trios is
equivalent, corresponding to the three notations we've introduced.
(We've inserted some spaces to line up equivalent elements.)</P
><PRE
CLASS="programlisting"
>$  $arrayref  [0] = &quot;January&quot;;        #1
${ $arrayref }[0] = &quot;January&quot;;        #2
   $arrayref-&gt;[0] = &quot;January&quot;;        #3

$  $hashref  {KEY} = &quot;F#major&quot;;       #1
${ $hashref }{KEY} = &quot;F#major&quot;;       #2
   $hashref-&gt;{KEY} = &quot;F#major&quot;;       #3</PRE
><P
CLASS="para"
>You can see from this example that the first <CODE
CLASS="literal"
>$</CODE
> is missing from the third
notation.  It is, however, implied, and since it is implied, the
notation can only be used to reference scalar values, not slices.  But
just as with the second notation, you can use any expression to the left
of the <CODE
CLASS="literal"
>-&gt;</CODE
>, including another dereference, because arrow
operators associate left to right:</P
><PRE
CLASS="programlisting"
>print $array[3]-&gt;{&quot;English&quot;}-&gt;[0];</PRE
><P
CLASS="para"
>Note that <CODE
CLASS="literal"
>$array[3]</CODE
> and <CODE
CLASS="literal"
>$array-&gt;[3]</CODE
> are not the same.
The first is talking about the fourth element of <CODE
CLASS="literal"
>@array</CODE
>, while the
second one is talking about the fourth element of the (possibly anonymous)
array whose reference is contained in <CODE
CLASS="literal"
>$array</CODE
>.</P
><P
CLASS="para"
>Suppose now that <CODE
CLASS="literal"
>$array[3]</CODE
> is undefined.  The following statement
is still legal:</P
><PRE
CLASS="programlisting"
>$array[3]-&gt;{&quot;English&quot;}-&gt;[0] = &quot;January&quot;;</PRE
><P
CLASS="para"
>This is one of those cases mentioned earlier in which references
spring into existence when used in an lvalue context.  Supposing
<CODE
CLASS="literal"
>$array[3]</CODE
> to have been undefined, it's
automatically defined with a hash reference so that we can look up
<CODE
CLASS="literal"
>{&quot;English&quot;}</CODE
> in it.  Once that's done,
<CODE
CLASS="literal"
>$array[3]-&gt;{&quot;English&quot;}</CODE
> will automatically get
defined with an array reference so that we can look up
<CODE
CLASS="literal"
>[0]</CODE
> in it.  But this only happens when you're
trying to create an element.  Nothing would spring into existence if
you were just trying to print out the value.  You'd just get the
undefined value out of it.</P
><P
CLASS="para"
>One more shortcut here.  The arrow is optional between brace- or
bracket-enclosed subscripts, so you can shrink the above code down to:</P
><PRE
CLASS="programlisting"
>$array[3]{&quot;English&quot;}[0] = &quot;January&quot;;</PRE
><P
CLASS="para"
>Which, in the case of ordinary arrays, gives you multi-dimensional arrays
just like C's arrays:</P
><PRE
CLASS="programlisting"
>$answer[$x][$y][$z] += 42;</PRE
><P
CLASS="para"
>Well, okay, not <EM
CLASS="emphasis"
>entirely</EM
> like C's arrays.  For one thing, C
doesn't know how to grow its arrays on demand, while Perl does.  Also, there
are similar constructs in the two languages that parse differently.
In Perl, the following two statements do the same thing:</P
><PRE
CLASS="programlisting"
>$listref-&gt;[2][2] = &quot;hello&quot;;    # pretty clear
$$listref[2][2] = &quot;hello&quot;;     # a bit confusing</PRE
><P
CLASS="para"
>This second of these statements may disconcert the C programmer, who is
accustomed to using <CODE
CLASS="literal"
>*a[i]</CODE
> to mean &quot;what's pointed to by the
<EM
CLASS="emphasis"
>i</EM
>th element of <CODE
CLASS="literal"
>a</CODE
>&quot;.  But in Perl, the five prefix
dereferencers (<CODE
CLASS="literal"
>$ @ * % &amp;</CODE
>) effectively bind more tightly than the
subscripting braces or brackets.[<A
CLASS="footnote"
HREF="#AUTOID-14624"
>5</A
>]
Therefore, it is <CODE
CLASS="literal"
>$$listref</CODE
> and not
<CODE
CLASS="literal"
>$listref[$i]</CODE
> that is taken to be a reference to an array.
If you want the C notion, you either have to write <CODE
CLASS="literal"
>${$listref[$i]}</CODE
> to
force the <CODE
CLASS="literal"
>$listref[$i]</CODE
> to get evaluated before the leading
<CODE
CLASS="literal"
>$</CODE
> dereferencer, or you have to use the <CODE
CLASS="literal"
>-&gt;</CODE
> notation:</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-14624"
>[5]</A
> But not because of operator precedence.  The funny characters in Perl
are not operators in that sense.  The grammar simply prohibits anything
more complicated than a simple variable or block from following the
initial funny character, for various funny reasons.</P
></DIV
></BLOCKQUOTE
><PRE
CLASS="programlisting"
>$listref[$i]-&gt;[$j] = &quot;hello&quot;;</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-4-SECT-3.4"
>4.3.4 Using Object Methods</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14636"
></A
><A
CLASS="indexterm"
NAME="AUTOID-14639"
></A
><A
CLASS="indexterm"
NAME="AUTOID-14641"
></A
><A
CLASS="indexterm"
NAME="AUTOID-14643"
></A
>If a reference happens to be a reference to an object (a blessed thingy,
that is), then there are probably methods to access the innards of the
object, and you should probably stick to those methods unless you're
writing the class package that defines the object's methods.  (Such a
package is allowed to treat the object as a mere thingy when it wants
to.)  In other words, be nice, and don't violate the object's
encapsulation without a very good reason.  Perl does not enforce
encapsulation.  We are not totalitarians here.  We do expect some basic
civility, however.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-4-SECT-3.5"
>4.3.5 Other Tricks You Can Do with Hard References</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14649"
></A
>You can use the <A
CLASS="xref"
HREF="ch03_121.htm"
TITLE="ref"
><B
CLASS="xref.cmd"
>ref</B
></A
> operator to determine what type of thingy a
reference is pointing to.  
Think of <A
CLASS="xref"
HREF="ch03_121.htm"
TITLE="ref"
><B
CLASS="xref.cmd"
>ref</B
></A
> as a &quot;typeof&quot; operator
that returns true if its argument is a reference and false
otherwise.  
The value returned depends on the type of thing referenced.
Built-in types include:</P
><PRE
CLASS="programlisting"
>REF
SCALAR
ARRAY
HASH
CODE
GLOB</PRE
><P
CLASS="para"
>If you simply use a hard reference in a string context, it'll be converted
to a string containing both the type and the address: <CODE
CLASS="literal"
>SCALAR(0x1fc0e)</CODE
>.
(The reverse conversion cannot be done, since reference count
information has been lost.)</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14657"
></A
>You can use the <A
CLASS="xref"
HREF="ch03_009.htm"
TITLE="bless"
><B
CLASS="xref.cmd"
>bless</B
></A
> operator to
associate a referenced thingy with a package functioning as an object
class.  When you do this, <A
CLASS="xref"
HREF="ch03_121.htm"
TITLE="ref"
><B
CLASS="xref.cmd"
>ref</B
></A
> will
return that package name instead of the internal type.  An object
reference used in a string context returns a string with both the
external and internal types, along with the address:
<CODE
CLASS="literal"
>MyType=HASH(0x20d10)</CODE
>.  See <A
CLASS="xref"
HREF="ch05_01.htm"
TITLE="Packages, Modules, and Object Classes"
>Chapter 5</A
> for more details about objects.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14664"
></A
><A
CLASS="indexterm"
NAME="AUTOID-14666"
></A
>Since the dereference syntax always indicates the kind of reference
desired, a typeglob can be used the same way a reference can, despite
the fact that a typeglob contains multiple thingies of various types.
So <CODE
CLASS="literal"
>${*foo}</CODE
> and <CODE
CLASS="literal"
>${\$foo}</CODE
> both refer to the same scalar
variable.  The latter is more efficient though.</P
><P
CLASS="para"
>Here's a trick for interpolating the value of a subroutine call into a string:</P
><PRE
CLASS="programlisting"
>print &quot;My sub returned @{[ mysub(1,2,3) ]} that time.\n&quot;;</PRE
><P
CLASS="para"
>It works like this.  At compile time, when the <CODE
CLASS="literal"
>@{...}</CODE
> is seen
within the double-quoted string, it's parsed as a block that will return
a reference.  Within the block, there are square brackets that will
create a reference to an anonymous array from whatever is in the
brackets.  So at run-time, <CODE
CLASS="literal"
>mysub(1,2,3)</CODE
> is called, and the
results are loaded into an anonymous array, a reference to which is then
returned within the block.  That array reference is then immediately
dereferenced by the surrounding <CODE
CLASS="literal"
>@{...}</CODE
>, and the array value is
interpolated into the double-quoted string just as an ordinary array
would be.  This chicanery is also useful for arbitrary expressions,
such as:</P
><PRE
CLASS="programlisting"
>print &quot;That yields @{[ $n + 5 ]} widgets\n&quot;;</PRE
><P
CLASS="para"
>Be careful though.  The inside of the square brackets is supplying a
list context to its expression.  In this case it doesn't matter,
although it's possible that the above call to <CODE
CLASS="literal"
>mysub()</CODE
> might care.
When it does matter, a similar trick can be done with a scalar
reference.  It just isn't quite as pretty:</P
><PRE
CLASS="programlisting"
>print &quot;That yields ${ \($n + 5) } widgets.&quot;;</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CH-4-SECT-3.6"
>4.3.6 Closures</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-14685"
></A
><A
CLASS="indexterm"
NAME="AUTOID-14687"
></A
>Earlier we talked about creating anonymous subroutines with a nameless
<CODE
CLASS="literal"
>sub {}</CODE
>.  Since anonymous subroutines have to be
generated someplace within your code (in order to generate the
reference that you poke into some variable), such routines can be
thought of as coming into existence at run-time.  (That is, they have a
time of generation as well as a location of definition.)  Because of
this fact, anonymous subroutines can act as <EM
CLASS="emphasis"
>closures</EM
>
with respect to <A
CLASS="xref"
HREF="ch03_097.htm"
TITLE="my"
><B
CLASS="xref.cmd"
>my</B
></A
> variables&nbsp;- that
is, with respect to variables visible lexically within the current
scope.  Closure is a notion out of the Lisp world that says if you
define an anonymous function in a particular lexical context at a
particular moment, it pretends to run in that context even when it's
called outside of the context.  In other words, you are guaranteed to
get the same copy of a lexical variable, even
though many other instances of the same lexical variable may have been
created before or since.  This gives you a way to pass arguments to a
subroutine when you define it as well as when you call it.  It's
useful for setting up little bits of code to run later, such as
callbacks.</P
><P
CLASS="para"
>You can also think of closures as a way to write a subroutine template without
using <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
>.  The lexical variables are like parameters to fill in
the template. </P
><P
CLASS="para"
>Here's a small example of how closures work:</P
><PRE
CLASS="programlisting"
>sub newprint {
    my $x = shift;
    return sub { my $y = shift; print &quot;$x, $y!\n&quot;; };
}
$h = newprint(&quot;Howdy&quot;);
$g = newprint(&quot;Greetings&quot;);

# Time passes...

&amp;$h(&quot;world&quot;);
&amp;$g(&quot;earthlings&quot;);</PRE
><P
CLASS="para"
>This prints:</P
><PRE
CLASS="programlisting"
>Howdy, world!
Greetings, earthlings!</PRE
><P
CLASS="para"
>Note in particular how <CODE
CLASS="literal"
>$x</CODE
> continues to refer to the value passed into
<CODE
CLASS="literal"
>newprint()</CODE
> despite the fact that the <CODE
CLASS="literal"
>my $x</CODE
> has
seemingly gone out of
scope by the time the anonymous subroutine runs.  That's what closures
are all about.</P
><P
CLASS="para"
>This method only applies to <A
CLASS="xref"
HREF="ch03_097.htm"
TITLE="my"
><B
CLASS="xref.cmd"
>my</B
></A
>
variables. Global variables work as they always worked (since they're neither
created nor destroyed the way lexical variables are). By and large,
closures are not something you need to trouble yourself about.
When you do need them, they just sorta do what you expect.[<A
CLASS="footnote"
HREF="#AUTOID-14705"
>6</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="AUTOID-14705"
>[6]</A
> Always presuming you expect the right thing, of course.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>Perl doesn't provide member pointers like C++ does, but you can get a
similar effect using a closure.  Suppose you want a pointer to a
method for a particular object.  You can remember both the object and
the method as lexical variables bound to a closure:</P
><PRE
CLASS="programlisting"
>sub get_method_ref {
    my ($self, $method) = @_;
    return sub { return $self-&gt;$method(@_) };
}
$dog_wag = get_method_ref($dog, 'wag');
&amp;$dog_wag(&quot;tail&quot;);  # Calls $dog-&gt;wag('tail').</PRE
><A
CLASS="indexterm"
NAME="AUTOID-14709"
></A
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch04_02.htm"
TITLE="4.2 Creating Hard References"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 4.2 Creating Hard References"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT1"
HREF="ch04_04.htm"
TITLE="4.4 Symbolic References"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 4.4 Symbolic References"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>4.2 Creating Hard References</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>4.4 Symbolic References</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
