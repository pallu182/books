<HTML
><HEAD
>
<TITLE>[Chapter 19] 19.7 Other Form Elements</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:36:21Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch19_01.htm"
TITLE="19. CGI Programming"><LINK
REL="prev"
HREF="ch19_06.htm"
TITLE="19.6 Form Generation"><LINK
REL="next"
HREF="ch19_08.htm"
TITLE="19.8 Creating a Guestbook Program"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_06.htm"
TITLE="19.6 Form Generation"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.6 Form Generation"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch19_01.htm"
TITLE="19. CGI Programming"
>Chapter 19<BR>CGI Programming</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_08.htm"
TITLE="19.8 Creating a Guestbook Program"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.8 Creating a Guestbook Program"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch19-18445"
>19.7 Other Form Elements</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-4360-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4360-1"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4360-2"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4360-3"
></A
>Now that you know how to create simple text fields in your form and respond to them, you're probably wondering how to make the other kinds of widgets you've seen, like buttons, checkboxes, and menus. </P
><P
CLASS="para"
>Here's a more elaborate version of our program. We've thrown in some new widgets: <A
CLASS="indexterm"
NAME="ch19-idx-4364-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4364-1"
></A
>popup menus, a submit button (named "order"), and a button to reset the entire form, erasing all user input. Popup menus are pretty much just what they say they are, but the arguments given to <CODE
CLASS="literal"
>popup_menu</CODE
> may perplex you until you've read the following section on <A
CLASS="xref"
HREF="ch19_07.htm#ch19-pgfId-206"
TITLE="References"
>"References</A
>." The <CODE
CLASS="literal"
>textfield()</CODE
><A
CLASS="indexterm"
NAME="ch19-idx-4363-0"
></A
> function creates a text-input field with the indicated name. We'll give more details about this function when describing the guestbook program later in this chapter. </P
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
# cgi-bin/ice_cream: program to answer and generate ice cream
# order form (version 4)
use strict; # enforce variable declarations and quoting
use CGI qw(:standard);

print header, start_html(&quot;Ice Cream Stand&quot;), h1(&quot;Ice Cream Stand&quot;);
if (param()) { # the form has already been filled out
    my $who = param(&quot;name&quot;);
    my $flavor = param(&quot;flavor&quot;);
 my $scoops = param(&quot;scoops&quot;);
 my $taxrate = 1.0743;
 my $cost = sprintf(&quot;%.2f&quot;, $taxrate * (1.00 + $scoops * 0.25));
 print p(&quot;Ok, $who, have $scoops scoops of $flavor for \$$cost.&quot;);
} else { # first time through, so present clean form
    print hr(); # draw a horizontal rule before the form
    print start_form();
    print p(&quot;What's your name? &quot;, textfield(&quot;name&quot;));
    # FOR EXPLANATION OF FOLLOWING TWO LINES, SEE NEXT SECTION
    print p(&quot;What flavor: &quot;, popup_menu(&quot;flavor&quot;, 
                                           ['mint','cherry','mocha']));
    print p(&quot;How many scoops? &quot;, popup_menu(&quot;scoops&quot;, [ 1..3 ]));
    print p(submit(&quot;order&quot;), reset(&quot;clear&quot;));
    print end_form(), hr();
}
print end_html;</PRE
><P
CLASS="para"
><A
CLASS="xref"
HREF="ch19_07.htm#ch19-10384"
TITLE="A slightly more elaborate fill-out form"
>Figure 19.4</A
> shows the initial screen it generates. </P
><H4
CLASS="figure"
><A
CLASS="title"
NAME="ch19-10384"
>Figure 19.4: A slightly more elaborate fill-out form</A
></H4
><IMG
CLASS="graphic"
SRC="figs/fig19_4.gif"
ALT="Figure 19.4"><P
CLASS="para"
>As you'll recall, the <CODE
CLASS="literal"
>param()</CODE
><A
CLASS="indexterm"
NAME="ch19-idx-4365-0"
></A
> function, when called without arguments, returns the names of all form-input fields that were filled out. That way you can tell whether or not the URL was called from a filled-out form. If you have parameters, then the user filled in some of the fields of an existing form, so respond to them. Otherwise generate a new form, expecting to have this very same program called a second time. </P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch19-pgfId-206"
>19.7.1 References</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-4367-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4367-1"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4367-2"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4367-3"
></A
>You may have noticed that the <EM
CLASS="emphasis"
>popup_menu()</EM
> functions in the previous example both have a strange kind of argument. Just what are <CODE
CLASS="literal"
>[</CODE
>'<CODE
CLASS="literal"
>mint</CODE
>'<CODE
CLASS="literal"
>,</CODE
>'<CODE
CLASS="literal"
>cherry</CODE
>'<CODE
CLASS="literal"
>,</CODE
>'<CODE
CLASS="literal"
>mocha</CODE
>'<CODE
CLASS="literal"
>]</CODE
> and <CODE
CLASS="literal"
>[ 1..3 ]</CODE
> doing there? The brackets create something you haven't seen before: a <A
CLASS="indexterm"
NAME="ch19-idx-4366-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4366-1"
></A
>reference to an anonymous array. That's because the <CODE
CLASS="literal"
>popup_menu()</CODE
> function expects an array reference for an argument. Another way to create an array reference is to use a backslash in front of a named array, as in <CODE
CLASS="literal"
>\@choices</CODE
>. <A
CLASS="indexterm"
NAME="ch19-idx-4368-0"
></A
>So this</P
><PRE
CLASS="programlisting"
>@choices = ('mint','cherry','mocha');
print p(&quot;What flavor: &quot;, popup_menu(&quot;flavor&quot;, \@choices));</PRE
><P
CLASS="para"
>works just as well as this: </P
><PRE
CLASS="programlisting"
>print p(&quot;What flavor: &quot;, popup_menu(&quot;flavor&quot;, ['mint','cherry','mocha']));</PRE
><P
CLASS="para"
>References behave somewhat as pointers do in other languages, but with less danger of error. They're values that refer to other values (or variables). Perl references are very strongly typed (and uncastable), and they can never cause core dumps. Even better, the memory storage pointed to by references is automatically reclaimed when it's no longer used. References play a central role in object-oriented programming. They're also used in traditional programming, forming the basis for data structures more complex than simple one-dimensional arrays and hashes. Perl supports references to both named and anonymous scalars, arrays, hashes, and functions. </P
><P
CLASS="para"
>Just as you can create references to named arrays with <CODE
CLASS="literal"
>\@array</CODE
> and to anonymous arrays with <CODE
CLASS="literal"
>[ list ]</CODE
>, you can also create references to named hashes using <CODE
CLASS="literal"
>\%hash</CODE
> and to anonymous ones like this:[<A
CLASS="footnote"
HREF="#ch19-pgfId-1308"
>8</A
>]<PRE
CLASS="programlisting"
>{ key1, value1, key2, value2, ... }</PRE
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch19-pgfId-1308"
>[8]</A
> Yes, braces now have quite a few meanings in Perl. The context in which you use them determines what they're doing. </P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>You can learn more about references in <A
CLASS="olink"
HREF="../prog/ch04_01.htm"
>Chapter 4</A
> of <A
CLASS="citetitle"
HREF="../prog/index.htm"
TITLE="Programming Perl"
><CITE
CLASS="citetitle"
>Programming Perl</CITE
></A
>, or the <EM
CLASS="emphasis"
>perlref  </EM
>(1) manpage. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch19-pgfId-4089"
>19.7.2 Fancier Calling Sequences</A
></H3
><P
CLASS="para"
>We'll round out the discussion of form widgets by creating a really fancy widget&nbsp;- one that allows the user to select any number of its items. The <CODE
CLASS="literal"
>scrolling_list()</CODE
><A
CLASS="indexterm"
NAME="ch19-idx-4369-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4369-1"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4369-2"
></A
> function of CGI.pm can take an arbitrary number of argument pairs, each of which consists of a named parameter (beginning with <CODE
CLASS="literal"
>-</CODE
>) and a value for the parameter. </P
><P
CLASS="para"
>To add a scrolling list to a form, here's all you need to do: <A
CLASS="indexterm"
NAME="ch19-idx-4474-0"
></A
></P
><PRE
CLASS="programlisting"
> print scrolling_list(
     -NAME =&gt; &quot;flavors&quot;,
     -VALUES =&gt; [ qw(mint chocolate cherry vanilla peach) ],
     -LABELS =&gt; {
         mint =&gt; &quot;Mighty Mint&quot;,
         chocolate =&gt; &quot;Cherished Chocolate&quot;,
         cherry =&gt; &quot;Cheery Cherry&quot;,
         vanilla =&gt; &quot;Very Vanilla&quot;,
         peach =&gt; &quot;Perfectly Peachy&quot;,
     },
     -SIZE =&gt; 3,
     -MULTIPLE =&gt; 1, # 1 for true, 0 for false
);</PRE
><P
CLASS="para"
>The parameter values have meanings as follows: </P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>-NAME</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The name of the widget. You can use the value of this later to retrieve user data from the form with <CODE
CLASS="literal"
>param()</CODE
>. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-LABELS</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A reference to an anonymous hash. The values of the hash provide the labels (list items) seen by the form user. When a particular label is selected by the user, the corresponding hash key is what gets returned to the CGI program. That is, if the user selects the item given as <CODE
CLASS="literal"
>Perfectly</CODE
> <CODE
CLASS="literal"
>Peachy</CODE
>, the CGI program will receive the argument, <CODE
CLASS="literal"
>peach</CODE
>. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-VALUES</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A reference to an anonymous array. The array consists of the keys of the hash referenced by <CODE
CLASS="literal"
>-LABELS</CODE
>. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-SIZE</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A number determining how many list items will be visible to the user at one time. </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>-MULTIPLE</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>A true or false value (in Perl's sense of true and false) indicating whether the form user will be allowed to choose more than one list item. </P
></DD
></DL
><P
CLASS="para"
>When you've set <CODE
CLASS="literal"
>-MULTIPLE</CODE
> to true, you'll want to assign <CODE
CLASS="literal"
>param()</CODE
>'s return list to an array: </P
><PRE
CLASS="programlisting"
>@choices = param(&quot;flavors&quot;);</PRE
><P
CLASS="para"
>Here's another way to create the same scrolling list, passing a reference to an existing hash instead of creating one on the fly: </P
><PRE
CLASS="programlisting"
>%flavors = (
    mint =&gt; &quot;Mighty Mint&quot;,
    chocolate =&gt; &quot;Cherished Chocolate&quot;,
    cherry =&gt; &quot;Cheery Cherry&quot;,
    vanilla =&gt; &quot;Very Vanilla&quot;,
    peach =&gt; &quot;Perfectly Peachy&quot;,
);
print scrolling_list(
    -NAME =&gt; &quot;flavors&quot;,
    -LABELS =&gt; \%flavors,
    -VALUES =&gt; [ keys %flavors ],
    -SIZE =&gt; 3,
    -MULTIPLE =&gt; 1, # 1 for true, 0 for false<A
CLASS="indexterm"
NAME="ch19-idx-4476-0"
></A
>
);</PRE
><P
CLASS="para"
>This time we send in values computed from the keys of the <CODE
CLASS="literal"
>%flavors</CODE
> hash, which is itself passed in by reference using the backslash operator. Notice how the <CODE
CLASS="literal"
>-VALUES</CODE
> parameter is still wrapped in square brackets? It wouldn't work to just pass in the result of <CODE
CLASS="literal"
>keys</CODE
> as a list, because the calling convention for the <CODE
CLASS="literal"
>scrolling_list()</CODE
> function requires an array reference there, which the brackets happily provide. Think of the brackets as a convenient way to treat multiple values as a single value. <A
CLASS="indexterm"
NAME="ch19-idx-4371-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4371-1"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4371-2"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4371-3"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_06.htm"
TITLE="19.6 Form Generation"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.6 Form Generation"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_08.htm"
TITLE="19.8 Creating a Guestbook Program"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.8 Creating a Guestbook Program"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>19.6 Form Generation</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>19.8 Creating a Guestbook Program</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
