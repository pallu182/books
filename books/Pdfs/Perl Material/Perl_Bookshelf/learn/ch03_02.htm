<HTML
><HEAD
>
<TITLE>[Chapter 3] 3.2 Literal Representation</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:32:10Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_01.htm"
TITLE="3. Arrays and List Data"><LINK
REL="prev"
HREF="ch03_01.htm"
TITLE="3.1 What Is a List or Array?"><LINK
REL="next"
HREF="ch03_03.htm"
TITLE="3.3 Variables"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_01.htm"
TITLE="3.1 What Is a List or Array?"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.1 What Is a List or Array?"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. Arrays and List Data"
>Chapter 3<BR>Arrays and List Data</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_03.htm"
TITLE="3.3 Variables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.3 Variables"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch03-28406"
>3.2 Literal Representation</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch03-idx-685404-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-685404-1"
></A
>A <EM
CLASS="emphasis"
>list literal</EM
> (the way you represent the value of a list within your program) consists of <A
CLASS="indexterm"
NAME="ch03-idx-685421-0"
></A
>comma-separated values enclosed in <A
CLASS="indexterm"
NAME="ch03-idx-685422-0"
></A
>parentheses. These values form the elements of the list. For example:</P
><PRE
CLASS="programlisting"
>(1,2,3)             # array of three values 1, 2, and 3
(&quot;fred&quot;,4.5)        # two values, &quot;fred&quot; and 4.5</PRE
><P
CLASS="para"
>The elements of a list are not necessarily constants; they can be <A
CLASS="indexterm"
NAME="ch03-idx-685424-0"
></A
>expressions that will be reevaluated each time the literal is used. For example:</P
><PRE
CLASS="programlisting"
>($a,17);            # two values: the current value of $a, and 17
($b+$c,$d+$e)       # two values</PRE
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch03-idx-685425-0"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-685425-1"
></A
><A
CLASS="indexterm"
NAME="ch03-idx-685425-2"
></A
>empty list (one of no elements) is represented by an empty pair of parentheses:</P
><PRE
CLASS="programlisting"
>() # the empty list (zero elements)</PRE
><P
CLASS="para"
>An item of the list literal can include the <A
CLASS="indexterm"
NAME="ch03-idx-685426-0"
></A
><EM
CLASS="emphasis"
>list constructor operator</EM
>, indicated by two scalar values separated by <A
CLASS="indexterm"
NAME="ch03-idx-685427-0"
></A
>two consecutive periods. This operator creates a list of values starting at the left scalar value up through the right scalar value, incrementing by one each time. For example:</P
><PRE
CLASS="programlisting"
>(1 .. 5)            # same as (1, 2, 3, 4, 5)
(1.2 .. 5.2)        # same as (1.2, 2.2, 3.2, 4.2, 5.2)
(2 .. 6,10,12)      # same as (2,3,4,5,6,10,12)
($a .. $b)          # range determined by current values of $a and $b</PRE
><P
CLASS="para"
>Having the right scalar less than the left scalar results in an empty list; you can't count down by switching the order of the values. If the final value is not a whole number of steps above the initial value, the list stops just before the next value would have been outside the range:</P
><PRE
CLASS="programlisting"
>(1.3 .. 6.1) # same as (1.3,2.3,3.3,4.3,5.3)</PRE
><P
CLASS="para"
>List literals with lots of short text strings start to look pretty noisy with all the quotes and commas:</P
><PRE
CLASS="programlisting"
>@a = (&quot;fred&quot;,&quot;barney&quot;,&quot;betty&quot;,&quot;wilma&quot;); # ugh!</PRE
><P
CLASS="para"
>So there's a shortcut: the "quote word" function, which creates a list from the nonwhitespace parts between the parentheses:[<A
CLASS="footnote"
HREF="#ch03-pgfId-655"
>1</A
>]<PRE
CLASS="programlisting"
>@a = qw(fred barney betty wilma); # better!
@a = qw(
    fred
    barney
    betty
    wilma
);                                # same thing</PRE
></P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch03-pgfId-655"
>[1]</A
> Actually, like the pattern-matching functions we'll learn about later, you could use any nonwhitespace, nonalphanumeric character as the delimiter instead of parentheses.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>One use of a list literal is as arguments to the <A
CLASS="indexterm"
NAME="ch03-idx-685428-0"
></A
><CODE
CLASS="literal"
>print</CODE
> function introduced earlier. Elements of the list are printed out without any intervening whitespace:</P
><PRE
CLASS="programlisting"
>print(&quot;The answer is &quot;,@a,&quot;\n&quot;);</PRE
><P
CLASS="para"
>This statement prints <CODE
CLASS="literal"
>The</CODE
> <CODE
CLASS="literal"
>answer</CODE
> <CODE
CLASS="literal"
>is</CODE
> followed by a space, the value of <CODE
CLASS="literal"
>@a</CODE
>, and a newline. Stay tuned for other uses for list literals.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_01.htm"
TITLE="3.1 What Is a List or Array?"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.1 What Is a List or Array?"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch03_03.htm"
TITLE="3.3 Variables"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.3 Variables"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.1 What Is a List or Array?</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.3 Variables</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
