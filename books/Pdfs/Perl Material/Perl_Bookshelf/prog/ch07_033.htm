<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.2.33 FileHandle&nbsp;- Supply Object Methods for Filehandles</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T02:02:32Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_02.htm"
TITLE="7.2 Library Modules"><LINK
REL="prev"
HREF="ch07_032.htm"
TITLE="7.2.32 FileCache&nbsp;- Keep More Files Open Than the System Permits"><LINK
REL="next"
HREF="ch07_034.htm"
TITLE="7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_032.htm"
TITLE="7.2.32 FileCache&nbsp;- Keep More Files Open Than the System Permits"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.32 FileCache&nbsp;- Keep More Files Open Than the System Permits"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. The Standard Perl Library"
>Chapter 7<BR>The Standard Perl Library</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_034.htm"
TITLE="7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="AUTOID-22538"
>7.2.33 FileHandle&nbsp;- Supply Object Methods for Filehandles</A
></H3
><A
CLASS="indexterm"
NAME="CH07.FILEH1"
></A
><A
CLASS="indexterm"
NAME="CH07.FILEH2"
></A
><A
CLASS="indexterm"
NAME="CH07.FILEH3"
></A
><A
CLASS="indexterm"
NAME="AUTOID-22548"
></A
><PRE
CLASS="programlisting"
>use FileHandle;

$fh = new FileHandle;
if ($fh-&gt;open &quot;&lt; <CODE
CLASS="replaceable"
><I
>file</I
></CODE
>&quot;) {
    print &lt;$fh&gt;;
    $fh-&gt;close;
}

$fh = new FileHandle &quot;&gt; <CODE
CLASS="replaceable"
><I
>file</I
></CODE
>&quot;;
if (defined $fh) {
    print $fh &quot;bar\n&quot;;
    $fh-&gt;close;
}

$fh = new FileHandle &quot;<CODE
CLASS="replaceable"
><I
>file</I
></CODE
>&quot;, &quot;r&quot;;
if (defined $fh) {
    print &lt;$fh&gt;;
    undef $fh;       # automatically closes the file
}

$fh = new FileHandle &quot;<CODE
CLASS="replaceable"
><I
>file</I
></CODE
>&quot;, O_WRONLY|O_APPEND;
if (defined $fh) {
    print $fh &quot;stuff\n&quot;;
    undef $fh;       # automatically closes the file
}

$pos = $fh-&gt;getpos;
$fh-&gt;setpos($pos);

$fh-&gt;setvbuf($buffer_var, _IOLBF, 1024);

($readfh, $writefh) = FileHandle::pipe;

autoflush STDOUT 1;</PRE
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>new</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-22561"
></A
>Creates a FileHandle, which is a reference to a
newly created symbol (see the Symbol library module).  If it receives any
parameters, they are passed to <CODE
CLASS="literal"
>open()</CODE
>.  If the open fails,
the FileHandle object is destroyed.  Otherwise, it is returned to
the caller.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>new_from_fd</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-22569"
></A
>Creates a FileHandle like <CODE
CLASS="literal"
>new()</CODE
> does.
It requires two parameters, which are passed to <CODE
CLASS="literal"
>fdopen()</CODE
>;
if the <CODE
CLASS="literal"
>fdopen()</CODE
> fails, the FileHandle object is destroyed.
Otherwise, it is returned to the caller.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>open</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-22579"
></A
>Accepts one parameter or two.  With one parameter, it is just a front end for
the built-in <A
CLASS="xref"
HREF="ch03_102.htm"
TITLE="open"
><B
CLASS="xref.cmd"
>open</B
></A
> function.  With two
parameters, the first parameter is a filename that may include whitespace or
other special characters, and the second parameter is the open mode in either
Perl form (<CODE
CLASS="literal"
>&quot;&gt;&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;+&lt;&quot;</CODE
>, and so on) or
POSIX form (<CODE
CLASS="literal"
>&quot;w&quot;</CODE
>, <CODE
CLASS="literal"
>&quot;r+&quot;</CODE
>, and so on).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>fdopen</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-22591"
></A
>Like <CODE
CLASS="literal"
>open()</CODE
> except that its first parameter is not a filename
but rather a filehandle name, a FileHandle object, or a file descriptor number.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>getpos</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-22599"
></A
>If the C functions <EM
CLASS="emphasis"
>fgetpos</EM
>(3) and
<EM
CLASS="emphasis"
>fsetpos</EM
>(3) are available, then
<CODE
CLASS="literal"
>getpos()</CODE
> returns an opaque value that represents the current
position of the FileHandle, and <CODE
CLASS="literal"
>setpos()</CODE
> uses that value to
return to a previously visited position.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>setvbuf</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-22610"
></A
>If the C function <EM
CLASS="emphasis"
>setvbuf</EM
>(3) is available, then
<CODE
CLASS="literal"
>setvbuf()</CODE
> sets the buffering policy for the FileHandle.  The
calling sequence for the Perl function is the same as its C counterpart,
including the macros <CODE
CLASS="literal"
>_IOFBF</CODE
>, <CODE
CLASS="literal"
>_IOLBF</CODE
>, and
<CODE
CLASS="literal"
>_IONBF</CODE
>, except that the buffer parameter specifies a scalar
variable to use as a buffer.</P
><BLOCKQUOTE
CLASS="warning"
><P
CLASS="para"
><STRONG
>WARNING:</STRONG
> A variable used as a buffer by <CODE
CLASS="literal"
>setvbuf()</CODE
> must not be
modified in any way until the FileHandle is closed or until
<CODE
CLASS="literal"
>setvbuf()</CODE
> is called again, or memory corruption may
result!</P
></BLOCKQUOTE
></DD
></DL
><P
CLASS="para"
>The following supported FileHandle methods are just front ends for the
corresponding built-in Perl functions:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>clearerr</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>getc</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>close</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>gets</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>eof</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>seek</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>fileno</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>tell</CODE
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>The following supported FileHandle methods correspond to Perl special
variables:</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>autoflush</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>format_page_number</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>format_formfeed</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>format_top_name</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>format_line_break_characters</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>input_line_number</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>format_lines_left</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>input_record_separator</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>format_lines_per_page</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>output_field_separator</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>format_name</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>output_record_separator</CODE
></TD
></TR
></TBODY
></TABLE
><P
CLASS="para"
>Furthermore, for doing normal I/O you might need these methods:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>$fh-&gt;print</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>See Perl's built-in <A
CLASS="xref"
HREF="ch03_110.htm"
TITLE="print"
><B
CLASS="xref.cmd"
>print</B
></A
> function.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>$fh-&gt;printf</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>See Perl's built-in <A
CLASS="xref"
HREF="ch03_111.htm"
TITLE="printf"
><B
CLASS="xref.cmd"
>printf</B
></A
> function.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>$fh-&gt;getline</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>This method works like Perl's <CODE
CLASS="literal"
>&lt;FILEHANDLE&gt;</CODE
> construct,
except that it can be safely called in an
array context, where it still returns just one line.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>$fh-&gt;getlines</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>This method works like Perl's <CODE
CLASS="literal"
>&lt;FILEHANDLE&gt;</CODE
> construct when called in an
array context to read all remaining lines in a file.
It will also <CODE
CLASS="literal"
>croak()</CODE
> if accidentally called in a scalar context.</P
></DD
></DL
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.38"
>7.2.33.1 Bugs</A
></H4
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-22717"
></A
>Due to backward compatibility, all filehandles resemble objects
of class FileHandle, or actually classes derived from that class.
But they aren't.  Which means you can't derive your own
class from FileHandle and inherit those methods.</P
><P
CLASS="para"
>While it may look as though the filehandle methods corresponding
to the built-in variables are unique to a particular
filehandle, currently some of them are not, including the following:</P
><TABLE
CLASS="simplelist"
BORDER="0"
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>input_line_number()</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>input_record_separator()</CODE
></TD
></TR
><TR
><TD
CLASS="member"
><CODE
CLASS="literal"
>output_record_separator()</CODE
></TD
></TR
></TABLE
><A
CLASS="indexterm"
NAME="AUTOID-22728"
></A
><A
CLASS="indexterm"
NAME="AUTOID-22729"
></A
><A
CLASS="indexterm"
NAME="AUTOID-22730"
></A
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_032.htm"
TITLE="7.2.32 FileCache&nbsp;- Keep More Files Open Than the System Permits"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.32 FileCache&nbsp;- Keep More Files Open Than the System Permits"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_034.htm"
TITLE="7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.2.32 FileCache&nbsp;- Keep More Files Open Than the System Permits</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.2.34 GDBM_File&nbsp;- Tied Access to GDBM Library</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
