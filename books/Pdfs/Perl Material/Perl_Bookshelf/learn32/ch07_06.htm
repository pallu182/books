<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.6 The split and join Functions</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl on Win32 Systems"><META
NAME="DC.creator"
CONTENT="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:33:47Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-324-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_01.htm"
TITLE="7. Regular Expressions"><LINK
REL="prev"
HREF="ch07_05.htm"
TITLE="7.5 Substitutions"><LINK
REL="next"
HREF="ch07_07.htm"
TITLE="7.7 Exercises"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl on Win32 Systems"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl on Win32 Systems"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/wsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_05.htm"
TITLE="7.5 Substitutions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.5 Substitutions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. Regular Expressions"
>Chapter 7<BR>Regular Expressions</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_07.htm"
TITLE="7.7 Exercises"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.7 Exercises"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch07-20083"
>7.6 The split and join Functions</A
></H2
><P
CLASS="para"
>Regular expressions can be used to break a string into fields. The <CODE
CLASS="literal"
>split</CODE
> function does this and the <CODE
CLASS="literal"
>join</CODE
> function glues the pieces back together.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-308058"
>7.6.1 The split Function</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch07-idx-308429-0"
></A
><CODE
CLASS="literal"
>split</CODE
> function takes a <A
CLASS="indexterm"
NAME="ch07-idx-308430-0"
></A
>regular expression and a string and looks for all occurrences of the regular expression within that string. The parts of the string that don't match the regular expression are returned in sequence as a list of values. For example, here's something to parse semicolon-separated fields, such as the <CODE
CLASS="literal"
>PATH</CODE
> environment variable:</P
><PRE
CLASS="programlisting"
>$line = &quot;c:\\;;c:\\windows\\;c:\\windows\\system;&quot;;
@fields = split(/;/,$line); # split $line, using ; as delimiter
# now @fields is (&quot;c:\&quot;, &quot;&quot;, &quot;c:\windows&quot;,&quot;c:\windows\system&quot;)</PRE
><P
CLASS="para"
>Note how the empty second field became an empty string. If you don't want this to happen, match all of the <A
CLASS="indexterm"
NAME="ch07-idx-308457-0"
></A
>semicolons in one fell swoop:</P
><PRE
CLASS="programlisting"
>@fields = split(/;+/, $line);</PRE
><P
CLASS="para"
>This matches one or more adjacent semicolons together, so that there is no empty second field.</P
><P
CLASS="para"
>One common string to split is the <A
CLASS="indexterm"
NAME="ch07-idx-307780-0"
></A
><CODE
CLASS="literal"
>$_</CODE
> variable, and that turns out to be the default:</P
><PRE
CLASS="programlisting"
>$_ = &quot;some string&quot;;
@words = split(/ /); # same as @words = split(/ /, $_);</PRE
><P
CLASS="para"
>For this split, consecutive spaces in the string to be split will cause null fields (empty strings) in the result. A better pattern would be <CODE
CLASS="literal"
>/ +/</CODE
>, or ideally <CODE
CLASS="literal"
>/\s+/</CODE
>, which matches one or more whitespace characters together. In fact, this pattern is the default pattern,[<A
CLASS="footnote"
HREF="#ch07-pgfId-731"
>8</A
>] so if you're splitting the <CODE
CLASS="literal"
>$_</CODE
> variable on whitespace, you can use all the defaults and merely say:</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch07-pgfId-731"
>[8]</A
> Actually, the <CODE
CLASS="literal"
>&quot;&quot;</CODE
> string is the default pattern, and this will cause leading whitespace to be ignored, but that's still close enough for this discussion.</P
></DIV
></BLOCKQUOTE
><PRE
CLASS="programlisting"
>@words = split; # same as @words = split(/\s+/, $_);</PRE
><P
CLASS="para"
>Empty trailing fields do not normally become part of the list. This rule is not generally a concern. A solution like this:</P
><PRE
CLASS="programlisting"
>$line = &quot;c:/;c:/windows;c:/windows/system;&quot;;
($first, $second, $third, $fourth) =
   split(/;/,$line); # split $line, using ; as delimiter</PRE
><P
CLASS="para"
>would simply give <CODE
CLASS="literal"
>$fourth</CODE
> a null (<A
CLASS="indexterm"
NAME="ch07-idx-307781-0"
></A
><CODE
CLASS="literal"
>undef</CODE
>) value if the line isn't long enough, or if it contained empty values in the last field. (Extra fields are silently ignored, because list assignment works that way.)</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch07-pgfId-308059"
>7.6.2 The join Function</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch07-idx-307782-0"
></A
><CODE
CLASS="literal"
>join</CODE
> function takes a list of values and glues them together with a glue string between each list element. The function looks like this:</P
><PRE
CLASS="programlisting"
>$bigstring = join($glue,@list);</PRE
><P
CLASS="para"
>For example, to rebuild the <CODE
CLASS="literal"
>PATH</CODE
> line, try something like:</P
><PRE
CLASS="programlisting"
>$outline = join(&quot;;&quot;, @fields);</PRE
><P
CLASS="para"
>Note that the glue string is not a regular expression&nbsp;- just an ordinary string of zero or more characters.</P
><P
CLASS="para"
>If you need to get glue ahead of every item instead of just between items, a simple cheat suffices:</P
><PRE
CLASS="programlisting"
>$result = join(&quot;+&quot;, &quot;&quot;, @fields);</PRE
><P
CLASS="para"
>Here, the extra <CODE
CLASS="literal"
>&quot;&quot;</CODE
> is treated as an empty element, to be glued together with the first data element of <CODE
CLASS="literal"
>@fields</CODE
>. This change results in glue ahead of every element. Similarly, you can get trailing glue with an empty element at the end of the list, like so:</P
><PRE
CLASS="programlisting"
>$output = join (&quot;\n&quot;, @data, &quot;&quot;);</PRE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_05.htm"
TITLE="7.5 Substitutions"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.5 Substitutions"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl on Win32 Systems"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch07_07.htm"
TITLE="7.7 Exercises"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.7 Exercises"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.5 Substitutions</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.7 Exercises</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
