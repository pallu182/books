<HTML
><HEAD
>
<TITLE>[Chapter 8] 8.4 Arguments</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl on Win32 Systems"><META
NAME="DC.creator"
CONTENT="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:33:58Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-324-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch08_01.htm"
TITLE="8. Functions"><LINK
REL="prev"
HREF="ch08_03.htm"
TITLE="8.3 Return Values"><LINK
REL="next"
HREF="ch08_05.htm"
TITLE="8.5 Private Variables in Functions"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl on Win32 Systems"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl on Win32 Systems"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/wsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_03.htm"
TITLE="8.3 Return Values"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.3 Return Values"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch08_01.htm"
TITLE="8. Functions"
>Chapter 8<BR>Functions</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_05.htm"
TITLE="8.5 Private Variables in Functions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.5 Private Variables in Functions"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch08-21480"
>8.4 Arguments</A
></H2
><P
CLASS="para"
>Although subroutines that have one specific action are useful, a whole new level of usefulness becomes available when you can pass <A
CLASS="indexterm"
NAME="ch08-idx-84171-0"
></A
><A
CLASS="indexterm"
NAME="ch08-idx-84171-1"
></A
><EM
CLASS="emphasis"
>arguments</EM
> to a subroutine. In Perl, the subroutine invocation (with the ampersand and the subroutine name) is followed by a list within parentheses, causing the list to be automatically assigned to a special variable named <A
CLASS="indexterm"
NAME="ch08-idx-84172-0"
></A
><CODE
CLASS="literal"
>@_</CODE
> for the duration of the subroutine. The subroutine can access this variable to determine the number of arguments and the value of those arguments. For example:</P
><PRE
CLASS="programlisting"
>sub say_hello_to {
        print &quot;hello, $_[0]!\n&quot;; # first parameter is target
}</PRE
><P
CLASS="para"
>Here, we see a reference to <A
CLASS="indexterm"
NAME="ch08-idx-84173-0"
></A
><CODE
CLASS="literal"
>$_[0]</CODE
>, which is the first element of the <CODE
CLASS="literal"
>@_</CODE
> array. Special note: although similar in appearance, the <CODE
CLASS="literal"
>$_[0]</CODE
> value (the first element of the <CODE
CLASS="literal"
>@_</CODE
> array) has nothing whatsoever to do with the <CODE
CLASS="literal"
>$_</CODE
> variable (a scalar variable of its own). Don't confuse them! The code seems to say hello to whomever we pass as the first parameter. As a result, we can invoke it like this:</P
><PRE
CLASS="programlisting"
>say_hello_to(&quot;world&quot;);                    # gives hello, world!
$x = &quot;somebody&quot;;
say_hello_to($x);                         # gives hello, somebody!
say_hello_to(&quot;me&quot;) + say_hello_to(&quot;you&quot;); # and me and you</PRE
><P
CLASS="para"
>Note that in the last line, the return values weren't really used. But in evaluating the sum, Perl has to evaluate all of its parts, so the subroutine was invoked twice.</P
><P
CLASS="para"
>Here's an example using more than one parameter:</P
><PRE
CLASS="programlisting"
>sub say {
    print &quot;$_[0], $_[1]!\n&quot;;
}

say(&quot;hello&quot;,&quot;world&quot;);         # hello world, once again
say(&quot;goodbye&quot;,&quot;cruel world&quot;); # silent movie lament</PRE
><P
CLASS="para"
>Excess parameters are ignored: if you never look at <CODE
CLASS="literal"
>$_[3]</CODE
>, Perl doesn't care. And insufficient parameters are also ignored; you simply get <CODE
CLASS="literal"
>undef</CODE
> if you look beyond the end of the <CODE
CLASS="literal"
>@_</CODE
> array, as with any other array.</P
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch08-idx-84175-0"
></A
><CODE
CLASS="literal"
>@_</CODE
> variable is <A
CLASS="indexterm"
NAME="ch08-idx-84174-0"
></A
><EM
CLASS="emphasis"
>private</EM
> to the subroutine; if there's a global value for <CODE
CLASS="literal"
>@_</CODE
>, it is saved away before the subroutine is invoked and restored to its previous value upon return from the subroutine. This also means that a subroutine can pass arguments to another subroutine without fear of losing its own <CODE
CLASS="literal"
>@_</CODE
> variable; the nested subroutine invocation gets its own <CODE
CLASS="literal"
>@_</CODE
> in the same way.</P
><P
CLASS="para"
>Let's revisit that "add a and b" routine from the previous section. Here's a subroutine that adds any two values (specifically, the two values passed to the subroutine as parameters):</P
><PRE
CLASS="programlisting"
>sub add_two {
        $_[0] + $_[1];
}
print add_two(3,4); # prints 7
$c = add_two(5,6);  # $c gets 11</PRE
><P
CLASS="para"
>Now let's generalize this subroutine. What if we had 3, 4, or 100 values to add together? We could do it with a loop, as shown:</P
><PRE
CLASS="programlisting"
>sub add {
    $sum = 0;          # initialize the sum
    foreach $_ (@_) {
        $sum += $_;    # add each element
    }
    return $sum;       # the sum of all elements
}
$a = add(4,5,6);       # adds 4+5+6 = 15, and assigns to $a
print add(1,2,3,4,5);  # prints 15
print add(1..5);       # also prints 15, because 1..5 is expanded</PRE
><P
CLASS="para"
>What if we had a variable named <CODE
CLASS="literal"
>$sum</CODE
> when we called <CODE
CLASS="literal"
>add</CODE
>? We just clobbered it. In the next section, we see how to avoid this situation.</P
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_03.htm"
TITLE="8.3 Return Values"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 8.3 Return Values"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl on Win32 Systems"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch08_05.htm"
TITLE="8.5 Private Variables in Functions"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 8.5 Private Variables in Functions"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>8.3 Return Values</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>8.5 Private Variables in Functions</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
