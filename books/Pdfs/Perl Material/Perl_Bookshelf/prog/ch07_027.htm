<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.2.27 File::Basename&nbsp;- Parse File Specifications</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T02:02:22Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_02.htm"
TITLE="7.2 Library Modules"><LINK
REL="prev"
HREF="ch07_026.htm"
TITLE="7.2.26 Fcntl&nbsp;- Load the C fcntl.h Defines"><LINK
REL="next"
HREF="ch07_028.htm"
TITLE="7.2.28 File::CheckTree&nbsp;- Run Many Tests on a Collection of Files"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_026.htm"
TITLE="7.2.26 Fcntl&nbsp;- Load the C fcntl.h Defines"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.26 Fcntl&nbsp;- Load the C fcntl.h Defines"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. The Standard Perl Library"
>Chapter 7<BR>The Standard Perl Library</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_028.htm"
TITLE="7.2.28 File::CheckTree&nbsp;- Run Many Tests on a Collection of Files"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.28 File::CheckTree&nbsp;- Run Many Tests on a Collection of Files"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="AUTOID-22261"
>7.2.27 File::Basename&nbsp;- Parse File Specifications</A
></H3
><PRE
CLASS="programlisting"
>use File::Basename;

($name, $path, $suffix) = fileparse($fullname, @suffixlist)
fileparse_set_fstype($os_string);  # $os_string specifies OS type
$basename = basename($fullname, @suffixlist);
$dirname = dirname($fullname);

($name, $path, $suffix) = fileparse(&quot;lib/File/Basename.pm&quot;, '\.pm');
fileparse_set_fstype(&quot;VMS&quot;);
$basename = basename(&quot;lib/File/Basename.pm&quot;, &quot;.pm&quot;);
$dirname = dirname(&quot;lib/File/Basename.pm&quot;);</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH07.BASE1"
></A
><A
CLASS="indexterm"
NAME="CH07.BASE2"
></A
><A
CLASS="indexterm"
NAME="CH07.BASE3"
></A
>These routines allow you to parse file specifications into useful
pieces using the syntax of different operating systems.</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>fileparse_set_fstype</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-22277"
></A
>You select the syntax via the routine
<CODE
CLASS="literal"
>fileparse_set_fstype()</CODE
>. If the argument passed to it contains
one of the substrings &quot;<CODE
CLASS="literal"
>VMS</CODE
>&quot;,
&quot;<CODE
CLASS="literal"
>MSDOS</CODE
>&quot;, or
&quot;<CODE
CLASS="literal"
>MacOS</CODE
>&quot;, the file specification syntax of that
operating system is used in future calls to <CODE
CLASS="literal"
>fileparse()</CODE
>,
<CODE
CLASS="literal"
>basename()</CODE
>, and <CODE
CLASS="literal"
>dirname()</CODE
>.  If it contains
none of these substrings, UNIX syntax is used.  This pattern matching is
case-insensitive.  If you've selected VMS syntax and the file specification you
pass to one of these routines contains a <CODE
CLASS="literal"
>/</CODE
>, it assumes you
are using UNIX emulation and applies the UNIX syntax rules instead for that
function call only. If you haven't called
<CODE
CLASS="literal"
>fileparse_set_fstype()</CODE
>, the syntax is chosen by
examining the <CODE
CLASS="literal"
>osname</CODE
> entry from the Config package
according to these rules.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>fileparse</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-22294"
></A
>The <CODE
CLASS="literal"
>fileparse()</CODE
> routine divides a file specification into
three parts: a leading <CODE
CLASS="replaceable"
><I
>path</I
></CODE
>, a file
<CODE
CLASS="replaceable"
><I
>name</I
></CODE
>, and a <CODE
CLASS="replaceable"
><I
>suffix</I
></CODE
>.  The
<CODE
CLASS="replaceable"
><I
>path</I
></CODE
> contains everything up to and including the last
directory separator in the input file specification.  The remainder of the input
file specification is then divided into <CODE
CLASS="replaceable"
><I
>name</I
></CODE
> and
<CODE
CLASS="replaceable"
><I
>suffix</I
></CODE
> based on the optional patterns you specify in
<CODE
CLASS="literal"
>@suffixlist</CODE
>.  Each element of this list is interpreted as a
regular expression, and is matched against the end of
<CODE
CLASS="replaceable"
><I
>name</I
></CODE
>.  If this succeeds, the matching portion of
<CODE
CLASS="replaceable"
><I
>name</I
></CODE
> is removed and prepended to
<CODE
CLASS="replaceable"
><I
>suffix</I
></CODE
>.  By proper use of
<CODE
CLASS="literal"
>@suffixlist</CODE
>, you can remove file types or versions for
examination.  You are guaranteed that if you concatenate
<CODE
CLASS="replaceable"
><I
>path</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>name</I
></CODE
>, and
<CODE
CLASS="replaceable"
><I
>suffix</I
></CODE
> together in that order, the result will be
identical to the input file specification.  Using UNIX file syntax:</P
><PRE
CLASS="programlisting"
>($name, $path, $suffix) = fileparse('/virgil/aeneid/draft.book7',
                                                  '\.book\d+');</PRE
><P
CLASS="para"
>would yield:</P
><PRE
CLASS="programlisting"
>$name   eq 'draft'
$path   eq '/virgil/aeneid',
$suffix eq '.book7'</PRE
><P
CLASS="para"
>(Note that the suffix pattern is in single quotes.  You'd have to double the
backslashes if you used double quotes, since double quotes do backslash
interpretation.)
Similarly, using VMS syntax:</P
><PRE
CLASS="programlisting"
>($name, $path, $suffix) = fileparse('Doc_Root:[Help]Rhetoric.Rnh', '\..*');</PRE
><P
CLASS="para"
>would yield:</P
><PRE
CLASS="programlisting"
>$name   eq 'Rhetoric'
$path   eq 'Doc_Root:[Help]'
$suffix eq '.Rnh'</PRE
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>basename</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The <CODE
CLASS="literal"
>basename()</CODE
> routine returns the first element of the list produced
by calling <CODE
CLASS="literal"
>fileparse()</CODE
> with the same arguments.  It is provided for
compatibility with the UNIX shell command <EM
CLASS="emphasis"
>basename</EM
>(1).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>dirname</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-22331"
></A
>The <CODE
CLASS="literal"
>dirname()</CODE
> routine returns the directory portion of the input file
specification.  When using VMS or MacOS syntax, this is identical to the
second element of the list produced by calling <CODE
CLASS="literal"
>fileparse()</CODE
> with the same
input file specification.  When using UNIX or MS-DOS syntax, the return
value conforms to the behavior of the UNIX shell command <EM
CLASS="emphasis"
>dirname</EM
>(1).  This
is usually the same as the behavior of <CODE
CLASS="literal"
>fileparse()</CODE
>, but differs in some
cases.  For example, for the input file specification <CODE
CLASS="literal"
>lib/</CODE
>,
<CODE
CLASS="literal"
>fileparse()</CODE
>
considers the directory name to be <EM
CLASS="emphasis"
>lib/</EM
>, while <CODE
CLASS="literal"
>dirname()</CODE
> considers
the directory name to be <B
CLASS="emphasis.bold"
>.</B
> (dot).</P
></DD
></DL
><A
CLASS="indexterm"
NAME="AUTOID-22342"
></A
><A
CLASS="indexterm"
NAME="AUTOID-22343"
></A
><A
CLASS="indexterm"
NAME="AUTOID-22344"
></A
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_026.htm"
TITLE="7.2.26 Fcntl&nbsp;- Load the C fcntl.h Defines"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.26 Fcntl&nbsp;- Load the C fcntl.h Defines"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_028.htm"
TITLE="7.2.28 File::CheckTree&nbsp;- Run Many Tests on a Collection of Files"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.28 File::CheckTree&nbsp;- Run Many Tests on a Collection of Files"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.2.26 Fcntl&nbsp;- Load the C fcntl.h Defines</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.2.28 File::CheckTree&nbsp;- Run Many Tests on a Collection of Files</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
