<HTML
><HEAD
>
<TITLE>[Chapter 19] 19.10 Perl and the Web: Beyond CGI Programming</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:36:35Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch19_01.htm"
TITLE="19. CGI Programming"><LINK
REL="prev"
HREF="ch19_09.htm"
TITLE="19.9 Troubleshooting CGI Programs"><LINK
REL="next"
HREF="ch19_11.htm"
TITLE="19.11 Further Reading"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_09.htm"
TITLE="19.9 Troubleshooting CGI Programs"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.9 Troubleshooting CGI Programs"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch19_01.htm"
TITLE="19. CGI Programming"
>Chapter 19<BR>CGI Programming</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_11.htm"
TITLE="19.11 Further Reading"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.11 Further Reading"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch19-24952"
>19.10 Perl and the Web: Beyond CGI Programming</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-4421-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4421-1"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4421-2"
></A
>Perl is used for much more than CGI programming. Other uses include logfile analysis, cookie and password management, clickable images, and image manipulation.[<A
CLASS="footnote"
HREF="#ch19-pgfId-1394"
>15</A
>] And that's still just the tip of the iceberg. </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch19-pgfId-1394"
>[15]</A
> See the GD.pm module on CPAN for a Perl interface to Thomas Boutell's gd graphics library. </P
></DIV
></BLOCKQUOTE
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch19-pgfId-452"
>19.10.1 Custom Publishing Systems</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-4422-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4422-1"
></A
>Commercial web publishing systems may make easy things easy, especially for nonprogrammers, but they just aren't infinitely flexible the way a real programming language is. Without source code, you're locked into someone else's design decisions: if something doesn't work quite the way you want it to, you can't fix it. No matter how many whiz-bang programs become available for the consumer to purchase, a programmer will always be needed for those special jobs that don't quite fit the mold. And of course someone has to write the publishing software in the first place. </P
><P
CLASS="para"
>Perl is great for creating custom publishing systems tailored to your unique needs. It's easy to convert raw data into zillions of HTML pages en masse. Sites all over the Web use Perl to generate and maintain their entire web site. <EM
CLASS="emphasis"
>The Perl Journal</EM
> (<A
CLASS="systemitem.url"
HREF="http://www.tpj.com"
>www.tpj.com</A
>) uses Perl to generate all its pages. The Perl Language Home Page (<A
CLASS="systemitem.url"
HREF="http://www.perl.com"
>www.perl.com</A
>) has nearly 10,000 web pages all automatically maintained and updated by various Perl programs. </P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch19-pgfId-458"
>19.10.2 Embedded Perl</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-4423-0"
></A
>The fastest, cheapest (it's hard to get any cheaper than free), and most popular web server on the Net, Apache, can run with Perl embedded inside it using the <A
CLASS="indexterm"
NAME="ch19-idx-4424-0"
></A
>mod_perl module from CPAN. With mod_perl, Perl becomes the extension language for your web server. You can write little Perl snippets to handle authorization requests, error handling, logging, and anything else you can think of. These don't require a new process because Perl is now built-in to the web server. Even more appealing for many is that under Apache you don't have to fire off a whole new process each time a CGI request comes in. Instead, a new thread executes a precompiled Perl program. This speeds up your CGI programs significantly; typically it's the <CODE
CLASS="literal"
>fork/exec</CODE
> overhead that slows you down, not the size of the program itself. </P
><P
CLASS="para"
>Another strategy for speeding up CGI execution is through the standard <A
CLASS="indexterm"
NAME="ch19-idx-4425-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4425-1"
></A
>CGI::Fast module. Unlike the embedded Perl interpreter described above, this approach doesn't require the Apache web server. See the CGI::Fast module's manpage for more details about this. </P
><P
CLASS="para"
>If you're running a web server under WindowsNT, you should definitely check out the <A
CLASS="indexterm"
NAME="ch19-idx-4426-0"
></A
>ActiveWare site, <A
CLASS="systemitem.url"
HREF="http://www.activeware.com"
>www.activeware.com</A
>. Not only do they have prebuilt binaries of Perl for Windows platforms,[<A
CLASS="footnote"
HREF="#ch19-pgfId-1408"
>16</A
>] they also provide PerlScript and PerlIS. PerlScript is an ActiveX scripting engine that lets you embed Perl code in your web pages as you would with JavaScript or VBScript. PerlIS is an ISAPI DLL that runs Perl scripts directly from IIS and other ISAPI compliant web servers, providing significant performance benefits. </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch19-pgfId-1408"
>[16]</A
> As of release 5.004, the standard distribution of Perl builds under Windows, assuming you have a C compiler, that is. </P
></DIV
></BLOCKQUOTE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch19-pgfId-470"
>19.10.3 Web Automation with LWP</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch19-idx-4427-0"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4427-1"
></A
><A
CLASS="indexterm"
NAME="ch19-idx-4427-2"
></A
>Have you ever wanted to check a web document for dead links, find its title, or figure out which of its links have been updated since last Thursday? Or wanted to download the images contained within a document or mirror an entire directory full of documents? What happens if you have to go through a proxy server or server redirects? </P
><P
CLASS="para"
>Now, you <EM
CLASS="emphasis"
>could</EM
> do these things by hand using your browser. But because graphical interfaces are woefully inadequate for programmatic automation, this would be a slow and tedious process requiring more patience and less laziness[<A
CLASS="footnote"
HREF="#ch19-pgfId-1421"
>17</A
>] than most of us tend to possess. </P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch19-pgfId-1421"
>[17]</A
> Remember that according to Larry Wall, the three principal virtues of a programmer are Laziness, Impatience, and Hubris. </P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>The LWP ("Library for WWW access in Perl") modules from CPAN do all this for you and more. For example, fetching a document from the Web in a script is so easy using these modules that you can write it as a one-liner. For example, to get the <A
CLASS="systemitem.url"
HREF="http://www.perl.com/perl/index.html"
>/perl/index.html</A
> document from <A
CLASS="systemitem.url"
HREF="http://www.perl.com"
>www.perl.com</A
>, just type this into your shell or command interpreter: </P
><PRE
CLASS="programlisting"
>perl -MLWP::Simple -e &quot;getprint 'http://www.perl.com/perl/index.html'&quot;</PRE
><P
CLASS="para"
>Apart from the LWP::<A
CLASS="indexterm"
NAME="ch19-idx-4428-0"
></A
>Simple module, most of the modules included in the LWP suite are strongly object-oriented. For example, here's a tiny program that takes URLs as arguments and produces their titles: </P
><PRE
CLASS="programlisting"
>#!/usr/bin/perl
use LWP;
$browser = LWP::UserAgent-&gt;new(); # create virtual browser
$browser-&gt;agent(&quot;Mothra/126-Paladium&quot;); # give it a name
foreach $url (@ARGV) { # expect URLs as args
    # make a GET request on the URL via fake browser
    $webdoc = $browser-&gt;request(HTTP::Request-&gt;new(GET =&gt; $url));
    if ($webdoc-&gt;is_success) { # found it
    print STDOUT &quot;$url: &quot;, $webdoc-&gt;title, &quot;\n&quot;;
    } else { # something went wrong
    print STDERR &quot;$0: Couldn't fetch $url\n&quot;;
    }
}</PRE
><P
CLASS="para"
>As you see, familiarity with Perl's objects is important. But just as with the CGI.pm module, the LWP modules hide most of the complexity. </P
><P
CLASS="para"
>This script works as follows: first create a user agent object, something like an automated, virtual browser. This object is used to make requests to remote servers. Give our virtual browser a silly name just to make people's logfiles more interesting. Then pull in the remote document by making an HTTP GET request to the remote server. If the result is successful, print out the URL and its title; otherwise, complain a bit. </P
><P
CLASS="para"
>Here's a program that prints out a sorted list of unique links and images contained in URLs passed as command-line arguments: </P
><PRE
CLASS="programlisting"
>#!/usr/bin/perl -w
use strict;
use LWP 5.000;
use URI::URL;
use HTML::LinkExtor;

my($url, $browser, %saw);
$browser = LWP::UserAgent-&gt;new(); # make fake browser
foreach $url ( @ARGV ) {
    # fetch the document via fake browser
    my $webdoc = $browser-&gt;request(HTTP::Request-&gt;new(GET =&gt; $url));
    next unless $webdoc-&gt;is_success;
    next unless $webdoc-&gt;content_type eq 'text/html'; 
                                                 # can't parse gifs

    my $base = $webdoc-&gt;base;

    # now extract all links of type &lt;A ...&gt; and &lt;IMG ...&gt;
    foreach (HTML::LinkExtor-&gt;new-&gt;parse($webdoc-&gt;content)-&gt;eof-&gt;
                                                   links) {
        my($tag, %links) = @$_;
        next unless $tag eq &quot;a&quot; or $tag eq &quot;img&quot;;
        my $link;
        foreach $link (values %links) {
            $saw{ url($link,$base)-&gt;abs-&gt;as_string }++;
        }
    }
}
print join(&quot;\n&quot;, sort keys %saw), &quot;\n&quot;;</PRE
><P
CLASS="para"
>This looks pretty complicated, but most of the complexity lies in understanding how the various objects and their methods work. We aren't going to explain all these here, because this book is long enough already. Fortunately, LWP comes with extensive documentation and examples. <A
CLASS="indexterm"
NAME="ch19-idx-4429-0"
></A
></P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_09.htm"
TITLE="19.9 Troubleshooting CGI Programs"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 19.9 Troubleshooting CGI Programs"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch19_11.htm"
TITLE="19.11 Further Reading"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 19.11 Further Reading"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>19.9 Troubleshooting CGI Programs</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>19.11 Further Reading</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
