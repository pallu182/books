<HTML
><HEAD
>
<TITLE>[Chapter 16] System Database Access</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:35:33Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="index.htm"
TITLE="Learning Perl"><LINK
REL="prev"
HREF="ch15_06.htm"
TITLE="15.6 Exercises"><LINK
REL="next"
HREF="ch16_02.htm"
TITLE="16.2 Packing and Unpacking Binary Data"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_06.htm"
TITLE="15.6 Exercises"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.6 Exercises"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
>Chapter 16</FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_02.htm"
TITLE="16.2 Packing and Unpacking Binary Data"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.2 Packing and Unpacking Binary Data"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="chapter"
><H1
CLASS="chapter"
><A
CLASS="title"
NAME="ch16-11128"
>16. System Database Access</A
></H1
><DIV
CLASS="htmltoc"
><P
><B
>Contents:</B
><BR><A
CLASS="sect1"
HREF="#ch16-16248"
TITLE="16.1 Getting Password and Group Information"
>Getting Password and Group Information</A
><BR><A
CLASS="sect1"
HREF="ch16_02.htm"
TITLE="16.2 Packing and Unpacking Binary Data"
>Packing and Unpacking Binary Data</A
><BR><A
CLASS="sect1"
HREF="ch16_03.htm"
TITLE="16.3 Getting Network Information"
>Getting Network Information</A
><BR><A
CLASS="sect1"
HREF="ch16_04.htm"
TITLE="16.4 Exercise"
>Exercise</A
></P
><P
></P
></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch16-16248"
>16.1 Getting Password and Group Information</A
></H2
><P
CLASS="para"
>The information that the UNIX system keeps about your <A
CLASS="indexterm"
NAME="ch16-idx-647652-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-647652-1"
></A
>username and user ID is fairly public. In fact, nearly everything but your unencrypted password is available for perusal by any program that cares to scan the <A
CLASS="indexterm"
NAME="ch16-idx-647651-0"
></A
><EM
CLASS="emphasis"
>/etc/passwd</EM
> file. This file has a particular format, defined in <EM
CLASS="emphasis"
>passwd</EM
> (5), which looks something like this:</P
><PRE
CLASS="programlisting"
>name:passwd:uid:gid:gcos:dir:shell</PRE
><P
CLASS="para"
>The fields are defined as follows:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>name</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The login name of the user</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>passwd</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The encrypted password, or something simple if a shadow password file is being used</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>uid</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The user ID number (0 for <CODE
CLASS="literal"
>root</CODE
>, nonzero for normal users)</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>gid</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The default login group (group 0 may be privileged, but not necessarily)</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>gcos</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch16-idx-647653-0"
></A
>GCOS field, which typically contains the user's full name followed by a comma and some other information</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>dir</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch16-idx-647654-0"
></A
>home directory (where you go when you type <EM
CLASS="emphasis"
>cd</EM
> without any arguments and where most of your "dot-files" are kept) </P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>shell</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Your login shell, typically <EM
CLASS="emphasis"
>/bin/sh</EM
> or <EM
CLASS="emphasis"
>/bin/csh</EM
> (or maybe even <EM
CLASS="emphasis"
>/usr/bin/perl</EM
>, if you're crazy)</P
></DD
></DL
><P
CLASS="para"
>A typical portion of the password file looks like this:</P
><PRE
CLASS="programlisting"
>fred:*:123:15:Fred Flintstone,,,:/home/fred:/bin/csh
barney:*:125:15:Barney Rubble,,,:/home/barney:/bin/csh</PRE
><P
CLASS="para"
>Now, Perl has enough tools to parse this kind of line easily (using <CODE
CLASS="literal"
>split</CODE
>, for example), without drawing on special purpose routines. But the UNIX programing library does have a set of special routines: <EM
CLASS="emphasis"
>getpwent </EM
>(3), <EM
CLASS="emphasis"
>getpwuid </EM
>(3), <EM
CLASS="emphasis"
>getpwnam </EM
>(3), and so on. These routines are available in Perl using the same names and similar arguments and return values.</P
><P
CLASS="para"
>For example, the <EM
CLASS="emphasis"
>getpwnam</EM
> routine becomes the Perl <A
CLASS="indexterm"
NAME="ch16-idx-647655-0"
></A
><CODE
CLASS="literal"
>getpwnam </CODE
>function. The single argument is a username (like <CODE
CLASS="literal"
>fred</CODE
> or <CODE
CLASS="literal"
>barney</CODE
>), and the return value is the <EM
CLASS="emphasis"
>/etc/passwd</EM
> line split apart into a list with the following values:</P
><PRE
CLASS="programlisting"
>($name, $passwd, $uid, $gid, $quota, $comment, 
 $gcos, $dir, $shell)</PRE
><P
CLASS="para"
>Note that there are few more values here than in the password file. For every UNIX system we've seen, the <CODE
CLASS="literal"
>$quota</CODE
> field is always empty, and the <CODE
CLASS="literal"
>$comment</CODE
> and the <CODE
CLASS="literal"
>$gcos</CODE
> field often both contain the entire GCOS field. So, for good old <CODE
CLASS="literal"
>fred</CODE
>, you get</P
><PRE
CLASS="programlisting"
>(&quot;fred&quot;, &quot;*&quot;, 123, 15, &quot;&quot;, &quot;Fred Flintstone,,,&quot;,
 &quot;Fred Flintstone,,,&quot;, &quot;/home/fred&quot;,&quot; /bin/csh&quot;)</PRE
><P
CLASS="para"
>by invoking either of the following two calls:</P
><PRE
CLASS="programlisting"
>getpwuid(123)
getpwnam(&quot;fred&quot;)</PRE
><P
CLASS="para"
>Note that <A
CLASS="indexterm"
NAME="ch16-idx-647656-0"
></A
><CODE
CLASS="literal"
>getpwuid</CODE
> takes a UID number, while <CODE
CLASS="literal"
>getpwnam</CODE
> takes the login name as its argument.</P
><P
CLASS="para"
>The <CODE
CLASS="literal"
>getpwnam</CODE
> and <CODE
CLASS="literal"
>getpwuid</CODE
> functions also have a return value when called in a scalar sense. They each return the thing you've asked them to get. For example:</P
><PRE
CLASS="programlisting"
>$idnum = getpwuid(&quot;daemon&quot;);
$login = getpwnam(25);</PRE
><P
CLASS="para"
>You'll probably want to pick this apart, using some of the list operations that we've seen before. One way is to grab a part of the list using a list slice, such as getting just the home directory for Fred using:</P
><PRE
CLASS="programlisting"
>($fred_home) = (getpwnam (&quot;fred&quot;))[7]; # put Fred's home</PRE
><P
CLASS="para"
>How would you scan through the entire password file? Well, you could do something like this:</P
><PRE
CLASS="programlisting"
>for($id = 0; $id &lt;= 10_000; $id++)     {
    @stuff = getpwuid $id;
} ### not recommended!</PRE
><P
CLASS="para"
>But this is probably the wrong way to go. Just because there's more than one way to do it doesn't mean that all ways are equally cool.</P
><P
CLASS="para"
>You can think of the <CODE
CLASS="literal"
>getpwuid</CODE
> and <CODE
CLASS="literal"
>getpwnam</CODE
> functions as <A
CLASS="indexterm"
NAME="ch16-idx-647661-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-647661-1"
></A
><EM
CLASS="emphasis"
>random access</EM
>; they grab a specific entry by key, so you have to have a key to start with. Another way of accessing the password file is <A
CLASS="indexterm"
NAME="ch16-idx-647662-0"
></A
><A
CLASS="indexterm"
NAME="ch16-idx-647662-1"
></A
><EM
CLASS="emphasis"
>sequential access</EM
>&nbsp;- grabbing each entry one at a time.</P
><P
CLASS="para"
>The sequential access routines for the password file are the <A
CLASS="indexterm"
NAME="ch16-idx-647658-0"
></A
><CODE
CLASS="literal"
>setpwent</CODE
>, <CODE
CLASS="literal"
>getpwent</CODE
><A
CLASS="indexterm"
NAME="ch16-idx-647659-0"
></A
>, and <A
CLASS="indexterm"
NAME="ch16-idx-647660-0"
></A
><CODE
CLASS="literal"
>endpwent</CODE
> functions. Together, these three functions perform a sequential pass over all values in the password file. The <CODE
CLASS="literal"
>setpwent</CODE
> function initializes the scan at the beginning. After initialization, each call to <CODE
CLASS="literal"
>getpwent</CODE
> returns the next entry from the password file. When there is no more data to process, <CODE
CLASS="literal"
>getpwent</CODE
> returns an <A
CLASS="indexterm"
NAME="ch16-idx-647663-0"
></A
>empty list. Finally, calling <CODE
CLASS="literal"
>endpwent</CODE
> frees the resources used by the scanner; this is performed automatically upon exiting the program as well.</P
><P
CLASS="para"
>This description begs for an example, so here's one now:</P
><PRE
CLASS="programlisting"
>setpwent();                                  # initialize the scan
while (@list = getpwent()) {                 # fetch the next entry
    ($login,$home) = <A
CLASS="indexterm"
NAME="ch16-idx-647692-0"
></A
>@list[0,7];             # grab login name and home
    print &quot;Home directory for $login is $home\n&quot;; # say so
}
endpwent();                                  # all done</PRE
><P
CLASS="para"
>This example shows the <A
CLASS="indexterm"
NAME="ch16-idx-647664-0"
></A
>home directory of everyone in the password file. Suppose you wanted them alphabetically by home directory? We learned about <A
CLASS="indexterm"
NAME="ch16-idx-647665-0"
></A
><CODE
CLASS="literal"
>sort</CODE
> in the previous chapter, so let's use it:</P
><PRE
CLASS="programlisting"
>setpwent();                      # initialize the scan
while (@list = getpwent()) {     # fetch the next entry
    ($login,$home) = @list[0,7]; # grab login name and home
    $home{$login} = $home;       # save it away
}
endpwent();                      # all done
@keys = sort { $home{$a} cmp $home{$b} } keys %home;
foreach $login (@keys) {         # step through the sorted names
    print &quot;home of $login is $home{$login}\n&quot;;
}</PRE
><P
CLASS="para"
>This fragment, while a little longer, illustrates an important thing about scanning sequentially through the password file; you can save away the pertinent portions of the data in data structures of your choice. The first part of the example scans through the entire password file, creating a hash where the key is the login name and the value is the corresponding home directory for that login name. The <CODE
CLASS="literal"
>sort</CODE
> line takes the keys of the hash and sorts them according to string value. The final loop steps through the sorted keys, printing each value in turn.</P
><P
CLASS="para"
>Generally, you should use the random access routines (<CODE
CLASS="literal"
>getpwuid</CODE
> and <CODE
CLASS="literal"
>getpwnam</CODE
>) when you are looking up just a few values. For more than a few values, or even an exhaustive search, it's generally easier to do a sequential access pass (using <CODE
CLASS="literal"
>setpwent</CODE
>, <CODE
CLASS="literal"
>getpwent</CODE
>, and <CODE
CLASS="literal"
>endpwent</CODE
>) and extract the particular values you'll be looking for into a hash.[<A
CLASS="footnote"
HREF="#ch16-pgfId-647946"
>1</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch16-pgfId-647946"
>[1]</A
> If you're on a site with a large NIS map, you probably do not want to preprocess the password file this way for performance reasons.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch16-idx-647666-0"
></A
><EM
CLASS="emphasis"
>/etc/group</EM
> file is accessed in a similar way. Sequential access is provided with the <A
CLASS="indexterm"
NAME="ch16-idx-647667-0"
></A
><CODE
CLASS="literal"
>setgrent</CODE
>, <CODE
CLASS="literal"
>getgrent</CODE
><A
CLASS="indexterm"
NAME="ch16-idx-647668-0"
></A
>, and <A
CLASS="indexterm"
NAME="ch16-idx-647669-0"
></A
><CODE
CLASS="literal"
>endgrent</CODE
> calls. The <CODE
CLASS="literal"
>getgrent</CODE
> call returns values of the form:</P
><PRE
CLASS="programlisting"
>($name, $passwd, $gid, $members)</PRE
><P
CLASS="para"
>These four values correspond roughly to the four fields of the <EM
CLASS="emphasis"
>/etc/group</EM
> file, so see the descriptions in the manpages about this file format for details. The corresponding random access functions are <A
CLASS="indexterm"
NAME="ch16-idx-647670-0"
></A
><CODE
CLASS="literal"
>getgrgid</CODE
> (by group ID) and <A
CLASS="indexterm"
NAME="ch16-idx-647671-0"
></A
><CODE
CLASS="literal"
>getgrnam</CODE
> (by group name).</P
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch15_06.htm"
TITLE="15.6 Exercises"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 15.6 Exercises"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch16_02.htm"
TITLE="16.2 Packing and Unpacking Binary Data"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 16.2 Packing and Unpacking Binary Data"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>15.6 Exercises</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>16.2 Packing and Unpacking Binary Data</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
