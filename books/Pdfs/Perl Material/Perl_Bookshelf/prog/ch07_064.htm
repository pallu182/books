<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.2.64 Term::Cap&nbsp;- Terminal Capabilities Interface</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T02:04:20Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_02.htm"
TITLE="7.2 Library Modules"><LINK
REL="prev"
HREF="ch07_063.htm"
TITLE="7.2.63 Sys::Syslog&nbsp;- Perl Interface to UNIX syslog(3) Calls"><LINK
REL="next"
HREF="ch07_065.htm"
TITLE="7.2.65 Term::Complete&nbsp;- Word Completion Module"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_063.htm"
TITLE="7.2.63 Sys::Syslog&nbsp;- Perl Interface to UNIX syslog(3) Calls"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.63 Sys::Syslog&nbsp;- Perl Interface to UNIX syslog(3) Calls"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. The Standard Perl Library"
>Chapter 7<BR>The Standard Perl Library</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_065.htm"
TITLE="7.2.65 Term::Complete&nbsp;- Word Completion Module"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.65 Term::Complete&nbsp;- Word Completion Module"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="AUTOID-26970"
>7.2.64 Term::Cap&nbsp;- Terminal Capabilities Interface</A
></H3
><PRE
CLASS="programlisting"
>require Term::Cap;

$terminal = Tgetent Term::Cap { TERM =&gt; undef, OSPEED =&gt; $ospeed };
$terminal-&gt;Trequire(qw/ce ku kd/);
$terminal-&gt;Tgoto('cm', $col, $row, $FH);
$terminal-&gt;Tputs('dl', $count, $FH);</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH07.TERM1"
></A
><A
CLASS="indexterm"
NAME="CH07.TERM2"
></A
><A
CLASS="indexterm"
NAME="CH07.TERM3"
></A
><A
CLASS="indexterm"
NAME="AUTOID-26980"
></A
>These are low-level functions to extract and use capabilities from
a terminal capability (termcap) database.  For general information about
the use of this database, see the <EM
CLASS="emphasis"
>termcap</EM
>(5) manpage.</P
><P
CLASS="para"
>The &quot;<CODE
CLASS="literal"
>new</CODE
>&quot; function of Term::Cap is
<CODE
CLASS="literal"
>Tgetent()</CODE
>, which extracts the termcap entry for the specified
terminal type and returns a reference to a terminal object.  If the value
associated with the <CODE
CLASS="literal"
>TERM</CODE
> key in the
<CODE
CLASS="literal"
>Tgetent()</CODE
> argument list is false or undefined, then it
defaults to the environment variable <CODE
CLASS="literal"
>TERM</CODE
>.</P
><P
CLASS="para"
><CODE
CLASS="literal"
>Tgetent()</CODE
> looks in the environment for a <CODE
CLASS="literal"
>TERMCAP</CODE
> variable.
If it finds one, and if the value does not begin with a slash and looks
like a termcap entry in which the terminal type name is the same as the
environment string <CODE
CLASS="literal"
>TERM</CODE
>, then the <CODE
CLASS="literal"
>TERMCAP</CODE
> string is used
directly as the termcap entry and there is no search for an entry in a termcap
file somewhere.</P
><P
CLASS="para"
>Otherwise, <CODE
CLASS="literal"
>Tgetent()</CODE
> looks in a sequence of files for the
termcap entry.  The sequence consists of the filename in
<CODE
CLASS="literal"
>TERMCAP</CODE
>, if any, followed by either the files listed in the
<CODE
CLASS="literal"
>TERMPATH</CODE
> environment variable, if any, or otherwise the files
<EM
CLASS="emphasis"
>$HOME/.termcap</EM
>, <EM
CLASS="emphasis"
>/etc/termcap</EM
>, and
<EM
CLASS="emphasis"
>/usr/share/misc/termcap</EM
>, in that order.  (Filenames in
<CODE
CLASS="literal"
>TERMPATH</CODE
> may be separated by either a colon or a space.)
Whenever multiple files are searched and a <CODE
CLASS="literal"
>tc</CODE
> field occurs in
the requested entry, the entry named in the <CODE
CLASS="literal"
>tc</CODE
> field must be
found in the same file or one of the succeeding files.  If there is a
<CODE
CLASS="literal"
>tc</CODE
> field in the <CODE
CLASS="literal"
>TERMCAP</CODE
> environment
variable string, <CODE
CLASS="literal"
>Tgetent()</CODE
> continues searching as indicated
above.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-27008"
></A
><CODE
CLASS="literal"
>OSPEED</CODE
> is the terminal output bit rate (often mistakenly
called the baud rate).  <CODE
CLASS="literal"
>OSPEED</CODE
> can be specified as either a
POSIX termios/SYSV termio speed (where 9600 equals 9600) or an old BSD-style
speed (where 13 equals 9600).  See the next section, &quot;Getting Terminal Output
Speed&quot;, for code illustrating how to obtain the output speed.</P
><P
CLASS="para"
><CODE
CLASS="literal"
>Tgetent()</CODE
> returns a reference to a blessed object
(<CODE
CLASS="literal"
>$terminal</CODE
> in the examples above).  The actual termcap entry
is available as <CODE
CLASS="literal"
>$terminal-&gt;{TERMCAP}</CODE
>.  Failure to find an
appropriate termcap entry results in a call to <CODE
CLASS="literal"
>Carp::croak()</CODE
>.</P
><P
CLASS="para"
>Once you have invoked <CODE
CLASS="literal"
>Tgetent()</CODE
>, you can manage a terminal by
sending control strings to it with <CODE
CLASS="literal"
>Tgoto()</CODE
> and
<CODE
CLASS="literal"
>Tputs()</CODE
>.  You can also test for the existence of particular
terminal capabilities with <CODE
CLASS="literal"
>Trequire()</CODE
>.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-27024"
></A
><CODE
CLASS="literal"
>Trequire()</CODE
> checks to see whether the named capabilities have been
specified in the terminal's termcap entry.  For example, this line:</P
><PRE
CLASS="programlisting"
>$terminal-&gt;Trequire(qw/ce ku kd/);</PRE
><P
CLASS="para"
>checks whether the <CODE
CLASS="literal"
>ce</CODE
> (clear to end of line), <CODE
CLASS="literal"
>ku</CODE
>
(keypad up-arrow), and <CODE
CLASS="literal"
>kd</CODE
> (keypad down-arrow) capabilities have
been defined.  Any undefined capabilities will result in a listing of
those capabilities and a call to <CODE
CLASS="literal"
>Carp::croak()</CODE
>.</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-27034"
></A
><CODE
CLASS="literal"
>Tgoto()</CODE
> produces a control string to move the cursor relative to
the screen.  For example, to move the cursor to the fifth line and
forty-fifth column on the screen, you can say:</P
><PRE
CLASS="programlisting"
>$row = 5; $col = 45;
$terminal-&gt;Tgoto('cm', $row, $col, STDOUT);</PRE
><P
CLASS="para"
>The first argument in this call must always be <CODE
CLASS="literal"
>cm</CODE
>.  If a file
handle is given as the final argument, then <CODE
CLASS="literal"
>Tgoto()</CODE
> sends
the appropriate control string to that handle.  With or without a handle,
the routine returns the control string, so you could achieve the same
effect this way:</P
><PRE
CLASS="programlisting"
>$str = $terminal-&gt;Tgoto('cm', $row, $col);
print STDOUT $str;</PRE
><P
CLASS="para"
><CODE
CLASS="literal"
>Tgoto()</CODE
> performs the necessary % interpolation on the control
strings.  (See the <EM
CLASS="emphasis"
>termcap</EM
>(5) manpage for details.)</P
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="AUTOID-27046"
></A
>The <CODE
CLASS="literal"
>Tputs()</CODE
> routine allows you to exercise other terminal
capabilities.  For example, the following code deletes one line at the cursor's
present position, and then turns on the bold text attribute:</P
><PRE
CLASS="programlisting"
>$count = 1;
$terminal-&gt;Tputs('dl', $count, $FILEHANDLE);  # delete one line
$terminal-&gt;Tputs('md', $count, $FILEHANDLE);  # turn on bold attribute</PRE
><P
CLASS="para"
>Again, <CODE
CLASS="literal"
>Tputs()</CODE
> returns the terminal control string, and the file
handle can be omitted.  The <CODE
CLASS="literal"
>$count</CODE
> for such calls should normally be
<CODE
CLASS="literal"
>1</CODE
>, unless padding is required.  (Padding involves the output of
&quot;no-op&quot; characters in order to effect a delay required by the terminal
device.  It is most commonly required for hardcopy devices.)  A count
greater than <CODE
CLASS="literal"
>1</CODE
> is taken to specify the amount of padding.
See the <EM
CLASS="emphasis"
>termcap</EM
>(5) manpage for more about padding.</P
><P
CLASS="para"
><CODE
CLASS="literal"
>Tputs()</CODE
> does <EM
CLASS="emphasis"
>not</EM
> perform % interpolation.  This means that the following will not work:</P
><PRE
CLASS="programlisting"
>$terminal-&gt;Tputs('DC', 1, $FILEHANDLE);  # delete one character (WRONG!)</PRE
><P
CLASS="para"
>If the terminal control string requires numeric parameters, then you must
do the interpolation yourself:</P
><PRE
CLASS="programlisting"
>$str = $terminal-&gt;Tputs('DC', 1);
$str =~ s/%d/7/;
print STDOUT $str;        # delete seven characters</PRE
><P
CLASS="para"
>The output strings for <CODE
CLASS="literal"
>Tputs()</CODE
> are cached for counts of 1.
<CODE
CLASS="literal"
>Tgoto()</CODE
> does not cache.  <CODE
CLASS="literal"
>$terminal-&gt;{_</CODE
><CODE
CLASS="replaceable"
><I
>xx</I
></CODE
><CODE
CLASS="literal"
>}</CODE
>
is the raw termcap data and <CODE
CLASS="literal"
>$terminal-&gt;{</CODE
><CODE
CLASS="replaceable"
><I
>xx</I
></CODE
><CODE
CLASS="literal"
>}</CODE
> is the cached
version (where <CODE
CLASS="replaceable"
><I
>xx</I
></CODE
> is the two-character terminal capability code).</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.95"
>7.2.64.1 Getting terminal output speed</A
></H4
><P
CLASS="para"
>You can use the POSIX module to get your terminal's output speed for use
in the <CODE
CLASS="literal"
>Tgetent()</CODE
> call:</P
><PRE
CLASS="programlisting"
>require POSIX;
my $termios = new POSIX::Termios;
$termios-&gt;getattr;
my $ospeed = $termios-&gt;getospeed;</PRE
><P
CLASS="para"
>The method using <EM
CLASS="emphasis"
>ioctl</EM
>(2) works like this:</P
><PRE
CLASS="programlisting"
>require 'ioctl.pl';
ioctl(TTY, $TIOCGETP, $sgtty);
($ispeed, $ospeed) = unpack('cc', $sgtty);</PRE
><A
CLASS="indexterm"
NAME="AUTOID-27080"
></A
><A
CLASS="indexterm"
NAME="AUTOID-27081"
></A
><A
CLASS="indexterm"
NAME="AUTOID-27082"
></A
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_063.htm"
TITLE="7.2.63 Sys::Syslog&nbsp;- Perl Interface to UNIX syslog(3) Calls"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.63 Sys::Syslog&nbsp;- Perl Interface to UNIX syslog(3) Calls"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_065.htm"
TITLE="7.2.65 Term::Complete&nbsp;- Word Completion Module"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.65 Term::Complete&nbsp;- Word Completion Module"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.2.63 Sys::Syslog&nbsp;- Perl Interface to UNIX syslog(3) Calls</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.2.65 Term::Complete&nbsp;- Word Completion Module</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
