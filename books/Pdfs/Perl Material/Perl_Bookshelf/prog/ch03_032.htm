<HTML
><HEAD
>
<TITLE>[Chapter 3] 3.2.32 eval</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:49:05Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch03_02.htm"
TITLE="3.2 Perl Functions in Alphabetical Order"><LINK
REL="prev"
HREF="ch03_031.htm"
TITLE="3.2.31 eof"><LINK
REL="next"
HREF="ch03_033.htm"
TITLE="3.2.33 exec"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_031.htm"
TITLE="3.2.31 eof"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.31 eof"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch03_01.htm"
TITLE="3. Functions"
>Chapter 3<BR>Functions</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_033.htm"
TITLE="3.2.33 exec"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.33 exec"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="PERL2-CMD-EVAL"
>3.2.32 eval</A
></H3
><PRE
CLASS="programlisting"
>eval <CODE
CLASS="replaceable"
><I
>EXPR</I
></CODE
>
eval <CODE
CLASS="replaceable"
><I
>BLOCK</I
></CODE
></PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH03.EVAL"
></A
>The value expressed by <CODE
CLASS="replaceable"
><I
>EXPR</I
></CODE
> is parsed and executed as though it were a
little Perl program.  It is executed in the context of the current
Perl program, so that any variable settings remain afterward, as do
any subroutine or format definitions.  The code of the <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
> is treated as a
block, so any locally scoped variables declared within the <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
> last
only until the <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
> is done.
(See <A
CLASS="xref"
HREF="ch03_087.htm"
TITLE="local"
><B
CLASS="xref.cmd"
>local</B
></A
> and <A
CLASS="xref"
HREF="ch03_097.htm"
TITLE="my"
><B
CLASS="xref.cmd"
>my</B
></A
>.)
As with any code in a block, a final semicolon is not required.
If <CODE
CLASS="replaceable"
><I
>EXPR</I
></CODE
> is omitted, the operator evaluates <B
CLASS="emphasis.bold"
>$_</B
>.</P
><P
CLASS="para"
>The value returned from an <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
> is the value of the last expression evaluated, just
as with subroutines.  Similarly, you may use the <A
CLASS="xref"
HREF="ch03_125.htm"
TITLE="return"
><B
CLASS="xref.cmd"
>return</B
></A
> operator to
return a value from the middle of the <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
>.
If there is a syntax error or run-time error
(including any produced by the <A
CLASS="xref"
HREF="ch03_027.htm"
TITLE="die"
><B
CLASS="xref.cmd"
>die</B
></A
> operator), <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
> returns
the undefined value and puts the error message in <B
CLASS="emphasis.bold"
>$@</B
>.
If there is no error, <B
CLASS="emphasis.bold"
>$@</B
> is guaranteed to be set to the null
string, so you can test it reliably afterward for errors.</P
><P
CLASS="para"
>Here's a statement that
assigns an element to a hash chosen at run-time:</P
><PRE
CLASS="programlisting"
>eval &quot;\$$arrayname{\$key} = 1&quot;;</PRE
><P
CLASS="para"
>(You can accomplish that more simply with soft references&nbsp;- see
&quot;Symbolic References&quot; in <A
CLASS="xref"
HREF="ch04_01.htm"
TITLE="References and Nested Data Structures"
>Chapter 4, <CITE
CLASS="chapter"
>References and Nested Data Structures</CITE
></A
>.)
And here is a simple Perl shell:</P
><PRE
CLASS="programlisting"
>while (&lt;&gt;) { eval; print $@; }</PRE
><P
CLASS="para"
>Since <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
> traps otherwise-fatal errors, it is useful
for determining whether a particular feature (such as <A
CLASS="xref"
HREF="ch03_151.htm"
TITLE="socket"
><B
CLASS="xref.cmd"
>socket</B
></A
> or
<A
CLASS="xref"
HREF="ch03_163.htm"
TITLE="symlink"
><B
CLASS="xref.cmd"
>symlink</B
></A
>) is implemented.
In fact, <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
> is the way to do all
exception handling in Perl. If the code to be executed doesn't vary,
you should use the
<CODE
CLASS="literal"
>eval</CODE
> <CODE
CLASS="replaceable"
><I
>BLOCK</I
></CODE
> form to trap
run-time errors; 
the code in the block is
compiled only once rather than on each execution, yielding greater
efficiency.  The error, if any, is still
returned in <B
CLASS="emphasis.bold"
>$@</B
>.  Examples:</P
><PRE
CLASS="programlisting"
># make divide-by-zero non-fatal
eval { $answer = $a / $b; }; warn $@ if $@;

# same thing, but less efficient
eval '$answer = $a / $b'; warn $@ if $@;

# a compile-time error (not trapped)
eval { $answer = };

# a run-time error
eval '$answer =';  # sets $@</PRE
><P
CLASS="para"
>Here, the code in the <CODE
CLASS="replaceable"
><I
>BLOCK</I
></CODE
> has to be valid Perl code
to make it past the compilation phase.  The code in the string doesn't get
examined until run-time, and so doesn't cause an error until run-time.</P
><P
CLASS="para"
>With an <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
> you should be careful
to remember what's being looked at when:</P
><PRE
CLASS="programlisting"
>eval $x;          # CASE 1
eval &quot;$x&quot;;        # CASE 2

eval '$x';        # CASE 3
eval { $x };      # CASE 4

eval &quot;\$$x++&quot;;    # CASE 5
$$x++;            # CASE 6</PRE
><P
CLASS="para"
>Cases 1 and 2 above behave identically: they run the code contained in
the variable <CODE
CLASS="literal"
>$x</CODE
>.  (Case 2 has misleading double quotes,
making the reader wonder what else might be happening, when nothing is.
The contents of <CODE
CLASS="literal"
>$x</CODE
> would in any event have to be converted to
a string for parsing.)
Cases 3 and 4 likewise behave in the same way: they run the code
<CODE
CLASS="literal"
>$x</CODE
>, which does nothing at all except return the value of <CODE
CLASS="literal"
>$x</CODE
>.
(Case 4 is preferred since the expression doesn't need to recompiled each time.)
Case 5 is a place where normally you <EM
CLASS="emphasis"
>would</EM
> like to use double quotes
to let you interpolate the variable name, except that in this particular
situation you can just use symbolic references instead, as in case 6.</P
><P
CLASS="para"
>A frequently asked question is how to set up an exit routine.
One common way is to use an <CODE
CLASS="literal"
>END</CODE
> block.
But you can also do it with an <A
CLASS="xref"
HREF="ch03_032.htm"
TITLE="eval"
><B
CLASS="xref.cmd"
>eval</B
></A
>, like this:</P
><PRE
CLASS="programlisting"
>#!/usr/bin/perl

eval &lt;&lt;'EndOfEval';  $start = __LINE__;
   .
   .           # your ad here
   .
EndOfEval

# Cleanup

unlink &quot;/tmp/myfile$$&quot;;
$@ &amp;&amp; ($@ =~ s/\(eval \d+\) at line (\d+)/$0 .
    &quot; line &quot; . ($1+$start)/e, die $@);
exit 0;</PRE
><P
CLASS="para"
>Note that the code supplied for an <B
CLASS="emphasis.bold"
>eval</B
> might not
be recompiled if the text hasn't changed.  On the rare occasions when you want
to force a recompilation (because you want to reset a <CODE
CLASS="literal"
>..</CODE
> operator, for instance), you could say something like
this:<A
CLASS="indexterm"
NAME="AUTOID-9828"
></A
></P
><PRE
CLASS="programlisting"
>eval $prog . '#' . ++$seq;</PRE
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_031.htm"
TITLE="3.2.31 eof"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 3.2.31 eof"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch03_033.htm"
TITLE="3.2.33 exec"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 3.2.33 exec"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>3.2.31 eof</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>3.2.33 exec</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
