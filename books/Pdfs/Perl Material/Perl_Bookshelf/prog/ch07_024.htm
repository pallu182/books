<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.2.24 ExtUtils::MM_Unix&nbsp;- Methods Used by ExtUtils::MakeMaker</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T02:02:17Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_02.htm"
TITLE="7.2 Library Modules"><LINK
REL="prev"
HREF="ch07_023.htm"
TITLE="7.2.23 ExtUtils::MM_OS2&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker"><LINK
REL="next"
HREF="ch07_025.htm"
TITLE="7.2.25 ExtUtils::MM_VMS&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_023.htm"
TITLE="7.2.23 ExtUtils::MM_OS2&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.23 ExtUtils::MM_OS2&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. The Standard Perl Library"
>Chapter 7<BR>The Standard Perl Library</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_025.htm"
TITLE="7.2.25 ExtUtils::MM_VMS&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.25 ExtUtils::MM_VMS&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="AUTOID-21897"
>7.2.24 ExtUtils::MM_Unix&nbsp;- Methods Used by ExtUtils::MakeMaker</A
></H3
><PRE
CLASS="programlisting"
>require ExtUtils::MM_Unix;</PRE
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="CH07.OS1"
></A
><A
CLASS="indexterm"
NAME="CH07.OS2"
></A
>The methods provided by this package (and by the other MM_* packages)
are designed to be used in conjunction with ExtUtils::MakeMaker.  You
will never <A
CLASS="xref"
HREF="ch03_123.htm"
TITLE="require"
><B
CLASS="xref.cmd"
>require</B
></A
> this module yourself.  You would only define methods
in this or a similar module if you're working on improving the porting
capabilities of MakeMaker.  Nevertheless, this is a laudable goal, so
we'll talk about it here.</P
><P
CLASS="para"
>When MakeMaker writes a <EM
CLASS="emphasis"
>Makefile</EM
>, it creates one or more
objects that inherit their methods from package MM. MM itself doesn't provide
any methods, but it inherits from the ExtUtils::MM_Unix class. However, for
certain platforms, it also inherits from an OS-specific module such as MM_VMS,
and it does this <EM
CLASS="emphasis"
>before</EM
> it inherits from the MM_Unix module
in the <B
CLASS="emphasis.bold"
>@ISA</B
> list.  The inheritance tree of MM
therefore lets the OS-specific package override any of the methods listed here.
In a sense, the MM_Unix package is slightly misnamed, since it provides
fundamental methods on non-UNIX systems too, to the extent that the system is
like UNIX.</P
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.35"
>7.2.24.1 MM methods</A
></H4
><P
CLASS="para"
>We've avoided listing deprecated methods here, as well as any private methods
you're unlikely to want to override.</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>catdir</CODE
> <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Concatenates two or more directory names to form a complete path ending
with a directory.  On UNIX it just glues it together with a <CODE
CLASS="literal"
>/</CODE
>
character.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>catfile</CODE
> <CODE
CLASS="replaceable"
><I
>LIST</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Concatenates one or more directory names and a filename to form a
complete path ending with a filename.  Also uses <CODE
CLASS="literal"
>/</CODE
> on UNIX.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>dir_target</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Takes an array of directories that need to exist and returns a
<EM
CLASS="emphasis"
>Makefile</EM
> entry for a <EM
CLASS="emphasis"
>.exists</EM
> file in these directories.  Returns
nothing if the entry has already been processed.  We're helpless,
though, if the same directory comes as <CODE
CLASS="literal"
>$(FOO)</CODE
> and as <CODE
CLASS="literal"
>bar</CODE
>.
Both of them get an entry; that's why we use &quot;<CODE
CLASS="literal"
>::</CODE
>&quot;.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>file_name_is_absolute</CODE
> <CODE
CLASS="replaceable"
><I
>FILENAME</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Takes as argument a path and returns true if it is an absolute path.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>find_perl</CODE
> <CODE
CLASS="replaceable"
><I
>VERSION, NAMES, DIRS, TRACE</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Searches for an executable Perl that is at least the specified
<CODE
CLASS="replaceable"
><I
>VERSION</I
></CODE
>, named by one of the entries in <CODE
CLASS="replaceable"
><I
>NAMES</I
></CODE
> (an array
reference), and located in one of the entries of <CODE
CLASS="replaceable"
><I
>DIRS</I
></CODE
> (also an
array reference). It prints debugging info if <CODE
CLASS="replaceable"
><I
>TRACE</I
></CODE
> is true.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>guess_name</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Guesses the name of this package by examining the working directory's
name.  MakeMaker calls this only if the developer has not supplied a
<CODE
CLASS="literal"
>NAME</CODE
> attribute.  Shame on you.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>has_link_code</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns true if <CODE
CLASS="literal"
>C</CODE
>, <CODE
CLASS="literal"
>XS</CODE
>, <CODE
CLASS="literal"
>MYEXTLIB</CODE
> or similar
objects exist within this object that need a compiler.  Does not descend
into subdirectories as <CODE
CLASS="literal"
>needs_linking()</CODE
> does.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>libscan</CODE
> <CODE
CLASS="replaceable"
><I
>FILENAME</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Takes a path to a file that is found by <CODE
CLASS="literal"
>init_dirscan()</CODE
> and returns false
if we don't want to include this file in the library. It is mainly used to
exclude <EM
CLASS="emphasis"
>RCS/</EM
>, <EM
CLASS="emphasis"
>CVS/</EM
>, and <EM
CLASS="emphasis"
>SCCS/</EM
> directories from installation.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>lsdir</CODE
> <CODE
CLASS="replaceable"
><I
>DIR</I
></CODE
>, <CODE
CLASS="replaceable"
><I
>REGEXP</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Takes as arguments a directory name and a regular expression.  Returns
all entries in the directory that match the regular expression.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>maybe_command_in_dirs</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Method under development.  Not yet used.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>maybe_command</CODE
> <CODE
CLASS="replaceable"
><I
>FILENAME</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns true if the argument is likely to be a command.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>needs_linking</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Does this module need linking?  Looks into subdirectory objects, if any.  (See
also <CODE
CLASS="literal"
>has_link_code()</CODE
>.)</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>nicetext</CODE
> <CODE
CLASS="replaceable"
><I
>TARGET</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>(A misnamed method.)  The MM_Unix version of the method just
returns the argument without further processing.
On VMS, this method ensures that colons marking targets are preceded by
space.  Most UNIX <EM
CLASS="emphasis"
>makes</EM
> don't need this, but it's necessary under VMS
to distinguish the target delimiter from a colon appearing as part of
a filespec.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>path</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Takes no argument.  Returns the environment variable <CODE
CLASS="literal"
>PATH</CODE
> as an array.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>perl_script</CODE
> <CODE
CLASS="replaceable"
><I
>FILENAME</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Returns true if the argument is likely to be a Perl script.  With
MM_Unix this is true for any ordinary, readable file.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>prefixify</CODE
> <CODE
CLASS="replaceable"
><I
>ATTRNAME, OLDPREFIX, NEWPREFIX</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Processes a path attribute in
<CODE
CLASS="literal"
>$self-&gt;{ </CODE
><CODE
CLASS="replaceable"
><I
>ATTRNAME</I
></CODE
><CODE
CLASS="literal"
> }</CODE
>.  First
it looks it up for you in <CODE
CLASS="literal"
>%Config</CODE
> if it doesn't have a value
yet.  Then it replaces (in-place) the <CODE
CLASS="replaceable"
><I
>OLDPREFIX</I
></CODE
> with the
<CODE
CLASS="replaceable"
><I
>NEWPREFIX</I
></CODE
> (if it matches).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>replace_manpage_separator</CODE
> <CODE
CLASS="replaceable"
><I
>FILENAME</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Takes the filename of a package, which if it's a nested package will
have a name of the form &quot;<CODE
CLASS="literal"
>Foo/Bar</CODE
>&quot; (under UNIX),
and replaces the
subdirectory delimiter with &quot;<CODE
CLASS="literal"
>::</CODE
>&quot;.  Returns the altered name.</P
></DD
></DL
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.36"
>7.2.24.2 Methods to produce chunks of text for the Makefile</A
></H4
><P
CLASS="para"
>When MakeMaker thinks it has all its ducks in a row, it calls a special
sequence of methods to produce the Makefile for a given MakeMaker
object.  The list of methods it calls is specified in the array
<CODE
CLASS="literal"
>@ExtUtils::MakeMaker::MM_Sections</CODE
>, one method per section.
Since these routines are all called the same way, we won't document
each of them separately, except to list them.</P
><P
CLASS="para"
>By far the most accurate and up-to-date documentation for what each
method does is actually the <EM
CLASS="emphasis"
>Makefile</EM
> that MakeMaker produces.
Each section of the file is labeled with the name of the method that
produces it, so once you see how you want to change the <EM
CLASS="emphasis"
>Makefile</EM
>,
it's a trivial matter to work back from the proposed change and find the
method responsible for it.</P
><P
CLASS="para"
>You've plowed through a lot of ugly things to get here, but since you've
read this far, we'll reward you by pointing out something incredibly
beautiful in MakeMaker.  The arguments (if any) that are passed to each
method are simply the pseudo-attributes of the same name that you
already saw documented under &quot;Additional Lowercase Attributes&quot; in the
section on ExtUtils::MakeMaker.  You'll recall that those
pseudo-attributes were specified as anonymous hashes, which Just Happen
to have exactly the same syntax inside as named parameters.  Fancy that.
So the arguments just come right into your method as ordinary named
parameters.  Assign the arguments to a hash, and off you go.  And it's
completely forward and backward compatible.  Even if you override a
method that didn't have arguments before, there's no problem.  Since it's
all driven off the method name, just name your new pseudo-attribute
after your method, and your method will get its arguments.</P
><P
CLASS="para"
>The return values are also easy to understand: each method simply
returns the string it wants to put into its section of the
<EM
CLASS="emphasis"
>Makefile</EM
>.</P
><P
CLASS="para"
>Two special methods are <CODE
CLASS="literal"
>post_initialize()</CODE
> and <CODE
CLASS="literal"
>postamble()</CODE
>,
each of which returns an empty string by default.  You can define them in your
<EM
CLASS="emphasis"
>Makefile.PL</EM
> to insert customized text near the beginning or end of
the <EM
CLASS="emphasis"
>Makefile</EM
>.</P
><P
CLASS="para"
>Here are the methods.  They're called in this order (reading down the columns):</P
><TABLE
CLASS="informaltable"
BORDER="1"
CELLPADDING="3"
><TBODY
CLASS="tbody"
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>post_initialize()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>top_targets()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>realclean()</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>const_config()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>linkext()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>dist_basics()</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>constants()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>dlsyms()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>dist_core()</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>const_loadlibs()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>dynamic()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>dist_dir()</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>const_cccmd()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>dynamic_bs()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>dist_test()</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>tool_autosplit()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>dynamic_lib()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>dist_ci()</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>tool_xsubpp()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>static()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>install()</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>tools_other()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>static_lib()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>force()</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>dist()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>installpm()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>perldepend()</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>macro()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>installpm_x()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>makefile()</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>depend()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>manifypods()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>staticmake()</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>post_constants()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>processPL()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>test()</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>pasthru()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>installbin()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>test_via_harness()</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>c_o()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>subdirs()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>test_via_script()</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>xs_c()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>subdir_x()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>postamble()</CODE
></TD
></TR
><TR
CLASS="row"
VALIGN="TOP"
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>xs_o()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
><CODE
CLASS="literal"
>clean()</CODE
></TD
><TD
CLASS="entry"
ROWSPAN="1"
COLSPAN="1"
></TD
></TR
></TBODY
></TABLE
></DIV
><DIV
CLASS="sect3"
><H4
CLASS="sect3"
><A
CLASS="title"
NAME="PERL2-CH-7-SECT-1.37"
>7.2.24.3 See also</A
></H4
><P
CLASS="para"
>ExtUtils::MakeMaker library module.</P
><A
CLASS="indexterm"
NAME="AUTOID-22178"
></A
><A
CLASS="indexterm"
NAME="AUTOID-22179"
></A
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_023.htm"
TITLE="7.2.23 ExtUtils::MM_OS2&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.23 ExtUtils::MM_OS2&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_025.htm"
TITLE="7.2.25 ExtUtils::MM_VMS&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.25 ExtUtils::MM_VMS&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.2.23 ExtUtils::MM_OS2&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.2.25 ExtUtils::MM_VMS&nbsp;- Methods to Override UNIX Behavior in ExtUtils::MakeMaker</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
