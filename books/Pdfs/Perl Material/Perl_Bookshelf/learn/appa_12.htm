<HTML
><HEAD
>
<TITLE>[Appendix A] A.12 Chapter 13, File and Directory Manipulation</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl"><META
NAME="DC.creator"
CONTENT="Randal Schwartz, Tom Christiansen &amp; Larry Wall"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:37:01Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-284-0"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="appa_01.htm"
TITLE="A. Exercise Answers"><LINK
REL="prev"
HREF="appa_11.htm"
TITLE="A.11 Chapter 12, Directory Access"><LINK
REL="next"
HREF="appa_13.htm"
TITLE="A.13 Chapter 14, Process Management"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/lsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_11.htm"
TITLE="A.11 Chapter 12, Directory Access"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: A.11 Chapter 12, Directory Access"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="appendix"
REL="up"
HREF="appa_01.htm"
TITLE="A. Exercise Answers"
>Appendix A<BR>Exercise Answers</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_13.htm"
TITLE="A.13 Chapter 14, Process Management"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: A.13 Chapter 14, Process Management"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="appa-33171"
>A.12 Chapter 13, File and Directory Manipulation</A
></H2
><OL
CLASS="orderedlist"
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-178936"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
><A
CLASS="indexterm"
NAME="appa-idx-178742-0"
></A
>unlink @ARGV;</PRE
><P
CLASS="para"
>Yup, that's it. The <CODE
CLASS="literal"
>@ARGV</CODE
> array is a list of names to be removed. The <CODE
CLASS="literal"
>unlink</CODE
> operator takes a list of names, so we just marry the two, and we're done.</P
><P
CLASS="para"
>Of course, this doesn't handle error reporting, or the <CODE
CLASS="literal"
>-f</CODE
> or <CODE
CLASS="literal"
>-i</CODE
> options, or anything like that, but that'd just be gravy. If you did that, good!</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-178938"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>($old, $new) = @ARGV; # name them
if (-d $new) { # new name is a directory, need to patch it up
    ($basename = $old) =~ <A
CLASS="indexterm"
NAME="appa-idx-178743-0"
></A
><A
CLASS="indexterm"
NAME="appa-idx-178743-1"
></A
>s#.*/##s; # get basename of $old
    $new .= &quot;/$basename&quot;; # and append it to new name
}
<A
CLASS="indexterm"
NAME="appa-idx-178744-0"
></A
>rename($old,$new) || die &quot;Cannot rename $old to $new: $!&quot;;</PRE
><P
CLASS="para"
>The workhorse in this program is the last line, but the remainder of the program is necessary for the case where the name we are renaming to is a directory.</P
><P
CLASS="para"
>First, we give understandable names to the two elements of <CODE
CLASS="literal"
>@ARGV</CODE
>. Then, if the <CODE
CLASS="literal"
>$new</CODE
> name is a directory, we need to patch it by adding the basename of the <CODE
CLASS="literal"
>$old</CODE
> name to the end of the new name. This means that renaming <EM
CLASS="emphasis"
>/usr/src/fred</EM
> to<EM
CLASS="emphasis"
> /etc</EM
> results in really renaming <EM
CLASS="emphasis"
>/usr/src/fred</EM
> to <EM
CLASS="emphasis"
>/etc/fred</EM
>.</P
><P
CLASS="para"
>Finally, once the basename is patched up, we're home free, with a <CODE
CLASS="literal"
>rename</CODE
> invocation.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-179404"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>($old, $new) = @ARGV; # name them
if (-d $new) { # new name is a directory, need to patch it up
    ($basename = $old) =~ <A
CLASS="indexterm"
NAME="appa-idx-1509-0"
></A
><A
CLASS="indexterm"
NAME="appa-idx-1509-1"
></A
>s#.*/##s; # get basename of $old
    $new .= &quot;/$basename&quot;; # and append it to new name
}
link($old,$new) || die &quot;Cannot link $old to $new: $!&quot;;</PRE
><P
CLASS="para"
>This program is identical to the previous program except for the very last line, because we're linking, not renaming.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-178940"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>if ($ARGV[0] eq &quot;-s&quot;) { # wants a symlink
    $symlink++; # remember that
    <A
CLASS="indexterm"
NAME="appa-idx-178748-0"
></A
>shift(@ARGV); # and toss the -s flag
}
($old, $new) = @ARGV; # name them
if (-d $new) { # new name is a directory, need to patch it up
    ($basename = $old) =~ <A
CLASS="indexterm"
NAME="appa-idx-1523-0"
></A
><A
CLASS="indexterm"
NAME="appa-idx-1523-1"
></A
>s#.*/##s; # get basename of $old
    $new .= &quot;/$basename&quot;; # and append it to new name
}
if ($symlink) { # wants a symlink
    <A
CLASS="indexterm"
NAME="appa-idx-178745-0"
></A
>symlink($old,$new);
} else { # wants a hard link
    <A
CLASS="indexterm"
NAME="appa-idx-178746-0"
></A
>link($old,$new);
}</PRE
><P
CLASS="para"
>The middle of this program is the same as the previous two exercises. What's new is the first few lines and the last few lines.</P
><P
CLASS="para"
>The first few lines look at the first argument to the program. If this argument is <CODE
CLASS="literal"
>-s</CODE
>, the scalar variable <CODE
CLASS="literal"
>$symlink</CODE
> is incremented, resulting in a value of <CODE
CLASS="literal"
>1</CODE
> for the variable. The <A
CLASS="indexterm"
NAME="appa-idx-178747-0"
></A
><CODE
CLASS="literal"
>@ARGV</CODE
> array is then shifted, removing the <CODE
CLASS="literal"
>-s</CODE
> flag. If the <CODE
CLASS="literal"
>-s</CODE
> flag isn't present, there's nothing to be done, and <CODE
CLASS="literal"
>$symlink</CODE
> will remain <CODE
CLASS="literal"
>undef</CODE
>. Shifting the <CODE
CLASS="literal"
>@ARGV</CODE
> array occurs frequently enough that the <CODE
CLASS="literal"
>@ARGV</CODE
> array is the <A
CLASS="indexterm"
NAME="appa-idx-178749-0"
></A
>default argument for <CODE
CLASS="literal"
>shift</CODE
>; that is, we could have said:</P
><PRE
CLASS="programlisting"
>  shift;</PRE
><P
CLASS="para"
>in place of</P
><PRE
CLASS="programlisting"
>  shift(@ARGV);</PRE
><P
CLASS="para"
>The last few lines look at the value of <CODE
CLASS="literal"
>$symlink</CODE
>. It's going to be either <CODE
CLASS="literal"
>1</CODE
> or <CODE
CLASS="literal"
>undef</CODE
>, and based on that, we either <CODE
CLASS="literal"
>symlink</CODE
> the files or <CODE
CLASS="literal"
>link</CODE
> them.</P
></LI
><LI
CLASS="listitem"
><P
CLASS="para"
><A
CLASS="listitem"
NAME="appa-pgfId-179138"
></A
>Here's one way to do it:</P
><PRE
CLASS="programlisting"
>foreach $f (&lt;*&gt;) {
    print &quot;$f -&gt; $where\n&quot; if defined($where = <A
CLASS="indexterm"
NAME="appa-idx-178751-0"
></A
>readlink($f));
}</PRE
><P
CLASS="para"
>The scalar variable <CODE
CLASS="literal"
>$f</CODE
> is set in turn to each of the filenames in the current directory. For each name, <CODE
CLASS="literal"
>$where</CODE
> gets set to the <CODE
CLASS="literal"
>readlink()</CODE
> of that name. If the name is not a symlink, the <CODE
CLASS="literal"
>readlink</CODE
> operator returns <CODE
CLASS="literal"
>undef</CODE
>, yielding a false value for the <CODE
CLASS="literal"
>if</CODE
> test, and the <CODE
CLASS="literal"
>print</CODE
> is skipped. But when the <CODE
CLASS="literal"
>readlink</CODE
> operator returns a value, the <CODE
CLASS="literal"
>print</CODE
> displays the source and destination symlink values.</P
></LI
></OL
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_11.htm"
TITLE="A.11 Chapter 12, Directory Access"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: A.11 Chapter 12, Directory Access"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="appa_13.htm"
TITLE="A.13 Chapter 14, Process Management"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: A.13 Chapter 14, Process Management"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>A.11 Chapter 12, Directory Access</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>A.13 Chapter 14, Process Management</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
