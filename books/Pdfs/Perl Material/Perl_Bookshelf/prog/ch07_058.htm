<HTML
><HEAD
>
<TITLE>[Chapter 7] 7.2.58 Socket&nbsp;- Load the C socket.h Defines and Structure Manipulators</TITLE>
<META
NAME="DC.title"
CONTENT="Programming Perl"><META
NAME="DC.creator"
CONTENT="Larry Wall, Tom Christiansen &amp; Randal L. Schwartz"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T02:04:01Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-149-6"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch07_02.htm"
TITLE="7.2 Library Modules"><LINK
REL="prev"
HREF="ch07_057.htm"
TITLE="7.2.57 sigtrap&nbsp;- Enable Stack Backtrace on Unexpected Signals"><LINK
REL="next"
HREF="ch07_059.htm"
TITLE="7.2.59 strict&nbsp;- Restrict Unsafe Constructs"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Programming Perl"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,65"
HREF="index.htm"
ALT="Programming Perl"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/psrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_057.htm"
TITLE="7.2.57 sigtrap&nbsp;- Enable Stack Backtrace on Unexpected Signals"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.57 sigtrap&nbsp;- Enable Stack Backtrace on Unexpected Signals"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch07_01.htm"
TITLE="7. The Standard Perl Library"
>Chapter 7<BR>The Standard Perl Library</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_059.htm"
TITLE="7.2.59 strict&nbsp;- Restrict Unsafe Constructs"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.59 strict&nbsp;- Restrict Unsafe Constructs"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="SECT2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="AUTOID-26647"
>7.2.58 Socket&nbsp;- Load the C socket.h Defines and Structure Manipulators</A
></H3
><A
CLASS="indexterm"
NAME="CH07.SOCK"
></A
><PRE
CLASS="programlisting"
>use Socket;

$proto = getprotobyname('udp');
socket(Socket_Handle, PF_INET, SOCK_DGRAM, $proto);
$iaddr = gethostbyname('hishost.com');
$port = getservbyname('time', 'udp');
$sin = sockaddr_in($port, $iaddr);
send(Socket_Handle, 0, 0, $sin);

$proto = getprotobyname('tcp');
socket(Socket_Handle, PF_INET, SOCK_STREAM, $proto);
$port = getservbyname('smtp');
$sin = sockaddr_in($port, inet_aton(&quot;127.1&quot;));
$sin = sockaddr_in(7, inet_aton(&quot;localhost&quot;));
$sin = sockaddr_in(7, INADDR_LOOPBACK);
connect(Socket_Handle, $sin);

($port, $iaddr) = sockaddr_in(getpeername(Socket_Handle));
$peer_host = gethostbyaddr($iaddr, AF_INET);
$peer_addr = inet_ntoa($iaddr);

socket(Socket_Handle, PF_UNIX, SOCK_STREAM, 0);
unlink('/tmp/usock');
$sun = sockaddr_un('/tmp/usock');
bind(Socket_Handle, $sun);</PRE
><P
CLASS="para"
>This module is just a translation of the C <EM
CLASS="emphasis"
>socket.h</EM
> file.
Unlike the old mechanism of requiring a translated <EM
CLASS="emphasis"
>socket.ph</EM
>
file, this uses the <EM
CLASS="emphasis"
>h2xs</EM
> program (see the Perl source distribution)
and your native C compiler.  This means that it has a
far more likely chance of getting the numbers right.  This includes
all of the commonly used preprocessor-defined constants like <CODE
CLASS="literal"
>AF_INET</CODE
>,
<CODE
CLASS="literal"
>SOCK_STREAM</CODE
>, and so on.</P
><P
CLASS="para"
>In addition, some structure manipulation functions are available:</P
><DL
CLASS="variablelist"
><DT
CLASS="term"
><CODE
CLASS="literal"
>inet_aton</CODE
> <CODE
CLASS="replaceable"
><I
>HOSTNAME</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Takes a string giving the name of a host, and translates that
to a four-byte, packed string (structure).  Takes arguments of both
the <CODE
CLASS="literal"
>rtfm.mit.edu</CODE
> and <CODE
CLASS="literal"
>18.181.0.24</CODE
> types.  If the host name
cannot be resolved, returns the undefined value.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>inet_ntoa</CODE
> <CODE
CLASS="replaceable"
><I
>IP_ADDRESS</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Takes a four-byte IP address (as returned by <CODE
CLASS="literal"
>inet_aton()</CODE
>)
and translates it into a string of the form <EM
CLASS="emphasis"
>d.d.d.d</EM
>
where the <EM
CLASS="emphasis"
>d</EM
>s are numbers less than 256 (the normal,
readable, dotted-quad notation for Internet addresses).</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>INADDR_ANY</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Note: This function does not return a number, but a packed string.

Returns the four-byte wildcard IP address that specifies any
of the host's IP addresses. (A particular machine can have
more than one IP address, each address corresponding to
a particular network interface.  This wildcard address
allows you to bind to all of them simultaneously.)
Normally equivalent to <CODE
CLASS="literal"
>inet_aton('0.0.0.0')</CODE
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>INADDR_LOOPBACK</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Note:  does not return a number, but a packed string.

Returns the four-byte loopback address.  Normally equivalent
to <CODE
CLASS="literal"
>inet_aton('localhost')</CODE
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>INADDR_NONE</CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Note:  does not return a number, but a packed string.

Returns the four-byte invalid IP address.  Normally equivalent
to <CODE
CLASS="literal"
>inet_aton('255.255.255.255')</CODE
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>sockaddr_in</CODE
> <CODE
CLASS="replaceable"
><I
>PORT, ADDRESS</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
></P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>sockaddr_in</CODE
> <CODE
CLASS="replaceable"
><I
>SOCKADDR_IN</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>In a list context, unpacks its <CODE
CLASS="replaceable"
><I
>SOCKADDR_IN</I
></CODE
> argument and returns
a list consisting of <CODE
CLASS="literal"
>(</CODE
><CODE
CLASS="replaceable"
><I
>PORT</I
></CODE
><CODE
CLASS="literal"
>, </CODE
><CODE
CLASS="replaceable"
><I
>ADDRESS</I
></CODE
><CODE
CLASS="literal"
>)</CODE
>.
In a scalar context, packs its <CODE
CLASS="literal"
>(</CODE
><CODE
CLASS="replaceable"
><I
>PORT</I
></CODE
><CODE
CLASS="literal"
>, </CODE
><CODE
CLASS="replaceable"
><I
>ADDRESS</I
></CODE
><CODE
CLASS="literal"
>)</CODE
>
arguments as a <CODE
CLASS="replaceable"
><I
>SOCKADDR_IN</I
></CODE
> and
returns it.  If this is confusing, use <CODE
CLASS="literal"
>pack_sockaddr_in()</CODE
> and
<CODE
CLASS="literal"
>unpack_sockaddr_in()</CODE
> explicitly.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>pack_sockaddr_in</CODE
> <CODE
CLASS="replaceable"
><I
>PORT, IP_ADDRESS</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Takes two arguments, a port number and a four-byte <CODE
CLASS="replaceable"
><I
>IP_ADDRESS</I
></CODE
>
(as returned by <CODE
CLASS="literal"
>inet_aton()</CODE
>).  Returns the <CODE
CLASS="literal"
>sockaddr_in</CODE
>
structure with those arguments packed in with <CODE
CLASS="literal"
>AF_INET</CODE
> filled in.
For Internet domain sockets, this
structure is normally what you need for the arguments in <A
CLASS="xref"
HREF="ch03_007.htm"
TITLE="bind"
><B
CLASS="xref.cmd"
>bind</B
></A
>,
<A
CLASS="xref"
HREF="ch03_020.htm"
TITLE="connect"
><B
CLASS="xref.cmd"
>connect</B
></A
>, and <A
CLASS="xref"
HREF="ch03_139.htm"
TITLE="send"
><B
CLASS="xref.cmd"
>send</B
></A
>, and is also returned by <A
CLASS="xref"
HREF="ch03_054.htm"
TITLE="getpeername"
><B
CLASS="xref.cmd"
>getpeername</B
></A
>,
<A
CLASS="xref"
HREF="ch03_067.htm"
TITLE="getsockname"
><B
CLASS="xref.cmd"
>getsockname</B
></A
>, and <A
CLASS="xref"
HREF="ch03_119.htm"
TITLE="recv"
><B
CLASS="xref.cmd"
>recv</B
></A
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>unpack_sockaddr_in</CODE
> <CODE
CLASS="replaceable"
><I
>SOCKADDR_IN</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Takes a <CODE
CLASS="literal"
>sockaddr_in</CODE
> structure (as returned by <CODE
CLASS="literal"
>pack_sockaddr_in()</CODE
>)
and returns a list of two elements: the port and the four-byte IP address.
This function will croak if the structure does not have <CODE
CLASS="literal"
>AF_INET</CODE
> in the right place.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>sockaddr_un</CODE
> <CODE
CLASS="replaceable"
><I
>PATHNAME</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
></P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>sockaddr_un</CODE
> <CODE
CLASS="replaceable"
><I
>SOCKADDR_UN</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>In a list context, it unpacks its <CODE
CLASS="replaceable"
><I
>SOCKADDR_UN</I
></CODE
> argument and returns
a list consisting of <CODE
CLASS="literal"
>(</CODE
><CODE
CLASS="replaceable"
><I
>PATHNAME</I
></CODE
><CODE
CLASS="literal"
>)</CODE
>.  In a scalar context, it packs its
<CODE
CLASS="replaceable"
><I
>PATHNAME</I
></CODE
> argument as a <CODE
CLASS="literal"
>SOCKADDR_UN</CODE
> and returns it.  If
this is confusing, use
<CODE
CLASS="literal"
>pack_sockaddr_un()</CODE
> and <CODE
CLASS="literal"
>unpack_sockaddr_un()</CODE
> explicitly.
These functions are only supported if your system has &lt;<EM
CLASS="emphasis"
>sys/un.h</EM
>&gt;.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>pack_sockaddr_un</CODE
> <CODE
CLASS="replaceable"
><I
>PATH</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Takes one argument, a pathname.  Returns the <CODE
CLASS="literal"
>sockaddr_un</CODE
> structure with
that path packed in with <CODE
CLASS="literal"
>AF_UNIX</CODE
> filled in.  For UNIX domain sockets,
this structure is normally what you need for the arguments in <A
CLASS="xref"
HREF="ch03_007.htm"
TITLE="bind"
><B
CLASS="xref.cmd"
>bind</B
></A
>,
<A
CLASS="xref"
HREF="ch03_020.htm"
TITLE="connect"
><B
CLASS="xref.cmd"
>connect</B
></A
>, and <A
CLASS="xref"
HREF="ch03_139.htm"
TITLE="send"
><B
CLASS="xref.cmd"
>send</B
></A
>, and is also returned by <A
CLASS="xref"
HREF="ch03_054.htm"
TITLE="getpeername"
><B
CLASS="xref.cmd"
>getpeername</B
></A
>,
<A
CLASS="xref"
HREF="ch03_067.htm"
TITLE="getsockname"
><B
CLASS="xref.cmd"
>getsockname</B
></A
> and <A
CLASS="xref"
HREF="ch03_119.htm"
TITLE="recv"
><B
CLASS="xref.cmd"
>recv</B
></A
>.</P
></DD
><DT
CLASS="term"
><CODE
CLASS="literal"
>unpack_sockaddr_un</CODE
> <CODE
CLASS="replaceable"
><I
>SOCKADDR_UN</I
></CODE
></DT
><DD
CLASS="listitem"
><P
CLASS="para"
>Takes a <CODE
CLASS="literal"
>sockaddr_un</CODE
> structure (as returned by <CODE
CLASS="literal"
>pack_sockaddr_un()</CODE
>)
and returns the pathname.  Will croak if the structure does not
have <CODE
CLASS="literal"
>AF_UNIX</CODE
> in the right place.</P
></DD
></DL
><A
CLASS="indexterm"
NAME="AUTOID-26790"
></A
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_057.htm"
TITLE="7.2.57 sigtrap&nbsp;- Enable Stack Backtrace on Unexpected Signals"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 7.2.57 sigtrap&nbsp;- Enable Stack Backtrace on Unexpected Signals"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Programming Perl"
><IMG
SRC="../gifs/txthome.gif"
ALT="Programming Perl"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="SECT2"
HREF="ch07_059.htm"
TITLE="7.2.59 strict&nbsp;- Restrict Unsafe Constructs"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 7.2.59 strict&nbsp;- Restrict Unsafe Constructs"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>7.2.57 sigtrap&nbsp;- Enable Stack Backtrace on Unexpected Signals</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>7.2.59 strict&nbsp;- Restrict Unsafe Constructs</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="../learn32/index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
