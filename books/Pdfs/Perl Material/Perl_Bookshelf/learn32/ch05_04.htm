<HTML
><HEAD
>
<TITLE>[Chapter 5] 5.4 Hash Functions</TITLE>
<META
NAME="DC.title"
CONTENT="Learning Perl on Win32 Systems"><META
NAME="DC.creator"
CONTENT="Randal L. Schwartz, Erik Olson &amp; Tom Christiansen"><META
NAME="DC.publisher"
CONTENT="O'Reilly &amp; Associates, Inc."><META
NAME="DC.date"
CONTENT="1999-07-02T01:33:18Z"><META
NAME="DC.type"
CONTENT="Text.Monograph"><META
NAME="DC.format"
CONTENT="text/html"
SCHEME="MIME"><META
NAME="DC.source"
CONTENT="1-56592-324-3"
SCHEME="ISBN"><META
NAME="DC.language"
CONTENT="en-US"><META
NAME="generator"
CONTENT="Jade 1.1/O'Reilly DocBook 3.0 to HTML 4.0"><LINK
REV="made"
HREF="mailto:online-books@oreilly.com"
TITLE="Online Books Comments"><LINK
REL="up"
HREF="ch05_01.htm"
TITLE="5. Hashes"><LINK
REL="prev"
HREF="ch05_03.htm"
TITLE="5.3 Literal Representation of a Hash"><LINK
REL="next"
HREF="ch05_05.htm"
TITLE="5.5 Hash Slices"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="htmlnav"
><H1
><IMG
SRC="gifs/smbanner.gif"
ALT="Learning Perl on Win32 Systems"
USEMAP="#srchmap"
BORDER="0"></H1
><MAP
NAME="srchmap"
><AREA
SHAPE="RECT"
COORDS="0,0,466,54"
HREF="index.htm"
ALT="Learning Perl on Win32 Systems"><AREA
SHAPE="RECT"
COORDS="467,0,514,18"
HREF="../search/wsrch.htm"
ALT="Search this book"></MAP
><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_03.htm"
TITLE="5.3 Literal Representation of a Hash"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.3 Literal Representation of a Hash"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><B
><FONT
FACE="ARIEL,HELVETICA,HELV,SANSERIF"
SIZE="-1"
><A
CLASS="chapter"
REL="up"
HREF="ch05_01.htm"
TITLE="5. Hashes"
>Chapter 5<BR>Hashes</A
></FONT
></B
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_05.htm"
TITLE="5.5 Hash Slices"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.5 Hash Slices"
BORDER="0"></A
></TD
></TR
></TABLE
>&nbsp;<HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"></DIV
><DIV
CLASS="sect1"
><H2
CLASS="sect1"
><A
CLASS="title"
NAME="ch05-Hash-Operators"
>5.4 Hash Functions</A
></H2
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-188598-0"
></A
><A
CLASS="indexterm"
NAME="ch05-idx-188598-1"
></A
>Here are some functions for hashes.</P
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-188700"
>5.4.1 The keys Function</A
></H3
><P
CLASS="para"
><A
CLASS="indexterm"
NAME="ch05-idx-188599-0"
></A
>The <CODE
CLASS="literal"
>keys(</CODE
><CODE
CLASS="replaceable"
><I
>%hashname</I
></CODE
><CODE
CLASS="literal"
>)</CODE
> function yields a list of all the current keys in the hash <CODE
CLASS="replaceable"
><I
>%hashname</I
></CODE
>. In other words, it's like the odd-numbered (first, third, fifth, and so on) elements of the list returned by unwinding <CODE
CLASS="replaceable"
><I
>%hashname</I
></CODE
> in an array context, and in fact, returns them in that order. If there are no elements to the hash, then <CODE
CLASS="literal"
>keys</CODE
> returns an empty list.</P
><P
CLASS="para"
>Here's an example using the hash from the previous examples:</P
><PRE
CLASS="programlisting"
>$fred{&quot;aaa&quot;} = &quot;bbb&quot;;
$fred{234.5} = 456.7;
@list = keys(%fred); # @list gets (&quot;aaa&quot;,234.5) or
                     # (234.5,&quot;aaa&quot;)</PRE
><P
CLASS="para"
>As with all other built-in functions, the <A
CLASS="indexterm"
NAME="ch05-idx-188600-0"
></A
>parentheses are optional: <CODE
CLASS="literal"
>keys </CODE
><CODE
CLASS="replaceable"
><I
>%fred</I
></CODE
> is like <CODE
CLASS="literal"
>keys(</CODE
><CODE
CLASS="replaceable"
><I
>%fred</I
></CODE
><CODE
CLASS="literal"
>)</CODE
>. For example:</P
><PRE
CLASS="programlisting"
>foreach $key (keys %fred) { # once for each key of %fred
        print &quot;at $key we have $fred{$key}\n&quot;; # show key and value
}</PRE
><P
CLASS="para"
>This example also shows that individual <A
CLASS="indexterm"
NAME="ch05-idx-188601-0"
></A
>hash elements can be interpolated into double-quoted strings. You cannot interpolate the entire hash, however.[<A
CLASS="footnote"
HREF="#ch05-pgfId-188724"
>3</A
>]</P
><BLOCKQUOTE
CLASS="footnote"
><DIV
CLASS="footnote"
><P
CLASS="para"
><A
CLASS="footnote"
NAME="ch05-pgfId-188724"
>[3]</A
> Well, you <EM
CLASS="emphasis"
>can</EM
>, using a slice, but we don't talk about slices here.</P
></DIV
></BLOCKQUOTE
><P
CLASS="para"
>In a scalar context, the <A
CLASS="indexterm"
NAME="ch05-idx-188602-0"
></A
><CODE
CLASS="literal"
>keys</CODE
> function gives the number of elements (key-value pairs) in the hash. For example, you can find out whether a hash is empty:</P
><PRE
CLASS="programlisting"
><A
CLASS="indexterm"
NAME="ch05-idx-188609-0"
></A
>if (keys(<CODE
CLASS="replaceable"
><I
>%somehash</I
></CODE
>)) { # if keys() not zero:
         ...;           # hash is non empty
}
                        # ... or ...
<A
CLASS="indexterm"
NAME="ch05-idx-188610-0"
></A
>while (keys(<CODE
CLASS="replaceable"
><I
>%somehash</I
></CODE
>) &lt; 10) {
        ...;         # keep looping while we have less than 10 elements
} </PRE
><P
CLASS="para"
>In fact, merely using <CODE
CLASS="replaceable"
><I
>%somehash</I
></CODE
> in a scalar context will reveal whether the hash is empty or not:</P
><PRE
CLASS="programlisting"
>if (<CODE
CLASS="replaceable"
><I
>%somehash</I
></CODE
>) { # if true, then something's in it 
    # do something with it
}</PRE
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-188701"
>5.4.2 The values Function</A
></H3
><P
CLASS="para"
>The <A
CLASS="indexterm"
NAME="ch05-idx-188603-0"
></A
><CODE
CLASS="literal"
>values(</CODE
><CODE
CLASS="replaceable"
><I
>%hashname</I
></CODE
><CODE
CLASS="literal"
>)</CODE
> function returns a list of all the current values of the <CODE
CLASS="replaceable"
><I
>%hashname</I
></CODE
>, in the same order as the keys returned by the <CODE
CLASS="literal"
>keys(</CODE
><CODE
CLASS="replaceable"
><I
>%hashname</I
></CODE
><CODE
CLASS="literal"
>)</CODE
> function. As always, the <A
CLASS="indexterm"
NAME="ch05-idx-188604-0"
></A
>parentheses are optional. For example:</P
><PRE
CLASS="programlisting"
>%lastname = <A
CLASS="indexterm"
NAME="ch05-idx-188611-0"
></A
>();                 # force %lastname empty
$lastname{&quot;fred&quot;} = &quot;flintstone&quot;;
$lastname{&quot;barney&quot;} = &quot;rubble&quot;;
@lastnames = values(%lastname); # grab the values</PRE
><P
CLASS="para"
>At this point, <CODE
CLASS="literal"
>@lastnames</CODE
> contains either <CODE
CLASS="literal"
>("flintstone"</CODE
>, <CODE
CLASS="literal"
>"rubble")</CODE
> or <CODE
CLASS="literal"
>("rubble"</CODE
>, <CODE
CLASS="literal"
>"flintstone")</CODE
>.</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-188702"
>5.4.3 The each Function</A
></H3
><P
CLASS="para"
>To <A
CLASS="indexterm"
NAME="ch05-idx-188606-0"
></A
>iterate over (that is, examine every element of) an entire hash, use <CODE
CLASS="literal"
>keys</CODE
>, looking up each returned key to get the corresponding value. Although this method is frequently used, a more efficient way is to use <A
CLASS="indexterm"
NAME="ch05-idx-188605-0"
></A
><CODE
CLASS="literal"
>each(</CODE
><CODE
CLASS="replaceable"
><I
>%hashname</I
></CODE
><CODE
CLASS="literal"
>)</CODE
>, which returns a key-value pair as a two-element list. On each evaluation of this function for the same hash, the next successive key-value pair is returned until all the elements have been accessed. When there are no more pairs, <CODE
CLASS="literal"
>each</CODE
> returns an empty list.</P
><P
CLASS="para"
>So, for example, to step through the <CODE
CLASS="literal"
>%lastname</CODE
> hash from the previous example, do something like this:</P
><PRE
CLASS="programlisting"
><A
CLASS="indexterm"
NAME="ch05-idx-188612-0"
></A
>while (($first,$last) = each(%lastname)) {
        print &quot;The last name of $first is $last\n&quot;;
}</PRE
><P
CLASS="para"
>Assigning a new value to the entire hash resets the <CODE
CLASS="literal"
>each</CODE
> function to the beginning. Adding or deleting elements of the hash is quite likely to confuse <CODE
CLASS="literal"
>each</CODE
> (and possibly you as well).</P
></DIV
><DIV
CLASS="sect2"
><H3
CLASS="sect2"
><A
CLASS="title"
NAME="ch05-pgfId-188703"
>5.4.4 The delete Function</A
></H3
><P
CLASS="para"
>So far, with what you know, you can add elements to a hash, but you cannot remove them (other than by assigning a new value to the entire hash). Perl provides the <A
CLASS="indexterm"
NAME="ch05-idx-188607-0"
></A
><CODE
CLASS="literal"
>delete</CODE
> function to <A
CLASS="indexterm"
NAME="ch05-idx-188608-0"
></A
>remove hash elements. The operand of <CODE
CLASS="literal"
>delete</CODE
> is a hash reference, just as if you were merely looking at a particular value. Perl removes the key-value pair from the hash. For example:</P
><PRE
CLASS="programlisting"
>%fred = (&quot;aaa&quot;,&quot;bbb&quot;,234.5,34.56); # give %fred two elements
delete $fred{&quot;aaa&quot;};
# %fred is now just one key-value pair</PRE
></DIV
></DIV
><DIV
CLASS="htmlnav"
><P
></P
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><TABLE
WIDTH="515"
BORDER="0"
CELLSPACING="0"
CELLPADDING="0"
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_03.htm"
TITLE="5.3 Literal Representation of a Hash"
><IMG
SRC="../gifs/txtpreva.gif"
ALT="Previous: 5.3 Literal Representation of a Hash"
BORDER="0"></A
></TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="book"
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
><IMG
SRC="../gifs/txthome.gif"
ALT="Learning Perl on Win32 Systems"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
><A
CLASS="sect1"
HREF="ch05_05.htm"
TITLE="5.5 Hash Slices"
><IMG
SRC="../gifs/txtnexta.gif"
ALT="Next: 5.5 Hash Slices"
BORDER="0"></A
></TD
></TR
><TR
><TD
ALIGN="LEFT"
VALIGN="TOP"
WIDTH="172"
>5.3 Literal Representation of a Hash</TD
><TD
ALIGN="CENTER"
VALIGN="TOP"
WIDTH="171"
><A
CLASS="index"
HREF="index/idx_0.htm"
TITLE="Book Index"
><IMG
SRC="../gifs/index.gif"
ALT="Book Index"
BORDER="0"></A
></TD
><TD
ALIGN="RIGHT"
VALIGN="TOP"
WIDTH="172"
>5.5 Hash Slices</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="515"
TITLE="footer"><P
CLASS="nav"
><FONT
SIZE="-1"
>[ <A
HREF="../index.htm"
TITLE="The Perl CD Bookshelf"
>Library Home</A
> | <A
HREF="../perlnut/index.htm"
TITLE="Perl in a Nutshell"
>Perl in a Nutshell</A
> | <A
HREF="../learn/index.htm"
TITLE="Learning Perl"
>Learning Perl</A
> | <A
HREF="index.htm"
TITLE="Learning Perl on Win32 Systems"
>Learning Perl on Win32</A
> | <A
HREF="../prog/index.htm"
TITLE="Programming Perl"
>Programming Perl</A
> | <A
HREF="../advprog/index.htm"
TITLE="Advanced Perl Programming"
>Advanced Perl Programming</A
> | <A
HREF="../cookbook/index.htm"
TITLE="Perl Cookbook"
>Perl Cookbook</A
> ]</FONT
></P
></DIV
></BODY
></HTML
>
